{
  "files_with_turkish": [
    {
      "file": "app\\page.tsx",
      "strings": [
        "en",
        "en",
        "Veri yükleme hatası:",
        "en",
        "Maç"
      ]
    },
    {
      "file": "app\\leagues\\page.tsx",
      "strings": [
        "Tüm futbol liglerini keşfedin, favori ligilerinizi seçin ve maçları takip edin."
      ]
    },
    {
      "file": "app\\profile\\page.tsx",
      "strings": [
        "Kullanıcı Profili | Football App",
        "Hesap ayarlarınızı ve favori takımlarınızı yönetin."
      ]
    },
    {
      "file": "app\\winners\\page.tsx",
      "strings": [
        "den gelen tamamlanmış maçlardan kazanan tahminleri oluştur\n        const realWinningPredictions: WinningPrediction[] = completedMatches\n          .map(match => {\n            // Gol sayılarını sayısal değere dönüştür\n            const homeGoals = parseInt(match.match_hometeam_score || \"0\")\n            const awayGoals = parseInt(match.match_awayteam_score || \"0\")\n            const totalGoals = homeGoals + awayGoals\n            \n            // Skora göre kazanan tahmin türünü belirle\n            let winningPredictions: { type: string; odd: number; profit: number }[] = []\n            \n            // 0.5 Alt/Üst kontrol\n            if (totalGoals > 0) {\n              winningPredictions.push({ \n                type: \"0.5 Üst\", \n                odd: 1.2 + Math.random() * 0.3, \n                profit: 30 + Math.floor(Math.random() * 20) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"0.5 Alt\", \n                odd: 2.5 + Math.random() * 1.0, \n                profit: 60 + Math.floor(Math.random() * 40) \n              })\n            }\n            \n            // 1.5 Alt/Üst kontrol\n            if (totalGoals > 1) {\n              winningPredictions.push({ \n                type: \"1.5 Üst\", \n                odd: 1.4 + Math.random() * 0.4, \n                profit: 40 + Math.floor(Math.random() * 30) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"1.5 Alt\", \n                odd: 2.2 + Math.random() * 0.8, \n                profit: 50 + Math.floor(Math.random() * 50) \n              })\n            }\n            \n            // 2.5 Alt/Üst kontrol\n            if (totalGoals > 2) {\n              winningPredictions.push({ \n                type: \"2.5 Üst\", \n                odd: 1.8 + Math.random() * 0.6, \n                profit: 45 + Math.floor(Math.random() * 40) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"2.5 Alt\", \n                odd: 1.7 + Math.random() * 0.6, \n                profit: 35 + Math.floor(Math.random() * 40) \n              })\n            }\n            \n            // KG Var/Yok kontrol\n            if (homeGoals > 0 && awayGoals > 0) {\n              winningPredictions.push({ \n                type: \"KG Var\", \n                odd: 1.6 + Math.random() * 0.5, \n                profit: 30 + Math.floor(Math.random() * 40) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"KG Yok\", \n                odd: 1.8 + Math.random() * 0.7, \n                profit: 40 + Math.floor(Math.random() * 45) \n              })\n            }\n            \n            // Rastgele bir kazanan tahmin seç (gerçek bir sistemde algoritmanın tahmini kullanılır)\n            const randomWinningPrediction = winningPredictions[Math.floor(Math.random() * winningPredictions.length)]\n            \n            return {\n              match_id: match.match_id,\n              match_date: match.match_date,\n              match_time: match.match_time,\n              match_hometeam_name: match.match_hometeam_name,\n              match_awayteam_name: match.match_awayteam_name,\n              match_hometeam_score: match.match_hometeam_score || \"0\",\n              match_awayteam_score: match.match_awayteam_score || \"0\",\n              team_home_badge: match.team_home_badge,\n              team_away_badge: match.team_away_badge,\n              league_name: match.league_name,\n              prediction_type: randomWinningPrediction.type,\n              odd: randomWinningPrediction.odd,\n              profit: randomWinningPrediction.profit,\n              success: true // Tüm tahminler başarılı (sadece kazanan tahminleri gösteriyoruz)\n            }\n          })\n        \n        // İstatistikleri hesapla\n        const calculatedStats = {\n          totalMatches: realWinningPredictions.length,\n          successRate: 92, // Algoritma başarı oranı %92 olarak sabit\n          totalProfit: realWinningPredictions.reduce((sum, p) => sum + p.profit, 0),\n          over25Success: realWinningPredictions.filter(p => p.prediction_type === \"2.5 Üst\").length,\n          under25Success: realWinningPredictions.filter(p => p.prediction_type === \"2.5 Alt\").length,\n          over15Success: realWinningPredictions.filter(p => p.prediction_type === \"1.5 Üst\").length,\n          under15Success: realWinningPredictions.filter(p => p.prediction_type === \"1.5 Alt\").length,\n          over05Success: realWinningPredictions.filter(p => p.prediction_type === \"0.5 Üst\").length,\n          under05Success: realWinningPredictions.filter(p => p.prediction_type === \"0.5 Alt\").length,\n          bttsSuccess: realWinningPredictions.filter(p => p.prediction_type === \"KG Var\").length,\n          noBttsSuccess: realWinningPredictions.filter(p => p.prediction_type === \"KG Yok\").length\n        }\n        \n        clearInterval(progressInterval)\n        setLoadingProgress(100)\n        \n        // Kısa bir gecikme ile yüklemeyi tamamla\n        setTimeout(() => {\n          setWinningPredictions(realWinningPredictions)\n          setStats(calculatedStats)\n          setLoading(false)\n        }, 500)\n      } catch (error) {\n        console.error(\"Error fetching winning predictions:\", error)\n        setError(\"Kazanan tahminler yüklenirken bir hata oluştu\")\n        setLoading(false)\n      }\n    }\n    \n    fetchWinningPredictions()\n  }, [])\n  \n  const formatDateForDisplay = (dateString: string) => {\n    try {\n      const date = new Date(dateString)\n      return format(date, \"d MMMM yyyy\", { locale: tr })\n    } catch (error) {\n      return dateString\n    }\n  }\n  \n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        <h1 className=\"text-2xl font-bold text-green-400 glow-text-green\">{t(",
        " }}\n            ></div>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-green-400\">{loadingProgress}%</span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Loader2 className=\"w-5 h-5 text-green-400 animate-spin\" />\n            <p className=\"text-slate-300\">Kazanan tahminler yükleniyor...</p>\n          </div>\n          <div className=\"w-full max-w-md bg-slate-800/40 h-2 rounded-full overflow-hidden\">\n            <div \n              className=\"bg-gradient-to-r from-green-500 to-green-300 h-full transition-all duration-300\"\n              style={{ width: `${loadingProgress}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-green-400 glow-text-green\">{t(",
        ")}</h1>\n        <div className=\"flex flex-col items-end\">\n          <Badge className=\"bg-gradient-to-r from-yellow-600 to-yellow-400 text-white animate-pulse\">\n            <DollarSign className=\"w-4 h-4 mr-1\" />\n            ${stats.totalProfit.toFixed(2)} Kazanç\n          </Badge>\n          <div className=\"text-xs text-green-400 mt-1 font-semibold animate-bounce\">\n            Algoritma Kazandırdı!\n          </div>\n        </div>\n      </div>\n      \n      {error ? (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700/50 text-red-400\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Algoritma İstatistikleri */}\n          <Card className=\"bg-slate-800/50 border-slate-700/50 overflow-hidden\">\n            <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-400 to-green-300\"></div>\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Bot className=\"w-5 h-5 mr-2 text-green-400\" />\n                  <CardTitle className=\"text-lg text-green-400\">{t(",
        ")}</div>\n                  <div className=\"text-2xl font-bold text-yellow-400 flex items-center\">\n                    ${stats.totalProfit.toFixed(2)}\n                    <span className=\"text-xs ml-2 text-green-400 font-semibold animate-pulse\">\n                      Algoritma Kazandırdı!\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 grid grid-cols-3 md:grid-cols-6 gap-2\">\n                <StatBadge label={t(",
        ", {type: activePredictionType})}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    filteredPredictions.map((prediction) => (\n                      <WinningPredictionCard key={prediction.match_id} prediction={prediction} />\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// İstatistik rozeti bileşeni\nfunction StatBadge({ label, count, icon }: { label: string; count: number; icon?: React.ReactNode }) {\n  return (\n    <div className=\"bg-slate-700/20 rounded px-2 py-1 flex items-center justify-between hover:bg-slate-700/40 transition-colors cursor-pointer border border-slate-700/50\">\n      <div className=\"flex items-center\">\n        {icon && <span className=\"mr-1 text-green-400\">{icon}</span>}\n        <span className=\"text-xs text-slate-300\">{label}</span>\n      </div>\n      <span className=\"text-xs font-bold text-green-400\">{count}</span>\n    </div>\n  )\n}\n\nfunction WinningPredictionCard({ prediction }: { prediction: WinningPrediction }) {\n  return (\n    <Card className=\"bg-slate-800/50 border-slate-700/50 hover:border-green-600/50 transition-colors relative overflow-hidden group\">\n      <div className=\"absolute left-0 top-0 h-full w-1 bg-green-500\"></div>\n      <div className=\"absolute -right-12 -top-12 w-24 h-24 bg-green-500/10 rounded-full group-hover:scale-150 transition-transform duration-500\"></div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <Badge variant=\"outline\" className=\"text-xs px-1 py-0 border-green-700/30 text-green-400 bg-green-900/20\">\n              {prediction.league_name}\n            </Badge>\n            <span className=\"text-xs text-slate-400 ml-2 flex items-center\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              {prediction.match_date} {prediction.match_time}\n            </span>\n          </div>\n          <Badge className=\"bg-gradient-to-r from-yellow-600 to-yellow-400 text-white\">\n            <DollarSign className=\"w-3 h-3 mr-1\" />\n            +${prediction.profit}\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n              {prediction.team_home_badge ? (\n                <img\n                  src={prediction.team_home_badge || \"/placeholder.svg\"}\n                  alt={prediction.match_hometeam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {prediction.match_hometeam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n            <span className=\"text-sm font-medium text-white truncate\">{prediction.match_hometeam_name}</span>\n          </div>\n\n          <div className=\"flex items-center justify-center mx-2\">\n            <div className=\"px-2 py-1 bg-slate-700/50 rounded-md\">\n              <span className=\"text-lg font-bold text-white\">{prediction.match_hometeam_score}</span>\n              <span className=\"text-xs mx-1 text-slate-400\">-</span>\n              <span className=\"text-lg font-bold text-white\">{prediction.match_awayteam_score}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 flex-1 justify-end min-w-0\">\n            <span className=\"text-sm font-medium text-white truncate text-right\">{prediction.match_awayteam_name}</span>\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n              {prediction.team_away_badge ? (\n                <img\n                  src={prediction.team_away_badge || \"/placeholder.svg\"}\n                  alt={prediction.match_awayteam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {prediction.match_awayteam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-3 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 animate-pulse\" />\n            <span className=\"text-sm font-medium text-green-400\">{prediction.prediction_type}</span>\n            <Badge variant=\"outline\" className=\"ml-2 text-xs px-1 py-0 border-yellow-600/30 text-yellow-400 bg-yellow-900/20\">\n              @{prediction.odd.toFixed(2)}\n            </Badge>\n          </div>\n          <div className=\"flex flex-col items-end\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-green-400 hover:text-green-300 p-0 group-hover:translate-x-1 transition-transform\">\n              {t(",
        "Tümü",
        "2.5 Üst",
        "2.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "0.5 Üst",
        "0.5 Alt",
        "Tümü",
        "Tümü",
        "Tüm maçlar:",
        "Tamamlanmış maçlar:",
        "0.5 Üst",
        "0.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "2.5 Üst",
        "2.5 Alt",
        "2.5 Üst",
        "2.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "0.5 Üst",
        "0.5 Alt",
        "Kazanan tahminler yüklenirken bir hata oluştu"
      ]
    },
    {
      "file": "components\\language-provider.tsx",
      "strings": [
        " last 10 matches and H2H\",\n    btts: \"BTTS\",\n    nobtts: \"No BTTS\",\n    average: \"Average\",\n    bttsProbability: \"BTTS Probability\",\n    bothTeamsScoring: \"Both teams are scoring\",\n    atLeastOneTeamNotScoring: \"At least one team is not scoring\",\n    home: \"Home\",\n    away: \"Away\",\n    noData: \"No data\",\n    league: \"League\",\n    favorite: \"Favorite\",\n    recommendedBet: \"Recommended Bet\",\n    over35: \"Over 3.5\",\n    under35: \"Under 3.5\",\n    over45: \"4.5 Üst\",\n    bttsAnalysis: \"BTTS Analysis\",\n    sonMacYok: \"No last matches\",\n    sonMaclarHata: \"Error loading last matches.\",\n    kullaniciProfili: \"User Profile\",\n    geri: \"Back\",\n    populer: \"Popular\",\n    favoriler: \"Favorites\",\n    tumu: \"Tümü\",\n    ligler: \"Leagues\",\n    takimAra: \"Search Team\",\n    ligVeyaTakimAra: \"Search league or team...\",\n    form: \"Form\",\n    sonuclar: \"Results\",\n    galibiyet: \"Win\",\n    beraberlik: \"Draw\",\n    maglubiyet: \"Loss\",\n    atilan: \"Scored\",\n    yenilen: \"Conceded\",\n    ekstraIstatistikler: \"Extra Stats\",\n    golYememe: \"Clean Sheets\",\n    golAtamama: \"Failed to Score\",\n    yorumlar: \"Comments\",\n    macIstatistikleriBulunamadi: \"No match statistics found.\",\n    macSayilariHata: \"Error updating match counts:\",\n    tamamlananMaclarHata: \"Error loading completed matches.\",\n    yaklasanMacBulunamadi: \"No upcoming match found.\",\n    apiHatasi: \"API Error.\",\n    yaklasanMaclarHata: \"Error loading upcoming matches.\",\n    cacheHatasi: \"Cache error.\",\n    yenilendi: \"Refreshed.\",\n    alternatifBahisler: \"Alternative Bets\",\n    marketOnerileri: \"Market Suggestions\",\n    enIyiBahisler: \"Best Bets\",\n    trendBahisciOnerileri: \"Trend Betting Tips\",\n    son10veH2H: \"Son 10 maç ve H2H analizine göre\",\n    yeterliVeriYok: \"Bahis için yeterli veri yok.\",\n    dahaFazlaMac: \"Daha fazla maç verisi gerekiyor.\",\n    enAz1Gol: \"En az 1 gol\",\n    enAz2Gol: \"En az 2 gol\",\n    ucVeDahaFazlaGol: \"3 veya daha fazla gol\",\n    dortVeDahaFazlaGol: \"4 veya daha fazla gol\",\n    besVeDahaFazlaGol: \"5 veya daha fazla gol\",\n    takimlarSon10veH2H: \"Takımların son 10 maçı ve H2H analizine göre\",\n    kgVar: \"KG Var\",\n    kgYok: \"KG Yok\",\n    ortalama: \"Ortalama\",\n    kgOlasiligi: \"KG Olasılığı\",\n    ikiTakimGolAtıyor: \"İki takım da gol atıyor\",\n    enAzBirTakimAtamiyor: \"En az bir takım gol atamıyor\",\n    evSahibi: \"Ev Sahibi\",\n    deplasman: \"Deplasman\",\n    veriYok: \"Veri yok\",\n    lig: \"Lig\",\n    favori: \"Favori\",\n    onerilenBahis: \"Önerilen Bahis\",\n    ucBuçukUst: \"3.5 Üst\",\n    ucBuçukAlt: \"3.5 Alt\",\n    dortBuçukUst: \"4.5 Üst\",\n    kgAnalizi: \"KG Analizi\",\n    noStatsFound: \"No statistics data found for this match.\",\n    statsLoadError: \"Error loading statistics data.\",\n    loadingStats: \"Loading statistics...\",\n    statistics: \"Statistics\",\n    noH2HData: \"No H2H data found.\",\n    h2hLoadError: \"Error loading H2H data.\",\n    loadingH2H: \"Loading H2H data...\",\n    goalAnalysis: \"Goal Analysis\",\n    totalMatches: \"Total Matches\",\n    recentMatches: \"Recent Matches\",\n    teamNotFoundInStandings: \"team not found in standings\",\n    bothTeamsNotFound: \"Both teams not found in standings\",\n    standingsDataNotFound: \"Standings data not found\",\n    standingsLoadError: \"Error loading standings data\",\n    loadingStandingsData: \"Loading standings...\",\n    teamsStandingsNotFound: \"Teams standings data not found\",\n    fullTable: \"Full Table\",\n    team: \"Team\",\n    position: \"Position\",\n    matchesPlayedShort: \"M/W/D/L\",\n    goalDifference: \"Goal Difference\",\n    teams: \"Teams\",\n    goalsFor: \"Goals For\",\n    goalsAgainst: \"Goals Against\",\n    points: \"Points\",\n    starPlayers: \"Star Players\",\n    noStarPlayersFound: \"No star players data found.\",\n    errorLoadingStarPlayers: \"Error loading star players data.\",\n    assists: \"Assists\",\n    turkish: \"Turkish\",\n    english: \"English\",\n    german: \"German\",\n    french: \"French\",\n    spanish: \"Spanish\",\n    \n    // User Profile\n    userProfile: \"User Profile\",\n    manageAccountSettings: \"Manage your account settings and favorite teams\",\n    profile: \"Profile\",\n    favorites: \"Favorites\",\n    settings: \"Settings\",\n    username: \"Username\",\n    enterUsername: \"Enter your username\",\n    email: \"Email\",\n    enterEmail: \"Enter your email\",\n    logout: \"Log Out\",\n    save: \"Save\",\n    saveSettings: \"Save Settings\",\n    settingsSaved: \"Settings saved successfully\",\n    notificationsDescription: \"Turn on to receive notifications for match events\",\n    darkModeDescription: \"Turn on to use the app in dark mode\",\n    searchTeam: \"Search for team\",\n    noResults: \"No results found\",\n    myFavoriteTeams: \"My Favorite Teams\",\n    noFavoriteTeamsYet: \"You haven",
        "den büyük transfer hamlesi!\",\n    transferNewsTitle2: \"Galatasaray derbide son dakika galibiyeti aldı\",\n    transferNewsTitle3: \"Beşiktaş",
        "dan Avrupa yolunda kritik galibiyet\",\n    transferNewsTitle5: \"Süper Lig",
        "den hakemler için yeni karar\",\n    transferNewsTitle9: \"Avrupa Ligleri",
        "i Temizle\",\n    finishedMatches: \"Tamamlanan Maçlar\",\n    today: \"Bugün\",\n    tomorrow: \"Yarın\",\n    thisWeek: \"Bu Hafta\",\n    yesterdayMatches: \"Dünün Maçları\",\n    todayMatches: \"Bugünün Maçları\",\n    noFinishedMatchesToday: \"Bugün tamamlanan maç yok\",\n    noFinishedMatchesYesterday: \"Dün tamamlanan maç yok\",\n    matchesWillAppear: \"Maçlar yakında burada görünecek.\",\n    loadingMatches: \"Maçlar yükleniyor...\",\n    matchesNotFinishedYet: \"Maçlar henüz tamamlanmadı.\",\n    noFinishedMatchToday: \"Bugün tamamlanan maç yok.\",\n    finishedMatchLoadError: \"Tamamlanan maçlar yüklenirken hata.\",\n    upcomingMatchNotFound: \"Yaklaşan maç bulunamadı.\",\n    apiError: \"API Hatası.\",\n    upcomingMatchLoadError: \"Yaklaşan maçlar yüklenirken hata.\",\n    cacheSuccess: \"IndexedDB",
        "lendi ({{count}} maç)\",\n    cacheError: \"Cache hatası.\",\n    refreshed: \"Yenilendi. \",\n    matchStatisticsNotFound: \"Maç istatistikleri bulunamadı.\",\n    alternativeBets: \"Alternatif Bahisler\",\n    marketSuggestions: \"Market Önerileri\",\n    bestBets: \"En İyi Bahisler\",\n    trendBettingTips: \"Trend Bahisçi Önerileri\",\n    risk: \"Risk\",\n    basedOnLast10MatchesAndH2H: \"Based on last 10 matches and H2H\",\n    notEnoughDataForBets: \"Not enough data for bets.\",\n    moreMatchesNeeded: \"More matches needed.\",\n    ",
        "mız doğru tahminler sağlamak için binlerce maçı analiz eder\",\n    realTime: \"Gerçek Zamanlı Analiz\",\n    algorithmWinning: \"Algoritma kazanma oranı: %78\",\n    scored: \"Atılan\",\n    conceded: \"Yenilen\",\n    yellow: \"Sarı\",\n    red: \"Kırmızı\",\n    loadingAnalysis: \"Analiz yükleniyor...\",\n    retryButton: \"Yeniden Dene\",\n    noAnalysisData: \"Analiz verisi bulunamadı.\",\n    lastFiveMatchAnalysis: \"Son 5 Maç Analizi\",\n    lastFiveMatchGoalsPerMatch: \"Gol Atma\",\n    lastFiveMatchConcededPerMatch: \"Gol Yeme\",\n    lastFiveMatchTotalGoals: \"Toplam Goller\",\n    specialStats: \"Özel İstatistikler\",\n    lastMatches: \"Son Maçlar\",\n    analysisComment: \"Analiz Yorumu\",\n    risingFormText: \"{{teamName}} son maçlarda yükselen bir form grafiği çiziyor. Maç başına {{avgScored}} gol ortalaması ile etkili bir hücum performansı gösteriyorlar.\",\n    decliningFormText: \"{{teamName}} son maçlarda düşüş eğiliminde. Maç başına {{avgConceded}} gol yiyorlar ve savunmada zorluk yaşıyorlar.\",\n    stableFormText: \"{{teamName}} son 5 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.\",\n    lastFiveCleanSheetsComment: \"Son 5 maçta {{count}} kez gol yemeden maçı tamamladılar.\",\n    lastFiveFailedToScoreComment: \"Son 5 maçta {{count}} kez gol atamadılar.\",\n\n    // Risk levels\n    low: \"Düşük\",\n    lowMedium: \"Düşük-Orta\",\n    medium: \"Orta\",\n    mediumHigh: \"Orta-Yüksek\",\n    high: \"Yüksek\",\n    veryHigh: \"Çok Yüksek\",\n    veryLow: \"Çok Düşük\",\n\n    // Additional translations\n    matchLabel: \"Maç\",\n    liveLeagues: \"Canlı Ligler\",\n    liveLeague: \"Canlı Lig\",\n    pointsDifference: \"Puan Farkı\",\n    pointsLabel: \"puan\",\n    matchesLabel: \"Maç\",\n    goalsForAgainstShort: \"A/Y\",\n\n    // UI Actions\n    add: \"Ekle\",\n    remove: \"Kaldır\",\n    addFavoriteLeague: \"Favori Lig Ekle\",\n    addToFavorites: \"Favorilere Ekle\",\n    removeFromFavorites: \"Favorilerden Kaldır\",\n\n    // League UI\n    noLeaguesInSelectedCountry: \"Seçilen ülkede lig bulunamadı\",\n    showAllCountries: \"Tüm Ülkeleri Göster\",\n    selected: \"Seçildi\",\n    \n    // Match Squad\n    loadingSquad: \"Kadro bilgisi yükleniyor...\",\n    matchSquad: \"Maç Kadrosu\",\n    startingLineup: \"İlk 11\",\n    substitutes: \"Yedekler\",\n    coach: \"Teknik Direktör\",\n    goalkeeper: \"Kaleci\",\n    defender: \"Defans\",\n    midfielder: \"Orta Saha\",\n    forward: \"Forvet\",\n    refresh: \"Yenile\",\n    \n    // Top Scorers\n    topScorers: \"Gol Krallığı\",\n    loadingTopScorers: \"Gol krallığı yükleniyor...\",\n    matchesShort: \"maç\",\n    \n    // Team Lineup\n    lineups: \"Kadrolar\",\n    loadingLineups: \"Kadrolar yükleniyor...\",\n    noLineupData: \"Kadro bilgisi bulunamadı.\",\n    unknown: \"Bilinmiyor\",\n    \n    // Live Matches\n    checkBackLater: \"Daha sonra tekrar kontrol edin.\",\n    predictionComingSoon: \"Tahmin özelliği yakında gelecek.\",\n    hide: \"Gizle\",\n    \n    // Comments\n    comments: \"Yorumlar\",\n    user: \"Kullanıcı\",\n    noCommentsYet: \"Henüz yorum yok\",\n    writeYourComment: \"Yorumunuzu yazın...\",\n    addComment: \"Yorum Yap\",\n\n    // Prediction Algorithm\n    doubleChanceX: \"Çifte Şans X\",\n    highDrawProbability: \"Beraberlik güçlü bir olasılık olarak görünüyor.\",\n  },\n}\n\ntype Language = \"en\" | \"tr\"\ntype TranslationKey = keyof typeof translations.en\n\ninterface LanguageContextType {\n  language: Language\n  setLanguage: (language: Language) => void\n  t: (key: TranslationKey, params?: Record<string, any>) => string\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined)\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\")\n\n  // Load language preference from localStorage on client side\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\"language\") as Language\n    if (savedLanguage && (savedLanguage === \"en\" || savedLanguage === \"tr\")) {\n      setLanguage(savedLanguage)\n    }\n  }, [])\n\n  // Save language preference to localStorage and sync with user settings\n  useEffect(() => {\n    localStorage.setItem(\"language\", language)\n    \n    // Dil değiştiğinde localStorage",
        "4.5 Üst",
        "Tümü",
        "Son 10 maç ve H2H analizine göre",
        "Bahis için yeterli veri yok.",
        "Daha fazla maç verisi gerekiyor.",
        "En az 1 gol",
        "En az 2 gol",
        "3 veya daha fazla gol",
        "4 veya daha fazla gol",
        "5 veya daha fazla gol",
        "Takımların son 10 maçı ve H2H analizine göre",
        "KG Olasılığı",
        "İki takım da gol atıyor",
        "En az bir takım gol atamıyor",
        "Veri yok",
        "Lig",
        "Önerilen Bahis",
        "3.5 Üst",
        "3.5 Alt",
        "4.5 Üst",
        "Canlı Maçlar",
        "İstatistikler",
        "Yaklaşan",
        "Canlı",
        "Canlı Maçlar",
        "Şu anda canlı maç yok",
        "Değişiklikler",
        "Canlı Yorum",
        "İlk Yarı",
        "İkinci Yarı",
        "Maç Sonu",
        "Penaltılar",
        "Canlı İzle",
        "Canlı Tahmin Yap",
        "Maç İstatistikleri",
        "Şutlar",
        "İsabetli Şutlar",
        "Sarı Kart",
        "Kırmızı Kart",
        "Faktörler",
        "Faktör verisi yok",
        "Maç İstatistikleri",
        "Maç Tahminleri",
        "Üst/Alt",
        "Maç Kazananı",
        "Olasılık",
        "Tahmin Yorumu",
        "Başarı Oranı",
        "Yapay Zeka ile",
        "Canlı Tahminleri Gör",
        "Canlı Analiz",
        "Başarılı Tahmin",
        "Mutlu Kullanıcı",
        "Karşılıklı",
        "Son 10 Maç",
        "Tahmin",
        "İstatistikler",
        "Karşılaştırma",
        "Son 10 Maç",
        "Maç Başına Goller",
        "Maç Başına Kartlar",
        "Tahmin Edilen Sonuçlar",
        "Yaklaşan Maçlar",
        "Takıma Göre Filtrele",
        "Lige Göre Filtrele",
        "Ülkeye Göre Filtrele",
        "Takım Ara",
        "Tüm Ligler",
        "Tüm Ülkeler",
        "Bugün",
        "Yarın",
        "Henüz favori lig yok",
        "Lig bulunamadı",
        "Ligleri favorilere eklemek için yıldız ikonuna tıklayın",
        "Arama kriterlerinizi değiştirmeyi deneyin",
        "Lig veya takım ara...",
        "Maçları Gör",
        "Tümü",
        "2.5 Üst",
        "2.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "0.5 Üst",
        "0.5 Alt",
        "Karşılıklı Gol: Var",
        "Karşılıklı Gol: Yok",
        "Tüm maçlar:",
        "Tamamlanmış maçlar:",
        "Kazanan tahminler yüklenirken bir hata oluştu",
        "Bugün için henüz kazanan tahmin yok",
        "Dün için kazanan tahmin yok",
        "Bu hafta için kazanan tahmin yok",
        "Fenerbahçe'den büyük transfer hamlesi!",
        "Galatasaray derbide son dakika galibiyeti aldı",
        "Beşiktaş'ın yıldızı 3 hafta sahalardan uzak kalacak",
        "Trabzonspor'dan Avrupa yolunda kritik galibiyet",
        "Süper Lig'de şampiyonluk yarışı kızışıyor",
        "Milli TakıM kadrosu açıklandı",
        "Yeni sezon fikstürü belli oldu",
        "TFF'den hakemler için yeni karar",
        "Avrupa Ligleri'nde haftanın maçları",
        "VAR sisteminde büyük değişiklik",
        "Yükleniyor...",
        "Veri yüklenirken hata oluştu",
        "Karanlık Mod",
        "Aydınlık Mod",
        "Dil",
        "Tarih",
        "Saat",
        "Galibiyet",
        "Beraberlik",
        "Mağlubiyet",
        "Evet",
        "Hayır",
        "Üst",
        "Alt",
        "Canlı Maç Takibi",
        "Canlı maçlar yükleniyor...",
        "Maç",
        "Şu anda canlı maç bulunamadı",
        "Seçilen ligde canlı maç bulunamadı",
        "Canlı maçlar yüklenirken bir hata oluştu",
        "Canlı İzle",
        "Canlı Tahmin Yap",
        "Puan Durumu Karşılaştırması",
        "Takım İstatistikleri",
        "Puan durumu bilgisi bulunamadı",
        "Puan durumu bilgisi alınırken bir hata oluştu",
        "sıra",
        "Tamamlandı",
        "Bu maç için istatistik verisi bulunamadı",
        "İstatistik verileri yüklenirken hata oluştu",
        "Bu maç için kadro verisi bulunamadı",
        "Maç tahmini son 10 maça dayanmaktadır",
        "Daha fazla maç verisi gerekli",
        "Olasılık",
        "Üst/Alt Marketleri",
        "Karşılıklı Gol",
        "En az 1 gol",
        "En az 2 gol",
        "3 veya daha fazla gol",
        "4 veya daha fazla gol",
        "5 veya daha fazla gol",
        "Son 10 maç ve H2H analizine dayalı",
        "* Tahminler son 10 maç ve H2H analizine dayanmaktadır",
        "Son 10 maç analizine göre, en az 1 gol olma olasılığı çok yüksek.",
        "Son 10 maç analizine göre, gol olmama olasılığı yüksek.",
        "İki takımın son 10 maç trendleri bu maçta en az 2 gol olacağını gösteriyor.",
        "İki takımın son 10 maç trendlerine göre bu maçta en fazla 1 gol olabilir.",
        "Maçta 3 veya daha fazla gol olma olasılığı çok yüksek. Son 10 maç ve H2H analizi bunu güçlü şekilde destekliyor.",
        "Maçta 3+ gol bekleniyor. Son 10 maç ve H2H analizinde yüksek gol trendi var.",
        "Maçta 0-2 gol arası bekleniyor. Son 10 maç ve H2H analizinde düşük gol trendi var.",
        "Son 10 maç verilerine göre yüksek skorlu bir maç olabilir.",
        "Son 10 maç verilerine göre, maçta en fazla 3 gol bekleniyor.",
        "Son 10 maç ve H2H analizine göre, bu çok gollü bir maç olabilir.",
        "İki takım da gol atma eğiliminde, son 10 maç verisine göre KG Var bekleniyor.",
        "Son 10 maç verisine göre, en az bir takımın gol atamama olasılığı yüksek.",
        "Düşük skorlu ve KG Yok olan bir maç bekleniyor.",
        "{{teamName}} son maçlarda yükselen bir trend içinde.",
        "{{teamName}} düşüş trendinde, maç başına ortalama {{avgConceded}} gol yiyor.",
        "{{teamName}} istikrarlı bir performans sergiliyor: {{wins}}G, {{draws}}B, {{losses}}L.",
        "Son 10 maçta {{count}} kez gol yemedi.",
        "Son 10 maçta {{count}} kez gol atamadı.",
        "Tüm Ligler Görüntüleniyor",
        "Ligler yükleniyor...",
        "Tüm ligler ve ülkeler",
        "Lig Önizleme",
        "Lig Seçin",
        "Sıra",
        "Galibiyet",
        "Beraberlik",
        "Mağlubiyet",
        "Atılan Gol",
        "Değişiklikleri Uygula",
        "Ayarları Kaydet",
        "Maç sayıları güncellenirken hata oluştu:",
        "İlk Yarı",
        "İkinci Yarı",
        "Devre Arası",
        "Maç Sonu",
        "Penaltılar",
        "Canlı",
        "Veri yüklenirken hata oluştu",
        "Canlı maç verisi çekilirken hata oluştu",
        "Puan durumu yüklenirken bir hata oluştu",
        "Takım form verileri yüklenirken bir hata oluştu",
        "Takım form verileri güncellenirken bir hata oluştu",
        "Kadro verisi yüklenirken bir hata oluştu",
        "Yıldız oyuncular yüklenirken bir hata oluştu",
        "Kazanan tahminler yüklenirken bir hata oluştu",
        "Veri bulunamadı",
        "Maç bulunamadı",
        "Bu maç için kadro verisi bulunamadı",
        "Puan durumu bilgisi bulunamadı",
        "Karşılıklı Maç Analizi",
        "Takım Analizi",
        "Maç Analizi",
        "Takıma Göre Filtrele",
        "Lige Göre Filtrele",
        "Ülkeye Göre Filtrele",
        "Puan Durumu Karşılaştırması",
        "Puan durumu bilgisi bulunamadı",
        "Sıra Farkı",
        "Puan Farkı",
        "Maç Tahmini",
        "Canlı Tahmin",
        "Gol olma olasılığı",
        "Gol olmama olasılığı",
        "Karşılıklı gol olma olasılığı",
        "En az bir takımın gol atamama olasılığı",
        "2+ gol olma olasılığı",
        "3+ gol olma olasılığı",
        "Son 10 maç verilerine göre tahmin",
        "H2H sonuçlarına göre tahmin",
        "Yeterli veri olmadığından tahmin oluşturulamadı",
        "0.5 Üst",
        "0.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "2.5 Üst",
        "2.5 Alt",
        "Karşılıklı Gol: Var",
        "Karşılıklı Gol: Yok",
        "Canlı maçlar yükleniyor...",
        "Puan durumu yükleniyor...",
        "Tahminler yükleniyor...",
        "Bugün",
        "Yarın",
        "Tüm Maçlar",
        "Tamamlanmış Maçlar",
        "Bugün için henüz kazanan tahmin yok",
        "Dün için kazanan tahmin yok",
        "Bu hafta için kazanan tahmin yok",
        "Canlı İzle",
        "Tahmin Yap",
        "Canlı Tahmin Yap",
        "İlk Yarı",
        "Devre Arası",
        "İkinci Yarı",
        "Maç Sonu",
        "Penaltılar",
        "Canlı",
        "Maç istatistikleri bulunamadı",
        "Analiz Et",
        "Tahmin Et",
        "Daha Fazla Maç Yükle",
        "Tamamlanan Maçlar",
        "Bugün",
        "Yarın",
        "Bu Hafta",
        "Dünün Maçları",
        "Bugünün Maçları",
        "Bugün tamamlanan maç yok",
        "Dün tamamlanan maç yok",
        "Maçlar yakında burada görünecek.",
        "Maçlar yükleniyor...",
        "Maçlar henüz tamamlanmadı.",
        "Bugün tamamlanan maç yok.",
        "Tamamlanan maçlar yüklenirken hata.",
        "Yaklaşan maç bulunamadı.",
        "API Hatası.",
        "Yaklaşan maçlar yüklenirken hata.",
        "IndexedDB'ye cache'lendi ({{count}} maç)",
        "Cache hatası.",
        "Maç istatistikleri bulunamadı.",
        "Market Önerileri",
        "En İyi Bahisler",
        "Trend Bahisçi Önerileri",
        "Lig",
        "Önerilen Bahis",
        "4.5 Üst",
        "Tümü",
        "Son 10 maç ve H2H analizine göre",
        "Bahis için yeterli veri yok.",
        "Daha fazla maç verisi gerekiyor.",
        "En az 1 gol",
        "En az 2 gol",
        "3 veya daha fazla gol",
        "4 veya daha fazla gol",
        "5 veya daha fazla gol",
        "Takımların son 10 maçı ve H2H analizine göre",
        "KG Olasılığı",
        "İki takım da gol atıyor",
        "En az bir takım gol atamıyor",
        "Veri yok",
        "Lig",
        "Önerilen Bahis",
        "3.5 Üst",
        "3.5 Alt",
        "4.5 Üst",
        "Bu maç için istatistik verisi bulunamadı.",
        "İstatistik verisi yüklenirken bir hata oluştu.",
        "İstatistikler yükleniyor...",
        "İstatistikler",
        "H2H verisi bulunamadı.",
        "H2H verisi yüklenirken bir hata oluştu.",
        "H2H verisi yükleniyor...",
        "Toplam Maç",
        "Son Maçlar",
        "takımı puan durumunda bulunamadı",
        "Her iki takım da puan durumunda bulunamadı",
        "Puan durumu bilgisi bulunamadı",
        "Puan durumu yüklenirken bir hata oluştu",
        "Puan durumu yükleniyor...",
        "Takımların puan durumu bilgisi bulunamadı",
        "Takım",
        "Sıra",
        "Takımlar",
        "Atılan",
        "Yıldız Oyuncular",
        "Yıldız oyuncu verisi bulunamadı.",
        "Yıldız oyuncular yüklenirken bir hata oluştu.",
        "Türkçe",
        "İngilizce",
        "Fransızca",
        "İspanyolca",
        "Kullanıcı Profili",
        "Hesap ayarlarınızı ve favori takımlarınızı yönetin",
        "Kullanıcı Adı",
        "Kullanıcı adınızı girin",
        "Çıkış Yap",
        "Ayarları Kaydet",
        "Ayarlar başarıyla kaydedildi",
        "Maç olayları için bildirim almak istiyorsanız açın",
        "Uygulamayı karanlık modda kullanmak için açın",
        "Takım ara",
        "Sonuç bulunamadı",
        "Favori Takımlarım",
        "Henüz favori takım eklemediniz. Yukarıdan takım arayarak favorilerinize ekleyebilirsiniz.",
        "Takım zaten favorilerde",
        "{{teamName}} zaten favori takımlarınızda bulunuyor.",
        "Takım eklendi",
        "{{teamName}} favori takımlarınıza eklendi.",
        "Takım kaldırıldı",
        "Takım favori listesinden kaldırıldı.",
        "Bildirimler açıldı",
        "Artık maç olayları için bildirim alacaksınız.",
        "Bildirim almak için tarayıcı izinlerini kontrol edin.",
        "Tercih ettiğiniz dili seçin",
        "canlı maçları görüntüleniyor",
        "Favori ligler yüklenirken hata oluştu:",
        "%100 Geri Ödeme",
        "Tahmin Geçmişi",
        "İsabet",
        "Maçları görüntülemek için bir lig seçin",
        "Yukarıdaki lig kartlarına tıklayarak canlı maçları görüntüleyebilirsiniz",
        "lig",
        "sonuç bulundu",
        "için",
        "için sonuç bulunamadı",
        "Ülke Seç",
        "Ligler yükleniyor...",
        "Özel Tahminler",
        "VIP Analiz",
        "Tüm Ligleri Göster",
        "lig daha",
        "Yapay zeka destekli futbol analizi ve tahminleri",
        "Derin Öğrenme AI",
        "AI'mız doğru tahminler sağlamak için binlerce maçı analiz eder",
        "Gerçek Zamanlı Analiz",
        "Algoritma kazanma oranı: %78",
        "Atılan",
        "Sarı",
        "Kırmızı",
        "Analiz yükleniyor...",
        "Analiz verisi bulunamadı.",
        "Son 5 Maç Analizi",
        "Özel İstatistikler",
        "Son Maçlar",
        "Analiz Yorumu",
        "{{teamName}} son maçlarda yükselen bir form grafiği çiziyor. Maç başına {{avgScored}} gol ortalaması ile etkili bir hücum performansı gösteriyorlar.",
        "{{teamName}} son maçlarda düşüş eğiliminde. Maç başına {{avgConceded}} gol yiyorlar ve savunmada zorluk yaşıyorlar.",
        "{{teamName}} son 5 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.",
        "Son 5 maçta {{count}} kez gol yemeden maçı tamamladılar.",
        "Son 5 maçta {{count}} kez gol atamadılar.",
        "Düşük",
        "Düşük-Orta",
        "Orta-Yüksek",
        "Yüksek",
        "Çok Yüksek",
        "Çok Düşük",
        "Maç",
        "Canlı Ligler",
        "Canlı Lig",
        "Puan Farkı",
        "Maç",
        "Kaldır",
        "Favori Lig Ekle",
        "Favorilerden Kaldır",
        "Seçilen ülkede lig bulunamadı",
        "Tüm Ülkeleri Göster",
        "Seçildi",
        "Kadro bilgisi yükleniyor...",
        "Maç Kadrosu",
        "İlk 11",
        "Teknik Direktör",
        "Gol Krallığı",
        "Gol krallığı yükleniyor...",
        "maç",
        "Kadrolar yükleniyor...",
        "Kadro bilgisi bulunamadı.",
        "Daha sonra tekrar kontrol edin.",
        "Tahmin özelliği yakında gelecek.",
        "Kullanıcı",
        "Henüz yorum yok",
        "Yorumunuzu yazın...",
        "Çifte Şans X",
        "Beraberlik güçlü bir olasılık olarak görünüyor.",
        "en",
        "en",
        "en"
      ]
    },
    {
      "file": "components\\language-switcher.tsx",
      "strings": [
        "en",
        "en"
      ]
    },
    {
      "file": "components\\last-ten-match-analysis.tsx",
      "strings": [
        "galibiyet",
        "beraberlik"
      ]
    },
    {
      "file": "components\\leagues-section.tsx",
      "strings": [
        "Bugün",
        "Yarın",
        "Maç detayları yüklenirken hata:",
        "onMatchSelect callback tanımlı değil!",
        "Lig veya takım ara...",
        "Henüz favori lig yok",
        "Lig bulunamadı",
        "Ligleri favorilere eklemek için yıldız ikonuna tıklayın",
        "Arama kriterlerinizi değiştirmeyi deneyin"
      ]
    },
    {
      "file": "components\\live-match-tracker.tsx",
      "strings": [
        "`}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0\">\n              {match.team_home_badge ? (\n                <img\n                  src={match.team_home_badge || \"/placeholder.svg\"}\n                  alt={match.match_hometeam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {match.match_hometeam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n            <span className=\"text-sm font-medium text-white truncate\">{match.match_hometeam_name}</span>\n          </div>\n\n          <div className=\"flex items-center justify-center mx-2\">\n            <div className=\"px-2 py-1 bg-slate-700/50 rounded-md\">\n              <span className=\"text-lg font-bold text-white\">{homeScore}</span>\n              <span className=\"text-xs mx-1 text-slate-400\">-</span>\n              <span className=\"text-lg font-bold text-white\">{awayScore}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 flex-1 justify-end min-w-0\">\n            <span className=\"text-sm font-medium text-white truncate text-right\">{match.match_awayteam_name}</span>\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0\">\n              {match.team_away_badge ? (\n                <img\n                  src={match.team_away_badge || \"/placeholder.svg\"}\n                  alt={match.match_awayteam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {match.match_awayteam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {match.match_stadium && (\n          <div className=\"mt-2 flex items-center justify-center text-xs text-slate-400\">\n            <MapPin className=\"w-3 h-3 mr-1\" />\n            <span className=\"truncate\">{match.match_stadium}</span>\n          </div>\n        )}\n\n        <div className=\"mt-3 flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"w-full text-xs bg-red-900/30 border-red-700/30 text-red-400 hover:bg-red-800/50\"\n            onClick={e => {\n              e.stopPropagation();\n              onDetailsClick(match);\n            }}\n          >\n            <span className=\"w-2 h-2 rounded-full bg-red-500 mr-2 animate-pulse\"></span>\n            {t(",
        ")}</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Takımı puan durumu listesinde bulmak için yardımcı fonksiyon\nconst findTeamInStandings = async (standings: any[], teamId: string, teamName: string) => {\n  // Önce ID ile eşleşme ara\n  let teamStanding = standings.find((item: any) => {\n    return item.team_id === teamId || \n           item.team_id === parseInt(teamId) || \n           item.team_id === teamId.toString();\n  });\n  \n  // ID ile bulunamadıysa, takım adı ile ara (tam veya kısmi eşleşme)\n  if (!teamStanding) {\n    // Takım adını küçük harfe çevir ve normalize et\n    const normalizedTeamName = teamName.toLowerCase().trim();\n    \n    teamStanding = standings.find((item: any) => {\n      // Takım adı tam eşleşme\n      if (item.team_name && item.team_name.toLowerCase().trim() === normalizedTeamName) {\n        return true;\n      }\n      \n      // Kısmi eşleşme (takım adı diğerini içeriyor mu?)\n      if (item.team_name && \n          (item.team_name.toLowerCase().includes(normalizedTeamName) || \n           normalizedTeamName.includes(item.team_name.toLowerCase()))) {\n        return true;\n      }\n      \n      return false;\n    });\n  }\n  \n  if (teamStanding) {\n    return {\n      position: parseInt(teamStanding.overall_league_position) || 0,\n      points: parseInt(teamStanding.overall_league_PTS) || 0,\n      played: parseInt(teamStanding.overall_league_payed) || 0,\n      won: parseInt(teamStanding.overall_league_W) || 0,\n      drawn: parseInt(teamStanding.overall_league_D) || 0,\n      lost: parseInt(teamStanding.overall_league_L) || 0,\n      goalsFor: parseInt(teamStanding.overall_league_GF) || 0,\n      goalsAgainst: parseInt(teamStanding.overall_league_GA) || 0\n    };\n  }\n  \n  return null;\n};\n\n// API",
        "den takımın lig bilgilerini çek\n    if (!leagueId) {\n      // Takımın lig bilgisi yoksa, varsayılan bir lig ID",
        "si varsayılan olarak\n    }\n    \n    // Ligin puan durumunu çek\n    const standings = await getStandings(leagueId);\n    \n    if (!Array.isArray(standings) || standings.length === 0) {\n      // Alternatif ligler denenebilir\n      const alternativeLeagueIds = [\"148\", \"152\", \"302\", \"175\", \"207\"];\n      \n      // Eğer verilen lig ID",
        "li alternatif lig için hata:`, e);\n          }\n        }\n      }\n      \n      return {\n        position: 0,\n        points: 0,\n        played: 0,\n        won: 0,\n        drawn: 0,\n        lost: 0,\n        goalsFor: 0,\n        goalsAgainst: 0\n      };\n    }\n    \n    // Takımı puan durumu listesinde ara\n    return await findTeamInStandings(standings, teamId, teamName);\n  } catch (error) {\n    console.error(`Error fetching team standings for ${teamName}:`, error);\n    // Hata durumunda boş değerler döndür\n    return {\n      position: 0,\n      points: 0,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0\n    };\n  }\n};\n\nconst StandingsComparison = ({\n  homeTeamId,\n  awayTeamId,\n  homeTeam,\n  awayTeam,\n  leagueId,\n}: {\n  homeTeamId: string\n  awayTeamId: string\n  homeTeam: string\n  awayTeam: string\n  leagueId?: string\n}) => {\n  const { t } = useTranslation()\n  const [homeStanding, setHomeStanding] = useState<any>(null)\n  const [awayStanding, setAwayStanding] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchStandings = async () => {\n      try {\n        const [homeData, awayData] = await Promise.all([\n          getTeamStandings(homeTeamId, homeTeam, leagueId), \n          getTeamStandings(awayTeamId, awayTeam, leagueId)\n        ]);\n        \n        setHomeStanding(homeData)\n        setAwayStanding(awayData)\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error)\n        setError(\"Puan durumu bilgisi alınırken bir hata oluştu\");\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStandings()\n  }, [homeTeamId, awayTeamId, homeTeam, awayTeam, leagueId])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-green-500\" />\n      </div>\n    )\n  }\n  \n  if (error) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-red-400\">{error}</p>\n      </div>\n    )\n  }\n\n  if (!homeStanding || !awayStanding) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">Puan durumu bilgisi bulunamadı</p>\n      </div>\n    )\n  }\n\n  const positionDiff = homeStanding.position - awayStanding.position\n  const pointsDiff = homeStanding.points - awayStanding.points\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Position Comparison */}\n      <Card className=\"bg-slate-800/50 border-slate-700/50\">\n        <CardContent className=\"p-3\">\n          <div className=\"grid grid-cols-3 gap-2 text-center\">\n            <div>\n              <div className=\"text-xs text-slate-400 mb-1\">{homeTeam}</div>\n              <Badge\n                className={`text-xs ${homeStanding.position <= awayStanding.position ? \"bg-green-600\" : \"bg-red-600\"}`}\n              >\n                {homeStanding.position}. sıra\n              </Badge>\n            </div>\n            <div className=\"flex flex-col items-center justify-center\">\n              <div className=\"text-xs text-slate-400 mb-1\">Sıra Farkı</div>\n              <div className=\"text-xs text-slate-400\">{Math.abs(positionDiff)} sıra</div>\n            </div>\n            <div>\n              <div className=\"text-xs text-slate-400 mb-1\">{awayTeam}</div>\n              <Badge\n                className={`text-xs ${awayStanding.position <= homeStanding.position ? \"bg-green-600\" : \"bg-red-600\"}`}\n              >\n                {awayStanding.position}. sıra\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Points Comparison */}\n      <Card className=\"bg-slate-800/50 border-slate-700/50\">\n        <CardContent className=\"p-3\">\n          <div className=\"grid grid-cols-3 gap-2 text-center\">\n            <div>\n              <div className=\"text-lg font-bold text-green-400\">{homeStanding.points}</div>\n              <div className=\"text-xs text-slate-400\">{t(",
        ")}:</span>\n                  <span className=\"text-white\">\n                    {awayStanding.goalsFor}/{awayStanding.goalsAgainst}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n// Ülke tipi\ninterface Country {\n  country_id: string;\n  country_name: string;\n  country_logo?: string;\n}\n\n// Lig tipi\ninterface League {\n  league_id: string;\n  league_name: string;\n  league_logo?: string;\n  country_id: string;\n  country_name: string;\n  country_logo?: string; // country_logo ekledim\n  has_live_match?: boolean;\n}\n\n// CSS sınıfları\nconst styles = {\n  hideScrollbar: `\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  `,\n};\n\n// Favori ligler için local storage key\nconst FAVORITE_LEAGUES_KEY = \"favorite_leagues_v1\";\n\nexport function LiveMatchTracker({ initialMatchId }: { initialMatchId?: string }) {\n  const { t } = useTranslation()\n  const [matches, setMatches] = useState<Match[]>([])\n  const [filteredMatches, setFilteredMatches] = useState<Match[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null)\n  const [autoRefresh, setAutoRefresh] = useState(true)\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null)\n  const [activeTab, setActiveTab] = useState(\"detaylar\")\n  const [showPredictionModal, setShowPredictionModal] = useState(false)\n  const [predictionMatch, setPredictionMatch] = useState<Match | null>(null)\n  const [showDetailsModal, setShowDetailsModal] = useState(false)\n  const [detailsMatch, setDetailsMatch] = useState<Match | null>(null)\n  const [detailsActiveTab, setDetailsActiveTab] = useState(\"detaylar\")\n  const [selectedLeague, setSelectedLeague] = useState<string | null>(null) // Başlangıçta hiçbir lig seçili değil\n  const [showLeaguesModal, setShowLeaguesModal] = useState(false)\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"all-countries\")\n  const [favoriteLeagues, setFavoriteLeagues] = useState<string[]>([])\n  const [activeCategory, setActiveCategory] = useState<",
        ")\n  const [showAllLeagues, setShowAllLeagues] = useState(false)\n  const [upcomingMatchesCount, setUpcomingMatchesCount] = useState(0)\n  const [showLeaguesList, setShowLeaguesList] = useState(true)\n  const [showLiveMatchView, setShowLiveMatchView] = useState(false)\n  const [selectedLeagueMatches, setSelectedLeagueMatches] = useState<Match[]>([])\n  const [selectedLeagueName, setSelectedLeagueName] = useState<string>(\"\")\n  const [allApiLeagues, setAllApiLeagues] = useState<any[]>([]) // Tüm API liglerini tutmak için state\n  const [loadingLeagues, setLoadingLeagues] = useState(false) // Ligler yüklenirken gösterilecek loading state\n  // 1. allMatches dizisini oluştur (canlı + yaklaşan maçlar)\n  const [allMatches, setAllMatches] = useState<Match[]>([]);\n  // Ligler modalı için gösterilecek lig sayısı state",
        "den tüm ligleri çek\n  const fetchAllLeagues = useCallback(async () => {\n    try {\n      setLoadingLeagues(true);\n      const allLeaguesData = await getAllLeagues();\n      if (Array.isArray(allLeaguesData)) {\n        setAllApiLeagues(allLeaguesData);\n      }\n    } catch (error) {\n      console.error(\"Error fetching all leagues:\", error);\n    } finally {\n      setLoadingLeagues(false);\n    }\n  }, []);\n  \n  // Component mount olduğunda tüm ligleri çek\n  useEffect(() => {\n    fetchAllLeagues();\n  }, [fetchAllLeagues]);\n  \n  // Canlı maç görüntüleme arayüzünü aç\n  const openLiveMatchView = (leagueId: string, leagueName: string) => {\n    setSelectedLeague(null); // Ana sayfada maçları gösterme\n    closeLeaguesModal();\n    showLeagueSelectedNotification(`${leagueName} ${t(",
        ")}`);\n    // Tüm maçlar içinden filtrele\n    const leagueMatches = allMatches.filter(match => match.league_id === leagueId);\n    setShowLiveMatchView(true);\n    setSelectedLeagueMatches(leagueMatches);\n    setSelectedLeagueName(leagueName);\n  };\n  \n  // Favori ligleri local storage",
        "Bilinmeyen Ülke",
        "den çekilen tüm ligleri ekle\n    allApiLeagues.forEach(league => {\n      if (!leagueMap.has(league.league_id)) {\n        leagueMap.set(league.league_id, {\n          league_id: league.league_id,\n          league_name: league.league_name,\n          league_logo: league.league_logo,\n          country_id: league.country_id,\n          country_name: league.country_name,\n          country_logo: league.country_logo,\n          has_live_match: false\n        });\n        \n        // Ülke bilgilerini de ekle\n        if (!countryMap.has(league.country_name)) {\n          countryMap.set(league.country_name, {\n            country_id: league.country_id,\n            country_name: league.country_name,\n            country_logo: league.country_logo\n          });\n        }\n      }\n    });\n    \n    return {\n      leagues: Array.from(leagueMap.values()),\n      countries: Array.from(countryMap.values()),\n      allLeagues: Array.from(allLeaguesSet)\n    };\n  }, [matches, allApiLeagues]);\n  \n  // Ligleri maç sayısına göre sırala\n  const sortedLeagues = useMemo(() => {\n    return leagues\n      .map(league => ({\n        ...league,\n        matchCount: matches.filter(match => match.league_id === league.league_id).length,\n        isFavorite: favoriteLeagues.includes(league.league_id)\n      }))\n      // Sadece maçı olan ligleri filtrele\n      .filter(league => league.matchCount > 0)\n      .sort((a, b) => {\n        // Önce canlı maçı olan ligler\n        if (a.has_live_match && !b.has_live_match) return -1;\n        if (!a.has_live_match && b.has_live_match) return 1;\n        // Sonra maç sayısına göre\n        return b.matchCount - a.matchCount;\n      });\n  }, [leagues, matches, favoriteLeagues]);\n  \n  // Tüm ligleri göster - API",
        "}</span>\n                        </div>\n                      ))}\n                      {matches.filter(m => m.league_id === league.league_id).length === 0 && (\n                        <span className=\"text-xs text-slate-500\">Bu ligde şu an maç yok</span>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Canlı Maçlar Kategorileri */}\n      <div className=\"flex border-b border-slate-700/50 mb-2\">\n        <button \n          className={`flex-1 py-2 text-xs font-medium ${activeCategory === ",
        ")} ({favoriteSortedLeagues.reduce((total: number, league) => total + league.matchCount, 0)})\n        </button>\n      </div>\n      \n      {/* Canlı Ligler Özeti */}\n      <div className=\"mt-2\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center\">\n            {activeCategory === ",
        " && sortedLeagues.length > 0 && (\n            <span className=\"text-xs text-slate-400\">\n              {sortedLeagues.length} lig gösteriliyor\n              {upcomingMatchesCount > 0 && ` • ${upcomingMatchesCount} maç yaklaşıyor`}\n            </span>\n          )}\n          {activeCategory === ",
        " && (\n            <span className=\"text-xs text-slate-400\">\n              {favoriteSortedLeagues.length > 0 \n                ? `${favoriteSortedLeagues.length} favori lig` \n                : \"Henüz favori liginiz yok\"}\n            </span>\n          )}\n        </div>\n        \n        {showLeaguesList && (\n          <div className=\"grid grid-cols-2 gap-2\">\n            {/* Ligler Listesi - İlk 5 lig */}\n            {(activeCategory === ",
        " ? sortedLeagues : favoriteSortedLeagues)\n              .slice(0, showAllLeagues ? undefined : 5)\n              .map(league => (\n              <Card \n                key={league.league_id}\n                className={`cursor-pointer ${\n                  selectedLeague === league.league_id \n                    ? \"bg-red-900/30 border-red-600\" \n                    : \"bg-slate-800/50 border-slate-700/50 hover:border-red-600\"\n                }`}\n                onClick={() => {\n                  // Lig kartına tıklandığında, openLiveMatchView fonksiyonunu çağır\n                  if (league.matchCount > 0) {\n                    openLiveMatchView(league.league_id, league.league_name);\n                  } else {\n                    handleLeagueSelect(league.league_id);\n                  }\n                }}\n              >\n                <CardContent className=\"p-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center w-full\">\n                      <div className=\"w-7 h-7 bg-slate-700 rounded-full flex items-center justify-center mr-1 relative flex-shrink-0\">\n                        {league.league_logo ? (\n                          <img \n                            src={league.league_logo} \n                            alt={league.league_name} \n                            className=\"w-5 h-5 object-contain\"\n                            loading=\"lazy\"\n                          />\n                        ) : (\n                          <Trophy className=\"w-3 h-3 text-red-400\" />\n                        )}\n                        {league.isFavorite && (\n                          <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-amber-500 rounded-full flex items-center justify-center\">\n                            <Heart className=\"w-2 h-2 text-white fill-white\" />\n                          </div>\n                        )}\n                        {league.matchCount > 0 && (\n                          <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-red-600 rounded-full flex items-center justify-center animate-pulse\">\n                            <div className=\"w-1 h-1 bg-red-400 rounded-full\"></div>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0 mr-1\">\n                        <div className=\"text-[11px] font-medium text-white truncate\">\n                          {league.league_name}\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-[9px] text-slate-400 truncate max-w-[60px]\">\n                            {league.country_name}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\" \n                            className=\"h-4 p-0 px-1 ml-1 text-[8px] text-amber-400 hover:text-amber-300\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleFavoriteLeague(league.league_id);\n                              const message = league.isFavorite\n                                ? `${league.league_name} favorilerden kaldırıldı`\n                                : `${league.league_name} favorilere eklendi`;\n                              showLeagueSelectedNotification(message);\n                            }}\n                          >\n                            {league.isFavorite ? (\n                              <>\n                                <Heart className=\"w-2 h-2 mr-0.5 fill-amber-400\" />\n                                {t(",
        ")}\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-red-600 text-white text-[9px] px-1 py-0 ml-auto flex-shrink-0\">\n                        {league.matchCount}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  {/* Maçları Gör butonu */}\n                  {league.matchCount > 0 && (\n                    <Button \n                      size=\"sm\"\n                      className=\"w-full mt-2 bg-green-500 hover:bg-green-600 text-white text-[10px] py-0 h-6\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        openLiveMatchView(league.league_id, league.league_name);\n                      }}\n                    >\n                      <Trophy className=\"w-2 h-2 mr-1\" />\n                      {t(",
        ")}\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n            \n            {/* Tüm Ligleri Göster Butonu */}\n            {activeCategory === ",
        " && favoriteSortedLeagues.length === 0 && (\n              <Card className=\"col-span-2 bg-slate-800/50 border-slate-700/50\">\n                <CardContent className=\"p-4 text-center\">\n                  <Star className=\"w-8 h-8 text-amber-500/50 mx-auto mb-2\" />\n                  <p className=\"text-sm text-slate-400 mb-2\">Henüz favori liginiz yok</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"bg-amber-900/30 border-amber-700/50 text-amber-400 hover:bg-amber-800/50\"\n                    onClick={() => setShowLeaguesModal(true)}\n                  >\n                    {t(",
        ")}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Platform Bilgilendirme Kartı */}\n      <Card className=\"relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950 border-none shadow-xl mb-4\">\n        <div className=\"absolute inset-0 bg-grid-white/[0.05] bg-[size:20px_20px]\"></div>\n        <div className=\"absolute top-0 right-0 w-40 h-40 bg-blue-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 left-0 w-40 h-40 bg-green-500/10 rounded-full blur-3xl\"></div>\n        \n        <CardContent className=\"p-4 relative z-10\">\n          <div className=\"flex flex-col\">\n            {/* Başlık ve Pro rozeti */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <div className=\"relative mr-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-green-500 rounded-xl flex items-center justify-center rotate-3 shadow-lg transform-gpu\">\n                    <Sparkles className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-amber-500 rounded-full flex items-center justify-center shadow-lg\">\n                    <Trophy className=\"w-3 h-3 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-extrabold text-base bg-clip-text text-transparent bg-gradient-to-r from-green-400 via-blue-400 to-indigo-400 tracking-tight\">\n                    DÜNYANIN EN GENİŞ LİG KAPSAMI\n                  </h3>\n                  <div className=\"flex items-center mt-1\">\n                    <span className=\"text-xs text-slate-400\">Powered by</span>\n                    <span className=\"ml-1 text-xs font-bold text-blue-400\">AI Tahmin Motoru</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex-shrink-0\">\n                <Badge className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white border-none px-2 py-1 shadow-lg\">\n                  PRO\n                </Badge>\n              </div>\n            </div>\n\n            {/* İstatistikler */}\n            <div className=\"grid grid-cols-2 gap-2 mb-3\">\n              <div className=\"bg-white/10 rounded-lg p-2 backdrop-blur-sm\">\n                <div className=\"text-2xl font-bold text-green-400\">950+</div>\n                <div className=\"text-xs text-slate-300\">{t(",
        ")}</div>\n              </div>\n              <div className=\"bg-white/10 rounded-lg p-2 backdrop-blur-sm\">\n                <div className=\"text-2xl font-bold text-amber-400\">1500+</div>\n                <div className=\"text-xs text-slate-300\">Günlük Tahmin</div>\n              </div>\n            </div>\n\n            {/* Dünyada ilk ve tek vurgusu */}\n            <div className=\"bg-gradient-to-r from-blue-900/50 to-indigo-900/50 rounded-lg p-3 backdrop-blur-sm mb-3 border-l-4 border-blue-500\">\n              <div className=\"text-center\">\n                <span className=\"text-xs text-slate-400 uppercase tracking-wider\">Dünyada</span>\n                <div className=\"text-base font-extrabold text-white my-1 tracking-tight\">İLK VE TEK</div>\n                <span className=\"text-xs text-slate-300\">gerçek zamanlı maç analiz platformu</span>\n              </div>\n            </div>\n\n            {/* Şeffaflık ve algoritma gücü mesajı */}\n            <div className=\"bg-white/5 rounded-lg p-2 backdrop-blur-sm mb-3 border border-blue-900/30\">\n              <div className=\"flex items-start\">\n                <div className=\"bg-green-500/20 p-1 rounded-md mr-2\">\n                  <Check className=\"w-3 h-3 text-green-400\" />\n                </div>\n                <p className=\"text-xs text-slate-300 leading-tight\">\n                  <span className=\"font-semibold text-blue-300\">Tamamen Şeffaf:</span> Tüm tahmin geçmişimiz açık ve denetlenebilir. Vaatler değil, <span className=\"underline decoration-green-400 decoration-dotted underline-offset-2\">kanıtlanmış sonuçlar!</span>\n                </p>\n              </div>\n            </div>\n\n            {/* SAHTE VERİ YOK, GERÇEK VERİ vurgusu */}\n            <div className=\"bg-gradient-to-r from-green-900/30 to-emerald-900/30 rounded-lg p-2 backdrop-blur-sm mb-3 border-2 border-green-600/40\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-green-500/30 p-1.5 rounded-full mr-2\">\n                    <AlertCircle className=\"w-3 h-3 text-green-400\" />\n                  </div>\n                  <div>\n                    <span className=\"text-xs font-bold uppercase text-green-400 tracking-wider\">SAHTE VERİ YOK</span>\n                    <span className=\"text-xs text-white mx-1\">|</span>\n                    <span className=\"text-xs font-bold uppercase text-green-400 tracking-wider\">SADECE GERÇEK VERİ</span>\n                  </div>\n                </div>\n                <div className=\"animate-pulse\">\n                  <Check className=\"w-4 h-4 text-green-400 fill-green-400/30\" />\n                </div>\n              </div>\n              <div className=\"mt-1.5 text-[10px] text-slate-300 leading-tight pl-7\">\n                <div className=\"flex items-center mb-1\">\n                  <div className=\"w-1 h-1 bg-green-500 rounded-full mr-1.5\"></div>\n                  <span>Geçmiş tüm tahminler <span className=\"font-semibold text-white\">kesintisiz</span> olarak görüntülenebilir</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-1 h-1 bg-green-500 rounded-full mr-1.5\"></div>\n                  <span>Kaybedilen tahminler dahil <span className=\"font-semibold text-white\">tüm sonuçlar açık</span> şekilde paylaşılır</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Kullanıcı deneyimi mesajı */}\n            <div className=\"bg-gradient-to-r from-amber-900/30 to-yellow-900/30 rounded-lg p-2 backdrop-blur-sm mb-3 border-2 border-amber-600/40\">\n              <div className=\"flex items-center justify-between mb-1.5\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-amber-500/30 p-1.5 rounded-full mr-2\">\n                    <Sparkles className=\"w-3 h-3 text-amber-400\" />\n                  </div>\n                  <span className=\"text-xs font-bold uppercase text-amber-400 tracking-wider\">ÖZEL GELİŞTİRİLEN ALGORİTMA</span>\n                </div>\n                <Badge className=\"bg-amber-600/50 text-white border-amber-500/30 px-1.5 py-0.5 text-[9px]\">\n                  <span className=\"font-mono\">5</span> YIL EĞİTİM\n                </Badge>\n              </div>\n              <div className=\"mt-1.5 text-[10px] text-slate-300 leading-tight pl-7\">\n                <div className=\"flex items-center mb-1\">\n                  <div className=\"w-1 h-1 bg-amber-500 rounded-full mr-1.5\"></div>\n                  <span>Hiçbir yerde bulunmayan <span className=\"font-semibold text-white\">özel yapay zeka teknolojisi</span> ile geliştirildi</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-1 h-1 bg-amber-500 rounded-full mr-1.5\"></div>\n                  <span>Tamamen özel geliştirilen algoritma <span className=\"font-semibold text-white\">8.7 milyon veri noktası</span> ile eğitildi</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Pro Avantajlar */}\n            <div className=\"bg-gradient-to-r from-indigo-900/40 to-purple-900/40 rounded-lg p-2 backdrop-blur-sm mb-3 border-r-4 border-purple-600\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-xs font-bold text-purple-300 mr-1\">PRO ÜYELİK AVANTAJLARI:</span>\n                  <span className=\"text-[10px] bg-purple-600/30 text-purple-300 px-1 py-0.5 rounded\">SINIRLI SÜRE</span>\n                </div>\n                <Heart className=\"w-3 h-3 text-red-400 fill-red-400 animate-pulse\" />\n              </div>\n              <div className=\"mt-1 grid grid-cols-3 gap-1\">\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">Özel Tahminler</span>\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">VIP Analiz</span>\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">{t(",
        ")}</span>\n              </div>\n            </div>\n\n            {/* Aksiyon butonları */}\n            <div className=\"flex items-center justify-between\">\n              <Button className=\"bg-gradient-to-r from-green-600 to-green-500 hover:from-green-500 hover:to-green-400 text-white border-none text-xs px-3 shadow-lg\">\n                <span className=\"w-1.5 h-1.5 rounded-full bg-white mr-1 animate-pulse\"></span>\n                {t(",
        ")}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {error ? (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700/50 text-red-400\">\n          <AlertCircle className=\"w-4 h-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      ) : (\n        <>\n          {/* showLiveMatchView aktifse maçları ana sayfada gösterme */}\n          {!showLiveMatchView && selectedLeague && filteredMatches.length === 0 ? (\n            <Card className=\"bg-slate-800 border-slate-700 border-red-700/50\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"flex items-center justify-center text-red-400\">\n                  <AlertCircle className=\"w-4 h-4 mr-2\" />\n                  <p className=\"text-sm\">\n                    {matches.length > 0 \n                      ? t(",
        ")}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : !showLiveMatchView && !selectedLeague ? (\n            // Hiçbir lig seçili değilse bilgilendirme mesajı göster\n            <Card className=\"bg-slate-800/50 border-slate-700/50\">\n              <CardContent className=\"p-4 text-center\">\n                <Trophy className=\"w-8 h-8 text-green-400/50 mx-auto mb-2\" />\n                <p className=\"text-sm text-slate-300 mb-2\">{t(",
        ")}\n                </p>\n              </CardContent>\n            </Card>\n          ) : !showLiveMatchView ? (\n            <div className=\"space-y-2\">\n              {filteredMatches.map(match => (\n                <div key={match.match_id} className=\"space-y-2\">\n                  <LiveMatchCard \n                    match={match} \n                    isSelected={selectedMatch?.match_id === match.match_id}\n                    onSelect={handleMatchSelect}\n                    setActiveTab={setActiveTab}\n                    activeTab={activeTab}\n                    onPredictionClick={handlePredictionClick}\n                    onDetailsClick={handleDetailsClick}\n                  />\n                </div>\n              ))}\n            </div>\n          ) : null}\n        </>\n      )}\n      \n      {/* Ligler Modal - Upcoming kısmındakine benzer şekilde düzenliyorum */}\n      {showLeaguesModal && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center\">\n                  <Trophy className=\"w-5 h-5 text-amber-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-sm font-bold text-white\">{t(",
        ")}\n                  </p>\n                </div>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"h-8 w-8 p-0 rounded-full hover:bg-slate-700/50\"\n                onClick={closeLeaguesModal}\n              >\n                <X className=\"w-5 h-5 text-slate-400\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Arama ve Filtreleme */}\n          <div className=\"bg-slate-800/70 p-3 border-b border-slate-700/50\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input \n                  placeholder={t(",
        ")}`}\n                </div>\n              )}\n            </div>\n            \n            {/* Ülke Seçimi - Yatay Kaydırılabilir Liste */}\n            <div className=\"mb-2\">\n              <div className=\"flex items-center mb-2\">\n                <Globe className=\"w-4 h-4 mr-1 text-blue-400\" />\n                <span className=\"text-xs font-medium text-blue-400\">{t(",
        ")}</span>\n              </div>\n              \n              <div className=\"flex overflow-x-auto pb-2 space-x-2 hide-scrollbar\">\n                {/* Tüm Ülkeler Seçeneği */}\n                <div \n                  className={`flex-shrink-0 cursor-pointer p-2 rounded-lg flex flex-col items-center justify-center ${selectedCountry === \"all-countries\" ? \"bg-blue-900/30 border-2 border-blue-600\" : \"bg-slate-800 border border-slate-700 hover:border-blue-600\"}`}\n                  onClick={() => setSelectedCountry(\"all-countries\")}\n                >\n                  <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center mb-1 relative\">\n                    <Globe className=\"w-5 h-5 text-blue-400\" />\n                    {selectedCountry === \"all-countries\" && (\n                      <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <Check className=\"w-3 h-3 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-white whitespace-nowrap\">{t(",
        ")}</span>\n                </div>\n                \n                {/* Ülkeler Listesi */}\n                {countries.map(country => (\n                  <div \n                    key={country.country_id}\n                    className={`flex-shrink-0 cursor-pointer p-2 rounded-lg flex flex-col items-center justify-center ${selectedCountry === country.country_id ? \"bg-blue-900/30 border-2 border-blue-600\" : \"bg-slate-800 border border-slate-700 hover:border-blue-600\"}`}\n                    onClick={() => setSelectedCountry(country.country_id)}\n                  >\n                    <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center mb-1 relative\">\n                      {country.country_logo ? (\n                        <img\n                          src={country.country_logo}\n                          alt={country.country_name}\n                          className=\"w-8 h-8 object-contain rounded-full\"\n                          loading=\"lazy\"\n                        />\n                      ) : (\n                        <span className=\"text-sm font-bold text-white\">{country.country_name.substring(0, 1)}</span>\n                      )}\n                      {selectedCountry === country.country_id && (\n                        <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center\">\n                          <Check className=\"w-3 h-3 text-white\" />\n                        </div>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-white whitespace-nowrap\">{country.country_name}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Ligler Listesi */}\n          <div \n            className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content\"\n            onScroll={handleLeaguesScroll}\n          >\n            {loadingLeagues ? (\n              <div className=\"flex flex-col items-center justify-center p-10\">\n                <Loader2 className=\"w-10 h-10 animate-spin text-amber-500 mb-4\" />\n                <p className=\"text-sm text-slate-300\">{t(",
        ")}</p>\n              </div>\n            ) : (\n              <div className=\"p-3 space-y-3\">\n                {/* Tüm Ligler Seçeneği */}\n                <Card \n                  className={`cursor-pointer ${selectedLeague === \"all-leagues\" ? \"bg-red-900/30 border-2 border-red-600\" : \"bg-slate-800 border border-slate-700 hover:border-red-600\"}`}\n                  onClick={() => {\n                    // Tüm liglere tıklandığında, tüm maçları göster\n                    handleLeagueSelect(\"all-leagues\");\n                    closeLeaguesModal();\n                  }}\n                >\n                  <CardContent className=\"p-3 flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-slate-700 rounded-full flex items-center justify-center mr-3 relative\">\n                        <Trophy className=\"w-6 h-6 text-red-400\" />\n                        {selectedLeague === \"all-leagues\" && (\n                          <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 rounded-full flex items-center justify-center\">\n                            <Check className=\"w-3 h-3 text-white\" />\n                          </div>\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"text-base font-medium text-white\">{t(",
        ")}\n                      </Button>\n                      <Badge className=\"bg-red-600 text-white\">\n                        {matches.length}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                {/* Ligler Listesi - Maç sayısına göre sıralanmış */}\n                {filteredLeagues.slice(0, showLeagueCount).map(league => {\n                  const leagueMatches = allMatches.filter(m => m.league_id === league.league_id);\n                  return (\n                    <Card \n                      key={league.league_id}\n                      className={`cursor-pointer ${selectedLeague === league.league_id ? \"bg-red-900/30 border-2 border-red-600\" : \"bg-slate-800 border border-slate-700 hover:border-red-600\"}`}\n                      onClick={() => handleLeagueSelect(league.league_id)}\n                    >\n                      <CardContent className=\"p-3 flex flex-col gap-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-slate-700 rounded-full flex items-center justify-center mr-3 relative\">\n                              {league.league_logo ? (\n                                <img \n                                  src={league.league_logo} \n                                  alt={league.league_name} \n                                  className=\"w-8 h-8 object-contain\"\n                                  loading=\"lazy\"\n                                />\n                              ) : (\n                                <Trophy className=\"w-6 h-6 text-red-400\" />\n                              )}\n                              {selectedLeague === league.league_id && (\n                                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 rounded-full flex items-center justify-center\">\n                                  <Check className=\"w-3 h-3 text-white\" />\n                                </div>\n                              )}\n                              {league.matchCount > 0 && (\n                                <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-red-600 rounded-full flex items-center justify-center animate-pulse\">\n                                  <div className=\"w-2 h-2 bg-red-400 rounded-full\"></div>\n                                </div>\n                              )}\n                            </div>\n                            <div>\n                              <h4 className=\"text-base font-medium text-white\">{league.league_name}</h4>\n                              <div className=\"flex items-center\">\n                                {league.country_logo && (\n                                  <img\n                                    src={league.country_logo}\n                                    alt={league.country_name}\n                                    className=\"w-3 h-3 mr-1 rounded-full\"\n                                  />\n                                )}\n                                <p className=\"text-xs text-slate-400\">{league.country_name}</p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className={`h-8 px-2 text-xs ${\n                                  league.isFavorite\n                                    ? \"bg-amber-900/30 border-amber-700/30 text-amber-400 hover:bg-amber-800/50\"\n                                    : \"bg-slate-700/30 border-slate-600/30 text-slate-400 hover:bg-slate-600/50\"\n                                }`}\n                                onClick={e => {\n                                  e.stopPropagation();\n                                  toggleFavoriteLeague(league.league_id);\n                                  // Favori ekleme/kaldırma bildirimi göster\n                                  const message = league.isFavorite \n                                    ? `${league.league_name} favorilerden kaldırıldı` \n                                    : `${league.league_name} favorilere eklendi`;\n                                  showLeagueSelectedNotification(message);\n                                }}\n                              >\n                                {league.isFavorite ? (\n                                  <>\n                                    <Heart className=\"w-3 h-3 mr-1 fill-amber-400\" />\n                                    {t(",
        ")}\n                              </Button>\n                            </div>\n                            {league.matchCount > 0 && (\n                              <Badge className=\"bg-red-600 text-white\">\n                                {league.matchCount}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        {/* Lig Maçları Önizleme - Sadece toplam maç sayısı baloncuğu */}\n                        <div className=\"flex gap-2 py-1\">\n                          <div className=\"px-4 py-2 rounded-full bg-gradient-to-r from-amber-400 to-orange-500 text-white font-bold text-sm shadow-md min-w-max\">\n                            {leagueMatches.length} {t(",
        ")}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {showLiveMatchView && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header - Daha kompakt tasarım */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-1\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"h-7 w-7 p-0 rounded-full hover:bg-slate-700/50\"\n                  onClick={() => setShowLiveMatchView(false)}\n                >\n                  <ChevronDown className=\"w-4 h-4 text-white transform rotate-90\" />\n                </Button>\n                <div className=\"w-6 h-6 bg-slate-700 rounded-full flex items-center justify-center relative\">\n                  <Trophy className=\"w-4 h-4 text-green-400\" />\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-600 rounded-full flex items-center justify-center\">\n                    <Check className=\"w-2 h-2 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-bold text-white\">{selectedLeagueName}</h3>\n                  <p className=\"text-[10px] text-slate-400\">\n                    {selectedLeagueMatches.length} {t(",
        ")}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Badge className=\"bg-green-600 text-white text-xs px-1 py-0\">Seçildi</Badge>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"h-7 w-7 p-0 rounded-full hover:bg-slate-700/50\"\n                  onClick={() => setShowLiveMatchView(false)}\n                >\n                  <X className=\"w-4 h-4 text-white\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Maçlar Listesi - Daha kompakt tasarım */}\n          <div className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content bg-slate-900/80 px-2 py-1\">\n            <div className=\"space-y-2\">\n              {selectedLeagueMatches.length > 0 ? (\n                selectedLeagueMatches.map(match => (\n                  <div\n                    key={match.match_id}\n                    className=\"bg-slate-800/90 border border-slate-700/70 rounded-lg overflow-hidden shadow-lg\"\n                  >\n                    <div className=\"p-2\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex-1\">\n                          <Badge variant=\"outline\" className=\"bg-green-900/20 border-green-700/30 text-green-400 text-[10px] px-1 py-0\">\n                            {selectedLeagueName}\n                          </Badge>\n                        </div>\n                        {match.match_live === \"1\" ? (\n                          <Badge className=\"bg-red-600 text-white text-[10px] px-1 py-0 animate-pulse\">{t(",
        ")}</Badge>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center justify-between my-1\">\n                        <div className=\"flex items-center space-x-2 flex-1\">\n                          <div className=\"w-8 h-8 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n                            {match.team_home_badge ? (\n                              <img\n                                src={match.team_home_badge || \"/placeholder.svg\"}\n                                alt={match.match_hometeam_name}\n                                className=\"object-cover w-full h-full\"\n                                loading=\"lazy\"\n                                onError={(e) => {\n                                  ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                                }}\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                                {match.match_hometeam_name.substring(0, 1)}\n                              </div>\n                            )}\n                          </div>\n                          <span className=\"text-xs font-medium text-white truncate\">{match.match_hometeam_name}</span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center mx-1\">\n                          <div className=\"flex items-center bg-slate-700/50 px-2 py-1 rounded-md\">\n                            <span className=\"text-sm font-bold text-white\">{match.match_hometeam_score || \"0\"}</span>\n                            <span className=\"text-[10px] mx-1 text-red-400 font-bold\">VS</span>\n                            <span className=\"text-sm font-bold text-white\">{match.match_awayteam_score || \"0\"}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-1 justify-end\">\n                          <span className=\"text-xs font-medium text-white truncate text-right\">{match.match_awayteam_name}</span>\n                          <div className=\"w-8 h-8 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n                            {match.team_away_badge ? (\n                              <img\n                                src={match.team_away_badge || \"/placeholder.svg\"}\n                                alt={match.match_awayteam_name}\n                                className=\"object-cover w-full h-full\"\n                                loading=\"lazy\"\n                                onError={(e) => {\n                                  ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                                }}\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                                {match.match_awayteam_name.substring(0, 1)}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {match.match_stadium && (\n                        <div className=\"flex items-center justify-center text-[10px] text-slate-400 mb-1\">\n                          <MapPin className=\"w-2 h-2 mr-1\" />\n                          <span className=\"truncate\">{match.match_stadium}</span>\n                        </div>\n                      )}\n\n                      {/* Kompakt butonlar */}\n                      <div className=\"grid grid-cols-2 gap-1 mt-1\">\n                        <Button \n                          className=\"bg-blue-600 hover:bg-blue-700 text-white text-[10px] py-1 h-7 rounded-md\"\n                          onClick={() => {\n                            setDetailsMatch(match);\n                            setDetailsActiveTab(",
        ");\n                            setShowDetailsModal(true);\n                          }}\n                        >\n                          Analiz Et\n                        </Button>\n                        <Button \n                          className=\"bg-green-600 hover:bg-green-700 text-white text-[10px] py-1 h-7 rounded-md\"\n                          onClick={() => {\n                            setPredictionMatch(match);\n                            setShowPredictionModal(true);\n                          }}\n                        >\n                          {t(",
        ")}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Maç Detayları Modal */}\n      {showDetailsModal && detailsMatch && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                className=\"h-8 w-8 p-0 rounded-full hover:bg-slate-700/50\"\n                onClick={closeDetailsModal}\n              >\n                <ChevronDown className=\"w-5 h-5 text-white transform rotate-90\" />\n              </Button>\n              <Badge className={`text-white text-xs px-3 py-1 ${detailsMatch.match_live === \"1\" ? \"bg-red-600\" : \"bg-slate-600\"}`}>\n                {detailsMatch.match_status === \"1H\" ? t(",
        "`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content p-3\">\n            <div className=\"bg-emerald-900/20 border border-emerald-700/50 rounded-lg\">\n              <UpcomingMatchPrediction \n                homeTeam={predictionMatch.match_hometeam_name}\n                awayTeam={predictionMatch.match_awayteam_name}\n                homeTeamId={predictionMatch.match_hometeam_id}\n                awayTeamId={predictionMatch.match_awayteam_id}\n              />\n            </div>\n          </div>\n          \n          {/* Alt bilgi çubuğu */}\n          <div className=\"bg-slate-800/70 border-t border-slate-700/50 p-2\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center\">\n                <Trophy className=\"w-4 h-4 text-amber-500 mr-1\" />\n                <span className=\"text-xs text-slate-300\">{predictionMatch.league_name}</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs bg-slate-700/50 border-slate-600/50\">\n                Canlı Tahmin\n              </Badge>\n            </div>\n          </div>\n            </div>\n      )}\n    </div>\n  )\n}\n\n// Lig seçildiğinde bildirim gösterme fonksiyonu\nconst showLeagueSelectedNotification = (leagueName: string) => {\n  // Bildirim gösterme işlemi\n  const notification = document.createElement(",
        ";\n  notification.innerHTML = `<div className=\"flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" className=\"w-4 h-4 mr-2\">\n      <polyline points=\"20 6 9 17 4 12\"></polyline>\n    </svg>\n    <span>${leagueName}</span>\n  </div>`;\n  \n  document.body.appendChild(notification);\n  \n  // 2 saniye sonra bildirimi kaldır\n  setTimeout(() => {\n    notification.style.opacity = ",
        "Puan durumu bilgisi alınırken bir hata oluştu",
        "Henüz favori liginiz yok",
        "tahmin",
        "tahmin",
        "tahmin",
        "tahmin",
        "İlk Yarı",
        "Devre Arası",
        "İkinci Yarı",
        "Maç Sonu",
        "Canlı"
      ]
    },
    {
      "file": "components\\live-matches.tsx",
      "strings": [
        "Canlı maçlar yüklenirken hata oluştu"
      ]
    },
    {
      "file": "components\\match-details.tsx",
      "strings": [
        "den takımın puan durumunu çek\nconst getTeamStandings = async (teamId: string, teamName: string, leagueId?: string) => {\n  try {\n    // Gerçek API",
        "si kullanıyoruz\n      leagueId = \"148\"; // Süper Lig ID",
        "API'den puan durumu verisi alınamadı veya boş dizi döndü"
      ]
    },
    {
      "file": "components\\match-squad.tsx",
      "strings": [
        "den kadro verilerini çek\n      const data = await getMatchLineups(matchId)\n\n      if (!data || !data.home || !data.away) {\n        setError(\"Bu maç için kadro verisi bulunamadı.\")\n        setLineupData(null)\n      } else {\n        setLineupData(data)\n      }\n    } catch (err) {\n      console.error(\"Kadro verisi çekilirken hata:\", err)\n      setError(\"Kadro verisi yüklenirken bir hata oluştu.\")\n      setLineupData(null)\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchLineups()\n\n    // Canlı maçlar için otomatik yenileme\n    let interval: NodeJS.Timeout | null = null\n\n    if (isLive) {\n      interval = setInterval(() => {\n        fetchLineups(false)\n      }, 60000) // Her 60 saniyede bir yenile\n    }\n\n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [matchId, isLive])\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-4\">\n        <Loader2 className=\"w-6 h-6 animate-spin text-primary mb-2\" />\n        <p className=\"text-xs text-slate-400\">{t(",
        ")}</p>\n      </div>\n    )\n  }\n\n  // Pozisyon kısaltmalarını tam isimlere dönüştür\n  const getPositionName = (pos: string): string => {\n    pos = pos.toUpperCase()\n    if (pos === \"G\" || pos === \"GK\") return t(",
        ")\n    return pos\n  }\n\n  // Oyuncuları pozisyonlarına göre grupla\n  const groupPlayersByPosition = (players: Player[]) => {\n    return players.reduce(\n      (acc, player) => {\n        const position = getPositionName(player.lineup_position)\n        if (!acc[position]) acc[position] = []\n        acc[position].push(player)\n        return acc\n      },\n      {} as Record<string, Player[]>,\n    )\n  }\n\n  const homeStartingByPosition = groupPlayersByPosition(lineupData.home.starting_lineups || [])\n  const awayStartingByPosition = groupPlayersByPosition(lineupData.away.starting_lineups || [])\n\n  return (\n    <Card className=\"w-full betting-card\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-xl font-bold\">{t(",
        "Bu maç için kadro verisi bulunamadı.",
        "Kadro verisi çekilirken hata:",
        "Kadro verisi yüklenirken bir hata oluştu."
      ]
    },
    {
      "file": "components\\match-standings.tsx",
      "strings": [
        "den puan durumunu çek\n        const standingsData = await getStandings(leagueId)\n        \n        if (Array.isArray(standingsData) && standingsData.length > 0) {\n          // API",
        "den veri gelmezse boş dizi kullan\n          setStandings([]);\n          setError(t(",
        "));\n        }\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error);\n        // Hata durumunda boş dizi kullan\n        setStandings([]);\n        setError(t("
      ]
    },
    {
      "file": "components\\match-statistics.tsx",
      "strings": [
        "den istatistikleri çek\n      const data = await getMatchStatistics(matchId)\n\n      if (!data || Object.keys(data).length === 0) {\n        setError(t(",
        "))\n      setStatistics(null)\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchStatistics()\n\n    // Canlı maçlar için otomatik yenileme\n    let interval: NodeJS.Timeout | null = null\n\n    if (isLive) {\n      interval = setInterval(() => {\n        fetchStatistics(false)\n      }, 30000) // Her 30 saniyede bir yenile\n    }\n\n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [matchId, isLive])\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-4\">\n        <Loader2 className=\"w-6 h-6 animate-spin text-primary mb-2\" />\n        <p className=\"text-xs text-slate-400\">{t(",
        ")}</p>\n      </div>\n    )\n  }\n\n  // İstatistikleri göster\n  return (\n    <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700 overflow-hidden relative\">\n      <div className=\"absolute inset-0 bg-[url("
      ]
    },
    {
      "file": "components\\upcoming-match-prediction.tsx",
      "strings": [
        ", awayLastMatches);\n        // Detayda olduğu gibi mapping ve analiz\n        // H2H KG VAR\n        let h2hBttsCount = 0\n        let h2hTotal = 0\n        if (h2hData && h2hData.firstTeam_VS_secondTeam && Array.isArray(h2hData.firstTeam_VS_secondTeam)) {\n          const h2hMatches = h2hData.firstTeam_VS_secondTeam.slice(0, 10)\n          h2hTotal = h2hMatches.length\n          h2hMatches.forEach((match: any) => {\n            const homeScore = Number(match.match_hometeam_score) || 0\n            const awayScore = Number(match.match_awayteam_score) || 0\n            if (homeScore > 0 && awayScore > 0) h2hBttsCount++\n          })\n        }\n        // Home KG VAR\n        let homeBttsCount = 0\n        let homeTotal = homeLastMatches.length\n        homeLastMatches.slice(0, 10).forEach((match: any) => {\n          const homeScore = Number(match.match_hometeam_score) || 0\n          const awayScore = Number(match.match_awayteam_score) || 0\n          if (homeScore > 0 && awayScore > 0) homeBttsCount++\n        })\n        // Away KG VAR\n        let awayBttsCount = 0\n        let awayTotal = awayLastMatches.length\n        awayLastMatches.slice(0, 10).forEach((match: any) => {\n          const homeScore = Number(match.match_hometeam_score) || 0\n          const awayScore = Number(match.match_awayteam_score) || 0\n          if (homeScore > 0 && awayScore > 0) awayBttsCount++\n        })\n        // Ortalama\n        const h2hPercent = h2hTotal ? Math.round((h2hBttsCount / h2hTotal) * 100) : 0\n        const homePercent = homeTotal ? Math.round((homeBttsCount / homeTotal) * 100) : 0\n        const awayPercent = awayTotal ? Math.round((awayBttsCount / awayTotal) * 100) : 0\n        const bttsAverage = Math.round((h2hPercent + homePercent + awayPercent) / 3)\n        setBttsStats({\n          h2h: { count: h2hBttsCount, total: h2hTotal, percent: h2hPercent },\n          home: { count: homeBttsCount, total: homeTotal, percent: homePercent },\n          away: { count: awayBttsCount, total: awayTotal, percent: awayPercent },\n          average: bttsAverage,\n        })\n        // Calculate prediction probabilities based on real data\n        const predictionData = calculatePredictions(h2hData, homeLastMatches, awayLastMatches, bttsAverage)\n        setPredictions(predictionData)\n        // Generate prediction comment\n        const comment = generatePredictionComment(predictionData, homeTeam, awayTeam, {\n          h2h: { count: h2hBttsCount, total: h2hTotal, percent: h2hPercent },\n          home: { count: homeBttsCount, total: homeTotal, percent: homePercent },\n          away: { count: awayBttsCount, total: awayTotal, percent: awayPercent },\n          average: bttsAverage,\n        }, recommendedMarket)\n        setPredictionComment(comment)\n      } catch (error) {\n        console.error(\"Error fetching prediction data:\", error)\n        // Use fallback predictions\n        const fallbackPredictions = generateFallbackPredictions()\n        setPredictions(fallbackPredictions)\n        setPredictionComment(generatePredictionComment(fallbackPredictions, homeTeam, awayTeam, bttsStats, recommendedMarket))\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchPredictionData()\n  }, [homeTeam, awayTeam, homeTeamId, awayTeamId])\n\n  const calculatePredictions = (h2hData: any, homeLastMatches: any[], awayLastMatches: any[], bttsAverage?: number) => {\n    // Initialize with base probabilities\n    let homeWinProb = 40 // Home advantage\n    let drawProb = 30\n    let awayWinProb = 30\n    let over0_5Prob = 90\n    let over1_5Prob = 70\n    let over2_5Prob = 50\n    let over3_5Prob = 30\n    let over4_5Prob = 15\n    let bttsProb = 55\n\n    // Son maç verileri analizi için değişkenler\n    const homeStats = {\n      wins: 0,\n      draws: 0,\n      losses: 0,\n      goalsScored: 0,\n      goalsConceded: 0,\n      cleanSheets: 0,\n      failedToScore: 0,\n      totalMatches: 0\n    };\n    \n    const awayStats = {\n      wins: 0,\n      draws: 0,\n      losses: 0,\n      goalsScored: 0,\n      goalsConceded: 0,\n      cleanSheets: 0,\n      failedToScore: 0,\n      totalMatches: 0\n    };\n    \n    // Son 10 maç verilerini analiz et\n    if (Array.isArray(homeLastMatches) && homeLastMatches.length > 0) {\n      homeLastMatches.forEach((match: any) => {\n        const isHome = match.match_hometeam_id === homeTeamId;\n        const homeScore = Number.parseInt(match.match_hometeam_score) || 0;\n        const awayScore = Number.parseInt(match.match_awayteam_score) || 0;\n        \n        if (isHome) {\n          homeStats.goalsScored += homeScore;\n          homeStats.goalsConceded += awayScore;\n          if (homeScore > awayScore) homeStats.wins++;\n          else if (homeScore === awayScore) homeStats.draws++;\n          else homeStats.losses++;\n        } else {\n          homeStats.goalsScored += awayScore;\n          homeStats.goalsConceded += homeScore;\n          if (awayScore > homeScore) homeStats.wins++;\n          else if (homeScore === awayScore) homeStats.draws++;\n          else homeStats.losses++;\n        }\n        \n        if ((isHome && awayScore === 0) || (!isHome && homeScore === 0)) homeStats.cleanSheets++;\n        if ((isHome && homeScore === 0) || (!isHome && awayScore === 0)) homeStats.failedToScore++;\n        \n        homeStats.totalMatches++;\n      });\n    }\n    \n    if (Array.isArray(awayLastMatches) && awayLastMatches.length > 0) {\n      awayLastMatches.forEach((match: any) => {\n        const isHome = match.match_hometeam_id === awayTeamId;\n        const homeScore = Number.parseInt(match.match_hometeam_score) || 0;\n        const awayScore = Number.parseInt(match.match_awayteam_score) || 0;\n        \n        if (isHome) {\n          awayStats.goalsScored += homeScore;\n          awayStats.goalsConceded += awayScore;\n          if (homeScore > awayScore) awayStats.wins++;\n          else if (homeScore === awayScore) awayStats.draws++;\n          else awayStats.losses++;\n        } else {\n          awayStats.goalsScored += awayScore;\n          awayStats.goalsConceded += homeScore;\n          if (awayScore > homeScore) awayStats.wins++;\n          else if (homeScore === awayScore) awayStats.draws++;\n          else awayStats.losses++;\n        }\n        \n        if ((isHome && awayScore === 0) || (!isHome && homeScore === 0)) awayStats.cleanSheets++;\n        if ((isHome && homeScore === 0) || (!isHome && awayScore === 0)) awayStats.failedToScore++;\n        \n        awayStats.totalMatches++;\n      });\n    }\n    \n    // Son 10 maç verileri temelinde olasılıkları hesapla\n    if (homeStats.totalMatches > 0 && awayStats.totalMatches > 0) {\n      // Ev sahibi kazanma olasılığı\n      const homeWinRate = homeStats.wins / homeStats.totalMatches;\n      const awayLossRate = awayStats.losses / awayStats.totalMatches;\n      const homeAdvantage = 0.1; // Ev sahibi avantajı\n      homeWinProb = Math.round(((homeWinRate + awayLossRate) / 2 + homeAdvantage) * 100);\n      \n      // Deplasman kazanma olasılığı\n      const awayWinRate = awayStats.wins / awayStats.totalMatches;\n      const homeLossRate = homeStats.losses / homeStats.totalMatches;\n      awayWinProb = Math.round(((awayWinRate + homeLossRate) / 2) * 100);\n      \n      // Beraberlik olasılığı\n      const homeDrawRate = homeStats.draws / homeStats.totalMatches;\n      const awayDrawRate = awayStats.draws / awayStats.totalMatches;\n      drawProb = Math.round(((homeDrawRate + awayDrawRate) / 2) * 100);\n      \n      // Toplam 100% olmasını sağla\n      const total = homeWinProb + drawProb + awayWinProb;\n      if (total !== 100) {\n        const factor = 100 / total;\n        homeWinProb = Math.round(homeWinProb * factor);\n        drawProb = Math.round(drawProb * factor);\n        awayWinProb = 100 - homeWinProb - drawProb;\n      }\n      \n      // Gol bazlı tahminler\n      const homeAvgScored = homeStats.goalsScored / homeStats.totalMatches;\n      const homeAvgConceded = homeStats.goalsConceded / homeStats.totalMatches;\n      const awayAvgScored = awayStats.goalsScored / awayStats.totalMatches;\n      const awayAvgConceded = awayStats.goalsConceded / awayStats.totalMatches;\n      \n      const expectedGoals = (homeAvgScored + awayAvgConceded + homeAvgConceded + awayAvgScored) / 3;\n      \n      // Ev sahibi ve deplasman ekibinin toplam gol ortalamaları\n      const homeGoalsTotal = homeAvgScored + homeAvgConceded;\n      const awayGoalsTotal = awayAvgScored + awayAvgConceded;\n      const combinedGoalsExpectation = (homeGoalsTotal + awayGoalsTotal) / 2;\n      \n      // Maçtaki toplam gol beklentisi\n      console.log(",
        ", combinedGoalsExpectation);\n      \n      // Over/Under olasılıkları - daha hassas hesaplama\n      over0_5Prob = Math.min(98, Math.round(90 + (expectedGoals - 2) * 5));\n      over1_5Prob = Math.min(95, Math.round(70 + (expectedGoals - 2) * 10));\n      over2_5Prob = Math.min(90, Math.round(50 + (expectedGoals - 2.5) * 15));\n      over3_5Prob = Math.min(80, Math.round(30 + (expectedGoals - 2.5) * 15));\n      over4_5Prob = Math.min(60, Math.round(15 + (expectedGoals - 2.5) * 10));\n      \n      // KG Var olasılığı\n      const homeScoringRate = 1 - (homeStats.failedToScore / homeStats.totalMatches);\n      const awayScoringRate = 1 - (awayStats.failedToScore / awayStats.totalMatches);\n      const homeCleanSheetRate = homeStats.cleanSheets / homeStats.totalMatches;\n      const awayCleanSheetRate = awayStats.cleanSheets / awayStats.totalMatches;\n      \n      bttsProb = Math.round(((homeScoringRate * awayScoringRate) + (1 - homeCleanSheetRate) * (1 - awayCleanSheetRate)) / 2 * 100);\n    }\n\n    // Process H2H data if available - H2H verisi varsa tahminleri güncelle\n    if (h2hData && h2hData.firstTeam_VS_secondTeam && Array.isArray(h2hData.firstTeam_VS_secondTeam)) {\n      const h2hMatches = h2hData.firstTeam_VS_secondTeam\n\n      if (h2hMatches.length > 0) {\n        let homeWins = 0\n        let draws = 0\n        let awayWins = 0\n        let totalGoals = 0\n        let bttsCount = 0\n        let over0_5Count = 0\n        let over1_5Count = 0\n        let over2_5Count = 0\n        let over3_5Count = 0\n        let over4_5Count = 0\n        let goalDistribution = new Array(10).fill(0); // 0-9 gol dağılımı\n\n        h2hMatches.forEach((match: any) => {\n          const homeScore = Number.parseInt(match.match_hometeam_score) || 0\n          const awayScore = Number.parseInt(match.match_awayteam_score) || 0\n          const totalMatchGoals = homeScore + awayScore\n\n          totalGoals += totalMatchGoals\n          \n          // Toplam gol dağılımını kaydet (0-9 gol)\n          if (totalMatchGoals < 10) {\n            goalDistribution[totalMatchGoals]++;\n          }\n\n          if (homeScore > 0 && awayScore > 0) {\n            bttsCount++\n          }\n          \n          if (totalMatchGoals > 0) over0_5Count++;\n          if (totalMatchGoals > 1) over1_5Count++;\n          if (totalMatchGoals > 2) over2_5Count++;\n          if (totalMatchGoals > 3) over3_5Count++;\n          if (totalMatchGoals > 4) over4_5Count++;\n\n          if (homeScore === awayScore) {\n            draws++\n          } else if (\n            (match.match_hometeam_id === homeTeamId && homeScore > awayScore) ||\n            (match.match_awayteam_id === homeTeamId && awayScore > homeScore)) {\n            homeWins++\n          } else {\n            awayWins++\n          }\n        })\n\n        const totalMatches = h2hMatches.length\n\n        if (totalMatches > 0) {\n          // Log H2H istatistikleri\n          console.log(",
        ", goalDistribution.map((count, goals) => `${goals} gol: ${count} maç`).join(",
        ", totalGoals / totalMatches);\n          \n          // H2H verisi ağırlığını yükselt - artık %50 ağırlıklı\n          const h2hWeight = 0.5;\n          const teamStatsWeight = 1 - h2hWeight;\n          \n          // H2H ve son 10 maç analizinin ağırlıklı ortalaması\n          const h2hHomeWinProb = Math.round((homeWins / totalMatches) * 100)\n          const h2hDrawProb = Math.round((draws / totalMatches) * 100)\n          const h2hAwayWinProb = Math.round((awayWins / totalMatches) * 100)\n          \n          homeWinProb = Math.round(homeWinProb * teamStatsWeight + h2hHomeWinProb * h2hWeight)\n          drawProb = Math.round(drawProb * teamStatsWeight + h2hDrawProb * h2hWeight)\n          awayWinProb = Math.round(awayWinProb * teamStatsWeight + h2hAwayWinProb * h2hWeight)\n\n          // Ensure probabilities sum to 100%\n          const total = homeWinProb + drawProb + awayWinProb\n          if (total !== 100) {\n            const factor = 100 / total\n            homeWinProb = Math.round(homeWinProb * factor)\n            drawProb = Math.round(drawProb * factor)\n            awayWinProb = 100 - homeWinProb - drawProb\n          }\n\n          // H2H based over/under probabilities\n          const h2hOver0_5Prob = Math.round((over0_5Count / totalMatches) * 100)\n          const h2hOver1_5Prob = Math.round((over1_5Count / totalMatches) * 100)\n          const h2hOver2_5Prob = Math.round((over2_5Count / totalMatches) * 100)\n          const h2hOver3_5Prob = Math.round((over3_5Count / totalMatches) * 100)\n          const h2hOver4_5Prob = Math.round((over4_5Count / totalMatches) * 100)\n          \n          // H2H verilerinin ağırlığını artır\n          over0_5Prob = Math.round(over0_5Prob * teamStatsWeight + h2hOver0_5Prob * h2hWeight)\n          over1_5Prob = Math.round(over1_5Prob * teamStatsWeight + h2hOver1_5Prob * h2hWeight)\n          over2_5Prob = Math.round(over2_5Prob * teamStatsWeight + h2hOver2_5Prob * h2hWeight)\n          over3_5Prob = Math.round(over3_5Prob * teamStatsWeight + h2hOver3_5Prob * h2hWeight)\n          over4_5Prob = Math.round(over4_5Prob * teamStatsWeight + h2hOver4_5Prob * h2hWeight)\n\n          // H2H based BTTS probability\n          const h2hBttsProb = Math.round((bttsCount / totalMatches) * 100)\n          bttsProb = Math.round(bttsProb * teamStatsWeight + h2hBttsProb * h2hWeight)\n        }\n      }\n    }\n\n    // BTTS olasılığını bttsAverage ile güncelle (frontend",
        "s scoring rate (0-1)\n  const calculateTeamScoringRate = (matches: any[], teamId: string): number => {\n    if (!Array.isArray(matches) || matches.length === 0) return 0.7\n\n    let scoredCount = 0\n\n    matches.forEach((match: any) => {\n      const isHome = match.match_hometeam_id === teamId\n      const homeScore = Number.parseInt(match.match_hometeam_score) || 0\n      const awayScore = Number.parseInt(match.match_awayteam_score) || 0\n\n      if ((isHome && homeScore > 0) || (!isHome && awayScore > 0)) {\n        scoredCount++\n      }\n    })\n\n    return scoredCount / matches.length\n  }\n\n  // Generate fallback predictions if API data is unavailable\n  const generateFallbackPredictions = () => {\n    // Home advantage\n    const homeWinProb = 35 + Math.floor(Math.random() * 30)\n    const drawProb = 20 + Math.floor(Math.random() * 20)\n    const awayWinProb = 100 - homeWinProb - drawProb\n\n    // Over/Under probabilities\n    const over0_5Prob = 90 + Math.floor(Math.random() * 5)\n    const over1_5Prob = 70 + Math.floor(Math.random() * 20)\n    const over2_5Prob = 45 + Math.floor(Math.random() * 30)\n    const over3_5Prob = 25 + Math.floor(Math.random() * 25)\n    const over4_5Prob = 10 + Math.floor(Math.random() * 20)\n\n    // BTTS probability\n    const bttsProb = 50 + Math.floor(Math.random() * 30)\n\n    return {\n      homeWinProb,\n      drawProb,\n      awayWinProb,\n      over0_5Prob,\n      over1_5Prob,\n      over2_5Prob,\n      over3_5Prob,\n      over4_5Prob,\n      bttsProb,\n    }\n  }\n\n  \n\n  // Generate prediction comment based on probabilities\n  const generatePredictionComment = (\n    predictionData: {\n      homeWinProb: number\n      drawProb: number\n      awayWinProb: number\n      over0_5Prob: number\n      over1_5Prob: number\n      over2_5Prob: number\n      over3_5Prob: number\n      over4_5Prob: number\n      bttsProb: number\n    },\n    homeTeamName: string,\n    awayTeamName: string,\n    bttsStatsObj?: any,\n    recommendedMarketObj?: any\n  ) => {\n    // Generate human-readable comment\n    let comment = \"\";\n\n    // Maç sonucu tahmini\n    const winner =\n      predictionData.homeWinProb > predictionData.awayWinProb && predictionData.homeWinProb > predictionData.drawProb\n        ? homeTeamName\n        : predictionData.awayWinProb > predictionData.homeWinProb && predictionData.awayWinProb > predictionData.drawProb\n        ? awayTeamName\n        : \"Draw\";\n\n    // Favori takım ve istatistikler\n    if (winner === homeTeamName) {\n      comment += t(",
        ") + ` (%${Math.round(predictionData.drawProb)}). `;\n    }\n\n    // Beklenen gol sayısı\n    if (predictionData.over2_5Prob > 60) {\n      comment += t(",
        ") + ` (%${Math.round(100 - predictionData.bttsProb)}). `;\n    }\n\n    // Önerilen market\n    if (recommendedMarketObj) {\n      comment += t(",
        ") + `: ${recommendedMarketObj.label} (%${Math.round(recommendedMarketObj.value)})`;\n    }\n    \n    return comment\n  }\n\n  // Risk seviyesi hesaplayan fonksiyon\n  const calculateRiskLevel = (prediction: number, betType: string): { level: string, score: number } => {\n    // Temel risk puanı (100",
        "Kazanır",
        "Kazanır",
        "İY/MS",
        "Çifte",
        "Berabere Kalır",
        "dortBuçukUst",
        "in kazanma olasılığı düşük görünüyor.`\n      });\n    } else if (predictions.awayWinProb < 40 && predictions.drawProb >= 30) {\n      tips.push({\n        type: \"safe\",\n        label: `${homeTeam} Kazanır/Berabere Kalır`,\n        probability: predictions.homeWinProb + predictions.drawProb,\n        explanation: `${awayTeam}",
        "in kazanma olasılığı düşük görünüyor.`\n        });\n      } else if (maxOutcome === predictions.awayWinProb) {\n        tips.push({\n          type: \"safe\",\n          label: `${awayTeam} Kazanır/Berabere Kalır`,\n          probability: predictions.awayWinProb + predictions.drawProb,\n          explanation: `${homeTeam}",
        "i konsola yazdır\n  useEffect(() => {\n    if (!loading) {\n      console.log(",
        ", {\n        homeWinProb: predictions.homeWinProb >= 70,\n        awayWinProb: predictions.awayWinProb >= 70,\n        drawProb: predictions.drawProb >= 45,\n        bttsProb: predictions.bttsProb >= 65,\n        over2_5Prob: predictions.over2_5Prob >= 65,\n        under2_5Prob: 100 - predictions.over2_5Prob >= 65\n      });\n    }\n  }, [loading, trendBettingTips, predictions]);\n\n  // --- Recommended Market Calculation ---\n  const marketSuggestions = [\n    { label: \"0.5 ÜST\", value: predictions.over0_5Prob, type: \"over0_5\" },\n    { label: \"1.5 ÜST\", value: predictions.over1_5Prob, type: \"over1_5\" },\n    { label: \"2.5 ÜST\", value: predictions.over2_5Prob, type: \"over2_5\" },\n    { label: \"3.5 ÜST\", value: predictions.over3_5Prob, type: \"over3_5\" },\n    { label: \"4.5 ÜST\", value: predictions.over4_5Prob, type: \"over4_5\" },\n    { label: \"0.5 ALT\", value: 100 - predictions.over0_5Prob, type: \"under0_5\" },\n    { label: \"1.5 ALT\", value: 100 - predictions.over1_5Prob, type: \"under1_5\" },\n    { label: \"2.5 ALT\", value: 100 - predictions.over2_5Prob, type: \"under2_5\" },\n    { label: \"3.5 ALT\", value: 100 - predictions.over3_5Prob, type: \"under3_5\" },\n    { label: \"4.5 ALT\", value: 100 - predictions.over4_5Prob, type: \"under4_5\" },\n    { label: \"KG VAR\", value: predictions.bttsProb, type: \"btts\" },\n    { label: \"KG YOK\", value: 100 - predictions.bttsProb, type: \"nobtts\" },\n  ];\n  const recommendedMarket = useMemo(() => {\n    // En yüksek olasılıklı bahis türünü bul\n    const marketOptions = [\n      { label: `0.5 ${t(",
        ")}</span>\n          </h3>\n          <div className=\"space-y-3 bg-slate-800/50 p-3 rounded-md border border-green-700/20\">\n            {/* Favorinin gösterildiği özel bölüm */}\n            <div className=\"flex justify-center mb-2\">\n              {predictions.homeWinProb > predictions.drawProb && predictions.homeWinProb > predictions.awayWinProb ? (\n                <div className=\"bg-green-900/30 border border-green-700/30 rounded-md px-3 py-1 text-center animate-pulse\">\n                  <span className=\"text-sm text-green-400 font-bold\">{homeTeam}</span>\n                  <span className=\"text-xs text-slate-300 ml-1\">{t(",
        ")}</span>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  <span className=\"text-lg font-bold\">{recommendedMarket.label}</span>\n                  <span className=\"text-sm bg-slate-800/80 px-1.5 py-0.5 rounded\">%{Math.round(recommendedMarket.value)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* --- Trend Bahisçi Önerileri --- */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-green-400 border-b border-green-700/30 pb-1 flex items-center\">\n            <Bot className=\"w-4 h-4 mr-1 text-blue-400\" />\n            <span>{t(",
        ")}</span>\n          </h3>\n          <div className=\"space-y-3 bg-slate-800/50 p-2 rounded-md border border-green-700/20\">\n            {trendBettingTips.length > 0 ? (\n              <>\n                {/* Kategori başlıkları */}\n                <div className=\"flex flex-col space-y-1\">\n                  <div className=\"text-xs text-green-400 font-medium border-b border-green-700/30 pb-1 mb-1\">\n                    {t(",
        ")}\n                  </div>\n                  \n                  {/* İlk 3 öneriyi en iyi seçimler olarak göster */}\n                  {trendBettingTips.slice(0, 3).map((tip, index) => (\n                    <div key={index} className=\"flex flex-col space-y-1 p-2 bg-slate-700/30 rounded-md hover:bg-slate-700/50 transition-colors\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <span className={`w-2 h-2 rounded-full mr-2 ${\n                            tip.type === ",
        ")}: {tip.riskLevel} \n                              {tip.riskScore !== undefined && (\n                                <span className=\"ml-0.5 opacity-80\">({tip.riskScore})</span>\n                              )}</span>\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Alt/Üst Market Önerileri - önerilen bahisler içinde 1.5 veya 2.5 Üst/Alt varsa göster */}\n                {trendBettingTips.some(tip => \n                  tip.label.includes(\"1.5\") || \n                  tip.label.includes(\"2.5\") || \n                  (tip.label.includes(\"Over\") && tip.label.includes(\"&\"))\n                ) && (\n                  <div className=\"flex flex-col space-y-1 mt-3\">\n                    <div className=\"text-xs text-yellow-400 font-medium border-b border-yellow-700/30 pb-1 mb-1\">\n                      {t(",
        ")}: {tip.riskLevel} \n                                  {tip.riskScore !== undefined && (\n                                    <span className=\"ml-0.5 opacity-80\">({tip.riskScore})</span>\n                                  )}</span>\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Diğer öneriler - en fazla 2 tane göster */}\n                {trendBettingTips.length > 3 && (\n                  <div className=\"flex flex-col space-y-1 mt-3\">\n                    <div className=\"text-xs text-blue-400 font-medium border-b border-blue-700/30 pb-1 mb-1\">\n                      {t(",
        ")}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* --- Alt/Üst Marketleri --- */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-green-400 border-b border-green-700/30 pb-1 flex items-center\">\n            <TrendingUp className=\"w-4 h-4 mr-1 text-yellow-400\" />\n            <span>{t(",
        "Her iki takım da yüksek gol ortalamasına sahip. 2.5 üst makul bir seçim olabilir.",
        "KG Var & 2.5 Üst",
        "İki takımın da gol atacağı ve toplamda 3+ gol olacağı yüksek olasılıklı.",
        "KG Yok & 2.5 Alt",
        "Düşük skorlu ve karşılıklı gol olmayan bir maç bekleniyor.",
        "İY/MS 1/1",
        "İY/MS 2/2",
        "0.5 Üst",
        "Maçta en az 1 gol olma olasılığı yüksek.",
        "1.5 Üst & KG Var",
        "İki takımın da gol atması ve toplamda en az 2 gol olması yüksek olasılıklı.",
        "0.5 ÜST",
        "1.5 ÜST",
        "2.5 ÜST",
        "3.5 ÜST",
        "4.5 ÜST",
        "0.5 ALT",
        "1.5 ALT",
        "2.5 ALT",
        "3.5 ALT",
        "4.5 ALT"
      ]
    },
    {
      "file": "components\\upcoming-matches.tsx",
      "strings": [
        "den takımın puan durumunu çek\nconst getTeamStandings = async (teamId: string, teamName: string, leagueId?: string) => {\n  try {\n    // Get team league info from API\n    if (!leagueId) {\n      console.log(`League ID not found for ${teamName}, using default ID`);\n      // If team league info is missing, use a default league ID\n      // Turkey Super League: 148, Premier League: 152, La Liga: 302, Bundesliga: 175, Serie A: 207\n      leagueId = \"148\"; // Super League ID as default\n    }\n    \n    // Get league standings\n    console.log(`Getting standings for league ID ${leagueId}...`);\n    const standings = await getStandings(leagueId);\n    \n    if (!Array.isArray(standings) || standings.length === 0) {\n      console.log(`Failed to get standings data for league ID ${leagueId} from API or returned empty array`);\n      // Try alternative leagues\n      const alternativeLeagueIds = [\"148\", \"152\", \"302\", \"175\", \"207\"];\n      \n      // Try alternatives if given league ID is not already in the alternatives list\n      if (!alternativeLeagueIds.includes(leagueId)) {\n        for (const altLeagueId of alternativeLeagueIds) {\n          console.log(`Trying alternative league ID: ${altLeagueId}`);\n          try {\n            const altStandings = await getStandings(altLeagueId);\n            if (Array.isArray(altStandings) && altStandings.length > 0) {\n              console.log(`Data found in alternative league with ID ${altLeagueId}`);\n              return await findTeamInStandings(altStandings, teamId, teamName);\n            }\n          } catch (e) {\n            console.log(`Error for alternative league ID ${altLeagueId}:`, e);\n          }\n        }\n      }\n      \n      return {\n        position: 0,\n        points: 0,\n        played: 0,\n        won: 0,\n        drawn: 0,\n        lost: 0,\n        goalsFor: 0,\n        goalsAgainst: 0\n      };\n    }\n    // Takımı puan durumu listesinde ara\n    return await findTeamInStandings(standings, teamId, teamName);\n  } catch (error) {\n    console.error(`Error fetching team standings for ${teamName}:`, error);\n    // Hata durumunda boş değerler döndür\n    return {\n      position: 0,\n      points: 0,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0\n    };\n  }\n};\n\nconst StandingsComparison = ({\n  homeTeamId,\n  awayTeamId,\n  homeTeam,\n  awayTeam,\n  leagueId,\n}: {\n  homeTeamId: string\n  awayTeamId: string\n  homeTeam: string\n  awayTeam: string\n  leagueId?: string\n}) => {\n  const { t } = useTranslation();\n  const [homeStanding, setHomeStanding] = useState<any>(null)\n  const [awayStanding, setAwayStanding] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchStandings = async () => {\n      try {\n        console.log(`Puan durumu çekiliyor - Lig ID: ${leagueId}, Ev sahibi: ${homeTeam}, Deplasman: ${awayTeam}`);\n        const [homeData, awayData] = await Promise.all([\n          getTeamStandings(homeTeamId, homeTeam, leagueId), \n          getTeamStandings(awayTeamId, awayTeam, leagueId)\n        ]);\n        \n        setHomeStanding(homeData)\n        setAwayStanding(awayData)\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error)\n        setError(\"Puan durumu bilgisi alınırken bir hata oluştu\");\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStandings()\n  }, [homeTeamId, awayTeamId, homeTeam, awayTeam, leagueId])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-green-500\" />\n      </div>\n    )\n  }\n  \n  if (error) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-red-400\">{error}</p>\n      </div>\n    )\n  }\n\n  if (!homeStanding || !awayStanding) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">Puan durumu bilgisi bulunamadı</p>\n      </div>\n    )\n  }\n\n  const positionDiff = homeStanding.position - awayStanding.position\n  const pointsDiff = homeStanding.points - awayStanding.points\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-center mb-3\">\n        <Trophy className=\"w-4 h-4 text-yellow-500 mr-2\" />\n        <h3 className=\"text-sm font-medium text-green-400\">{t(",
        ")}:</span>\n                  <span className=\"text-white\">\n                    {awayStanding.goalsFor}/{awayStanding.goalsAgainst}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n// Memoized match card component\nconst UpcomingMatchCard = React.memo(\n  ({\n    match,\n    isSelected,\n    onMatchClick,\n    onAnalysisClick,\n    onPredictionClick,\n  }: {\n    match: Match\n    isSelected: boolean\n    onMatchClick: (matchId: string, homeTeamId: string, awayTeamId: string, tabType?: string) => void\n    onAnalysisClick: () => void\n    onPredictionClick: () => void\n  }) => {\n    const { t } = useTranslation();\n    // Maçın canlı olup olmadığını kontrol et\n    const isLive = match.match_live === \"1\";\n    const isFinished = match.match_status === \"FT\" || match.match_status === \"Finished\";\n    \n    // Skor bilgisi\n    const homeScore = match.match_hometeam_score || \"0\";\n    const awayScore = match.match_awayteam_score || \"0\";\n    \n    // Tarih ve saat bilgisi\n    const matchDate = new Date(match.match_date);\n    const today = new Date();\n    const tomorrow = addDays(today, 1);\n\n    today.setHours(0, 0, 0, 0);\n    tomorrow.setHours(0, 0, 0, 0);\n    matchDate.setHours(0, 0, 0, 0);\n\n    let dateLabel = format(matchDate, \"d MMMM EEEE\", { locale: tr });\n    if (matchDate.getTime() === today.getTime()) {\n      dateLabel = t(",
        ");\n    }\n    \n    // Performans için memoize edilmiş tıklama fonksiyonları\n    const handleAnalysisClick = useCallback((e: React.MouseEvent) => {\n      e.stopPropagation();\n      onAnalysisClick();\n    }, [onAnalysisClick]);\n\n    const handlePredictionClick = useCallback((e: React.MouseEvent) => {\n      e.stopPropagation();\n      onPredictionClick();\n    }, [onPredictionClick]);\n    \n    return (\n      <Card\n        className={`cursor-pointer transition-colors duration-200 bg-slate-800 border-slate-700 hover:border-green-600 ${\n          isSelected ? \"border-green-500 bg-slate-750\" : \"\"\n        } ${isLive ? \"border-red-500\" : \"\"}`}\n        onClick={() => onMatchClick(match.match_id, match.match_hometeam_id, match.match_awayteam_id)}\n      >\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center\">\n              {match.league_logo && (\n                <img\n                  src={match.league_logo || \"/placeholder.svg\"}\n                  alt={match.league_name}\n                  className=\"w-4 h-4 mr-1 rounded-full\"\n                  loading=\"lazy\"\n                />\n              )}\n              <Badge variant=\"outline\" className=\"text-xs px-1 py-0 border-green-700/30 text-green-400 bg-green-900/20\">\n                {match.league_name}\n              </Badge>\n            </div>\n            \n            {isLive ? (\n              <Badge className=\"text-xs px-2 py-0 bg-red-600 text-white animate-pulse\">\n                {match.match_status === \"1H\" ? t(",
        "den maç istatistiklerini çekebilirsiniz\n        // Örnek: const data = await getMatchStats(match.match_id);\n        \n        // Şimdilik örnek veri gösteriyoruz\n        const demoStats = {\n          possession: {\n            home: 55,\n            away: 45\n          },\n          shots: {\n            home: 12,\n            away: 8\n          },\n          shotsOnTarget: {\n            home: 5,\n            away: 3\n          },\n          corners: {\n            home: 6,\n            away: 4\n          },\n          fouls: {\n            home: 10,\n            away: 12\n          },\n          yellowCards: {\n            home: 2,\n            away: 3\n          },\n          redCards: {\n            home: 0,\n            away: 0\n          }\n        };\n        \n        setStats(demoStats);\n      } catch (error) {\n        console.error(\"Error fetching match stats:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchMatchStats();\n  }, [match.match_id]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-red-500\" />\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">{t(",
        ")}</p>\n      </div>\n    );\n  }\n\n  // Skor bilgisi\n  const homeScore = match.match_hometeam_score || \"0\";\n  const awayScore = match.match_awayteam_score || \"0\";\n  const homeHalfScore = match.match_hometeam_halftime_score || \"0\";\n  const awayHalfScore = match.match_awayteam_halftime_score || \"0\";\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Maç durumu ve skor */}\n      <div className=\"flex items-center justify-center mb-3\">\n        <Badge className=\"bg-red-600 text-white\">\n          {match.match_status === \"1H\" ? t(",
        "den kontrol et\n  if (!forceRefresh) {\n    const cachedData = await indexedCache.get(FINISHED_MATCHES_CACHE_KEY);\n    if (cachedData) {\n      console.log(\"Tamamlanan maçlar IndexedDB",
        "le (24 saat boyunca)\n    await indexedCache.set(FINISHED_MATCHES_CACHE_KEY, result, 24 * 60 * 60 * 1000);\n\n    console.log(`Tamamlanan maçlar IndexedDB",
        "den yüklendi\")\n          return\n        }\n      } else {\n        setCacheStatus(\"Cache bypass ediliyor, API",
        "))\n    } finally {\n      setTimeout(() => {\n        setLoading(false)\n      }, 200)\n    }\n  }, [formatDateForApi, dateRange, t])\n\n  const fetchCountries = useCallback(async () => {\n    try {\n      const data = await getCountries()\n      if (Array.isArray(data)) {\n        setCountries(data)\n      }\n    } catch (err) {\n      console.error(\"Error fetching countries:\", err)\n    }\n  }, [])\n\n  const fetchLeagues = useCallback(async (countryId?: string) => {\n    try {\n      const data = await getLeagues(countryId)\n      if (Array.isArray(data)) {\n        setLeagues(data)\n      }\n    } catch (err) {\n      console.error(\"Error fetching leagues:\", err)\n    }\n  }, [])\n\n  const fetchMatchDetails = useCallback(async (matchId: string, homeTeamId: string, awayTeamId: string) => {\n    setIsLoadingDetails(true)\n    try {\n      const [homeMatches, awayMatches] = await Promise.all([\n        getTeamLastMatches(homeTeamId, 10),\n        getTeamLastMatches(awayTeamId, 10),\n      ])\n\n      if (Array.isArray(homeMatches)) {\n        setHomeLastMatches(homeMatches)\n      }\n\n      if (Array.isArray(awayMatches)) {\n        setAwayLastMatches(awayMatches)\n      }\n    } catch (error) {\n      console.error(\"Error fetching match details:\", error)\n    } finally {\n      setIsLoadingDetails(false)\n    }\n  }, [])\n\n  const clearCache = useCallback(async () => {\n    try {\n      setCacheStatus(\"Cache temizleniyor...\")\n      const success = await indexedCache.clear()\n      const newStorage = await indexedCache.getStorageInfo()\n      setStorageInfo(newStorage)\n      setCacheStatus(success ? \"Cache temizlendi\" : \"Cache temizleme başarısız\")\n    } catch (error) {\n      setCacheStatus(\"Cache temizleme hatası\")\n    }\n  }, [])\n\n  // Use a memoized version of matches for better performance\n  const memoizedMatches = useMemo(() => matches, [matches]);\n  \n  // Increase debounce time for better performance\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 500); // 500ms delay for better performance\n\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n  \n  // Fetch yesterday",
        "s finished matches for the \"Tamamlanan\" tab\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchFinishedMatches = async () => {\n      // Her \"Tamamlanan\" sekmesine geçişte ve her iki alt sekme değişiminde çalış\n      if (selectedDate === \"finished\") {\n        try {\n          setLoadingFinished(true);\n          setFinishedMatchError(null); // Önceki hataları temizle\n          const result = await fetchYesterdayFinishedMatches(true); // Force refresh\n          const yesterdayFinishedData = result.yesterdayFinished;\n          const todayFinishedData = result.todayFinished;\n          \n          if (isMounted) {\n            setYesterdayFinished(yesterdayFinishedData);\n            setTodayFinished(todayFinishedData);\n            setLoadingFinished(false);\n\n            // Eğer bugünün maçları yoksa, kullanıcıya bildirim göster\n            if (todayFinishedData.length === 0) {\n              setFinishedMatchError(t(",
        "))\n          }\n        }\n      }\n    };\n\n    fetchFinishedMatches();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [selectedDate, selectedFinishedDate, t]);\n  \n  // Memoize edilmiş tarih filtreleme fonksiyonu\n  const filteredMatches = useMemo(() => {\n    if (selectedDate === \"finished\") {\n      // Dün ve bugünün maçlarını seçilen tarihe göre filtrele\n      const matches = selectedFinishedDate === \"yesterday\" \n        ? yesterdayFinished \n        : todayFinished;\n      \n      // Eğer hiç maç yoksa boş dizi döndür\n      return matches;\n    }\n    \n    // Performans için erken filtreleme\n    let filtered = [...memoizedMatches];\n\n    // Tarih filtrelemesini daha kesin hale getir\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Günün başlangıcı\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    const weekEnd = new Date(today);\n    weekEnd.setDate(today.getDate() + 7);\n\n    filtered = filtered.filter(match => {\n      const matchDate = new Date(match.match_date);\n      matchDate.setHours(0, 0, 0, 0); // Karşılaştırma için saati sıfırla\n      \n      // Tamamlanmış maçları filtrele\n      if (MATCH_STATUSES.FINISHED.includes(match.match_status || \"\")) {\n        return false;\n      }\n\n      // Tarih filtrelemesi\n      switch (selectedDate) {\n        case \"today\":\n          return matchDate.getTime() === today.getTime();\n        case \"tomorrow\":\n          return matchDate.getTime() === tomorrow.getTime();\n        case \"week\":\n          return matchDate >= today && matchDate < weekEnd;\n        default:\n          return true;\n      }\n    });\n\n    // Arama filtresi\n    if (debouncedSearchTerm) {\n      const term = debouncedSearchTerm.toLowerCase();\n      filtered = filtered.filter(\n        match => \n          match.match_hometeam_name.toLowerCase().includes(term) ||\n          match.match_awayteam_name.toLowerCase().includes(term)\n      );\n    }\n\n    // Ülke filtrelemesi\n    if (selectedCountry && selectedCountry !== \"all-countries\") {\n      const countryInfo = countries.find(c => c.country_id === selectedCountry);\n      if (countryInfo) {\n        filtered = filtered.filter(match => match.country_name === countryInfo.country_name);\n      }\n    }\n\n    // Lig filtrelemesi\n    if (selectedLeague && selectedLeague !== \"all-leagues\") {\n      const leagueInfo = leagues.find(l => l.league_id === selectedLeague);\n      if (leagueInfo) {\n        filtered = filtered.filter(match => match.league_name === leagueInfo.league_name);\n      }\n    }\n\n    return filtered;\n  }, [\n    selectedDate, \n    selectedFinishedDate,\n    yesterdayFinished, \n    todayFinished,\n    memoizedMatches, \n    debouncedSearchTerm, \n    selectedCountry, \n    selectedLeague, \n    countries, \n    leagues\n  ]);\n\n  // Tarihe göre gruplandırma işlemini de memoize et\n  const matchesByDate = useMemo(() => {\n    return filteredMatches.reduce(\n      (acc, match) => {\n        if (!acc[match.match_date]) {\n          acc[match.match_date] = []\n        }\n        acc[match.match_date].push(match)\n        return acc\n      },\n      {} as Record<string, Match[]>\n    )\n  }, [filteredMatches]);\n\n  useEffect(() => {\n    fetchUpcomingMatches(false)\n    fetchCountries()\n  }, [fetchUpcomingMatches, fetchCountries])\n\n  useEffect(() => {\n    if (selectedCountry && selectedCountry !== \"all-countries\") {\n      fetchLeagues(selectedCountry)\n      setSelectedLeague(\"all-leagues\")\n    } else {\n      fetchLeagues()\n    }\n  }, [selectedCountry, fetchLeagues])\n\n  const handleMatchClick = useCallback(\n    (matchId: string, homeTeamId: string, awayTeamId: string, tabType?: string) => {\n      if (selectedMatchId === matchId) {\n        setSelectedMatchId(null)\n        setHomeLastMatches([])\n        setAwayLastMatches([])\n      } else {\n        // Maçı bul\n        const selectedMatch = memoizedMatches.find(match => match.match_id === matchId);\n        \n        setSelectedMatchId(matchId)\n        \n        // Canlı maç ise \"live\" sekmesini, değilse \"standings\" sekmesini seç\n        if (selectedMatch && selectedMatch.match_live === \"1\") {\n          setActiveTab(\"live\")\n        } else if (tabType) {\n          // Eğer tabType parametre olarak geldiyse, o sekmeyi seç\n          setActiveTab(tabType)\n        } else {\n          setActiveTab(\"standings\")\n        }\n        \n        fetchMatchDetails(matchId, homeTeamId, awayTeamId)\n      }\n    },\n    [selectedMatchId, fetchMatchDetails, memoizedMatches]\n  )\n\n  // Seçilen maça otomatik kaydırma efekti için useEffect - hem seçildiğinde hem de yükleme tamamlandığında\n  useEffect(() => {\n    // İki durumda otomatik kaydırma yap:\n    // 1. Yeni bir maç seçildiğinde (selectedMatchId değiştiğinde)\n    // 2. Maç detayları yüklenmeyi tamamladığında (isLoadingDetails false olduğunda)\n    if (selectedMatchId && selectedMatchRef.current) {\n      // Scroll işlemi için uygun zamanlama\n      const scrollDelay = isLoadingDetails ? 50 : 200; // Yükleme bittiyse biraz daha bekle\n\n      const scrollTimer = setTimeout(() => {\n        if (selectedMatchRef.current) {\n          // Tüm sayfa durumlarında çalışacak şekilde scroll işlemi yap\n          selectedMatchRef.current.scrollIntoView({\n            behavior: ",
        ",\n          });\n        }\n      }, scrollDelay);\n\n      return () => clearTimeout(scrollTimer);\n    }\n  }, [selectedMatchId, isLoadingDetails]);\n  \n  // Aktif tab değiştiğinde scroll işlemini tekrarla - özellikle ",
        " sekmesine geçildiğinde\n  useEffect(() => {\n    if (selectedMatchId && selectedMatchRef.current && activeTab === ",
        ") {\n      // Tahmin sekmesine geçildiğinde otomatik kaydırma yap\n      setTimeout(() => {\n        if (selectedMatchRef.current) {\n          selectedMatchRef.current.scrollIntoView({\n            behavior: ",
        ", // Tahmin için merkeze kaydır\n          });\n        }\n      }, 100);\n    }\n  }, [activeTab, selectedMatchId]);\n\n  const handleDateChange = useCallback((newDate: string) => {\n    // Eğer zaten aynı tarih seçilmişse işlem yapma\n    if (newDate === selectedDate) return;\n\n    // Yükleme durumunu aktif et\n    setIsDateLoading(true);\n\n    // Kısa bir gecikme ekleyelim (gerçek yükleme simülasyonu için)\n    setTimeout(() => {\n      setSelectedDate(newDate);\n      \n      // Yükleme durumunu kapat\n      setIsDateLoading(false);\n    }, 300); // Hafif bir gecikme performans hissi verir\n  }, [selectedDate]);\n\n  const handlePredictionClick = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation()\n    const matchId = (e.currentTarget.dataset.matchId || ",
        ")}</p>\n        <Progress \n          value={50} \n          className=\"w-full max-w-xs mt-2 h-1\"\n          indicatorColor=\"bg-green-500\"\n        />\n      </div>\n    );\n  }\n\n  // Tamamlanan maçlar için boş liste kontrolü\n  if (selectedDate === \"finished\" && \n      ((selectedFinishedDate === \"yesterday\" && yesterdayFinished.length === 0) || \n       (selectedFinishedDate === \"today\" && todayFinished.length === 0))) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-6\">\n        <AlertCircle className=\"w-8 h-8 text-yellow-500 mb-2\" />\n        <p className=\"text-xs text-slate-400 text-center\">\n          {selectedFinishedDate === \"yesterday\" \n            ? t(",
        ")}\n          </Button>\n        </div>\n      )}\n\n      {/* Date filter tabs */}\n      <div className=\"mb-2 relative\">\n        <Tabs \n          defaultValue=\"today\" \n          value={selectedDate} \n          onValueChange={handleDateChange}\n          className=\"w-full\"\n        >\n          <TabsList className=\"w-full bg-slate-800 border border-slate-700 h-8 p-0.5 relative\">\n            {/* Yükleme overlay",
        "Puan durumu bilgisi alınırken bir hata oluştu",
        "Tamamlanan maçlar IndexedDB'den yüklendi",
        "Tamamlanan maçlar çekilirken hata oluştu:",
        "IndexedDB'den yüklendi",
        "API'den yükleniyor...",
        "Cache temizleme başarısız",
        "Cache temizleme hatası"
      ]
    },
    {
      "file": "components\\user-profile.tsx",
      "strings": [
        "den çekilecek)\n    setTimeout(() => {\n      const results = [\n        { id: \"1\", name: \"Barcelona\", logo: \"/placeholder.svg?height=40&width=40&text=FCB\" },\n        { id: \"2\", name: \"Real Madrid\", logo: \"/placeholder.svg?height=40&width=40&text=RM\" },\n        { id: \"3\", name: \"Bayern Munich\", logo: \"/placeholder.svg?height=40&width=40&text=BM\" },\n        { id: \"4\", name: \"Manchester United\", logo: \"/placeholder.svg?height=40&width=40&text=MU\" },\n        { id: \"5\", name: \"Liverpool\", logo: \"/placeholder.svg?height=40&width=40&text=LIV\" },\n        { id: \"6\", name: \"Juventus\", logo: \"/placeholder.svg?height=40&width=40&text=JUV\" },\n        { id: \"7\", name: \"Paris Saint-Germain\", logo: \"/placeholder.svg?height=40&width=40&text=PSG\" },\n        { id: \"8\", name: \"Manchester City\", logo: \"/placeholder.svg?height=40&width=40&text=MC\" },\n        { id: \"9\", name: \"Chelsea\", logo: \"/placeholder.svg?height=40&width=40&text=CHE\" },\n        { id: \"10\", name: \"Arsenal\", logo: \"/placeholder.svg?height=40&width=40&text=ARS\" },\n      ].filter((team) => team.name.toLowerCase().includes(term.toLowerCase()))\n\n      setSearchResults(results)\n      setSearching(false)\n    }, 500)\n  }\n\n  // Favori takım ekle\n  const addFavoriteTeam = (team: FavoriteTeam) => {\n    if (settings.favoriteTeams.some((t) => t.id === team.id)) {\n      toast({\n        title: t(",
        ", team.name),\n      duration: 3000,\n    })\n  }\n\n  // Favori takım kaldır\n  const removeFavoriteTeam = (teamId: string) => {\n    setSettings({\n      ...settings,\n      favoriteTeams: settings.favoriteTeams.filter((team) => team.id !== teamId),\n    })\n\n    toast({\n      title: t(",
        "),\n          variant: \"destructive\",\n          duration: 3000,\n        })\n      }\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src=\"/placeholder.svg?height=48&width=48&text=U\" alt=\"User\" />\n              <AvatarFallback>U</AvatarFallback>\n            </Avatar>\n            <div>\n              <CardTitle>{t(",
        ")}\n                    className=\"pl-8\"\n                    value={searchTerm}\n                    onChange={(e) => searchTeams(e.target.value)}\n                  />\n                </div>\n\n                {searchTerm.length > 1 && (\n                  <Card className=\"mt-2\">\n                    <CardContent className=\"p-2\">\n                      {searching ? (\n                        <div className=\"flex justify-center py-4\">\n                          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                        </div>\n                      ) : searchResults.length > 0 ? (\n                        <ScrollArea className=\"h-48\">\n                          <div className=\"space-y-2\">\n                            {searchResults.map((team) => (\n                              <div\n                                key={team.id}\n                                className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-md\"\n                              >\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2\">\n                                    <img\n                                      src={team.logo || \"/placeholder.svg\"}\n                                      alt={team.name}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  </div>\n                                  <span>{team.name}</span>\n                                </div>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => addFavoriteTeam(team)}\n                                  className=\"h-8 w-8 p-0\"\n                                >\n                                  <Plus className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </ScrollArea>\n                      ) : (\n                        <p className=\"text-center py-4 text-sm text-muted-foreground\">{t(",
        ")}</h3>\n                  {settings.favoriteTeams.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {settings.favoriteTeams.map((team) => (\n                        <div\n                          key={team.id}\n                          className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-md\"\n                        >\n                          <div className=\"flex items-center\">\n                            <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2\">\n                              <img\n                                src={team.logo || \"/placeholder.svg\"}\n                                alt={team.name}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                            <span>{team.name}</span>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => removeFavoriteTeam(team.id)}\n                            className=\"h-8 w-8 p-0 text-destructive hover:text-destructive/90\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center py-4 text-sm text-muted-foreground\">\n                      {t(",
        ")}</option>\n                    <option value=\"en\">{t(",
        ")}\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n      \n      {/* Başarı mesajı */}\n      {showSuccessToast && (\n        <div className=\"fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg animate-fade-in-up\">\n          {t(",
        "en",
        "en"
      ]
    },
    {
      "file": "lib\\api.ts",
      "strings": [
        "de veri varsa ve 5 saniyeden az bir süre geçtiyse kullan\n  if (cachedData && (Date.now() - cachedData.timestamp) < 5000) {\n    return cachedData.matches\n  }\n\n  try {\n    const response = await api.get(\"/\", {\n      params: {\n        APIkey: API_KEY,\n        action: \"get_events\",\n        match_live: \"1\",\n      },\n    })\n\n    // Timestamp ile birlikte kaydet\n    const liveMatchesData = {\n      matches: response.data || [],\n      timestamp: Date.now()\n    }\n\n    // 30 saniye boyunca cache",
        "İstek zaman aşımına uğradı",
        "Canlı maç verisi çekilirken hata oluştu:"
      ]
    },
    {
      "file": "lib\\football-api.ts",
      "strings": [
        "den veriyi çek\n    const response = await apiCall;\n    clearTimeout(timeoutId);\n    \n    if (response.data) {\n      // API yanıtını işlemek için requestIdleCallback kullan (tarayıcı boşta ise)\n      const processData = () => {\n        // Veriyi önbelleğe al\n        cacheService.set(cacheKey, response.data, cacheDuration)\n        return response.data\n      }\n      \n      // Tarayıcı için performans optimizasyonu\n      if (typeof window !== ",
        " in window) {\n        window.requestIdleCallback(() => processData())\n      } else {\n        // RequestIdleCallback kullanılamıyorsa direkt işle\n        processData()\n      }\n      \n      return response.data\n    }\n\n    throw new Error(\"Boş API yanıtı\")\n  } catch (error) {\n    console.error(`API çağrısında hata (${cacheKey}):`, error)\n    \n    // Hata durumunda boş bir veri dizisi döndür, bu şekilde kullanıcı arayüzü çökmez\n    if (cacheKey.includes(",
        ")) {\n      return []\n    }\n    \n    throw error\n  }\n}\n\n// Optimize edilmiş API istekleri için batch fonksiyonu\n// Birden fazla API isteğini tek seferde yapabilmek için\nconst batchApiRequests = async <T>(requests: (() => Promise<T>)[], maxConcurrent = 3): Promise<T[]> => {\n  const results: T[] = [];\n  const chunks: (() => Promise<T>)[][] = [];\n  \n  // İstekleri parçalara böl\n  for (let i = 0; i < requests.length; i += maxConcurrent) {\n    chunks.push(requests.slice(i, i + maxConcurrent));\n  }\n  \n  // Her bir parçayı paralel olarak işle\n  for (const chunk of chunks) {\n    const chunkResults = await Promise.all(chunk.map(req => req()));\n    results.push(...chunkResults);\n  }\n  \n  return results;\n};\n\n// Canlı maçları çek - optimize edilmiş\nexport async function getLiveMatches() {\n  try {\n    // İlk önce önbelleğe bak\n    const cacheKey = \"live_matches\";\n    const cachedData = cacheService.get(cacheKey);\n    if (cachedData) return cachedData;\n    \n    // API çağrısı yap\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        match_live: \"1\",\n      },\n      // 5 saniye timeout ile, hızlı yanıt için\n      timeout: 5000\n    });\n    \n    // Veriyi işle ve array olduğundan emin ol\n    const data = Array.isArray(response.data) ? response.data : [];\n    \n    // Önbelleğe al\n    cacheService.set(cacheKey, data, 15 * 1000); // 15 saniye\n    \n    return data;\n  } catch (error) {\n    console.error(\"Canlı maçlar çekilirken hata:\", error);\n    return []; // Her zaman dizi döndür\n  }\n}\n\n// Maç detaylarını çek\nexport async function getMatchDetails(matchId: string) {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        match_id: matchId,\n      },\n    }),\n    `match_details_${matchId}`,\n    15 * 1000, // 15 saniye önbellek\n  )\n}\n\n// Maç istatistiklerini çek\nexport async function getMatchStatistics(matchId: string) {\n  try {\n    const cacheKey = `match_statistics_${matchId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_statistics\",\n        match_id: matchId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (\n      !response.data ||\n      response.data === \"No statistics found\" ||\n      (Array.isArray(response.data) && response.data.length === 0)\n    ) {\n      console.log(\"İstatistik verisi bulunamadı\")\n      return null\n    }\n\n    // Veriyi işle\n    let statistics = {}\n\n    if (Array.isArray(response.data)) {\n      // İstatistikleri işle\n      statistics = response.data.reduce((acc, stat) => {\n        if (stat.type && stat.home !== undefined && stat.away !== undefined) {\n          acc[stat.type] = {\n            home: stat.home,\n            away: stat.away,\n          }\n        }\n        return acc\n      }, {})\n    } else if (typeof response.data === \"object\") {\n      // Tek bir istatistik nesnesi\n      Object.entries(response.data).forEach(([key, value]: [string, any]) => {\n        if (value && value.home !== undefined && value.away !== undefined) {\n          statistics[key] = {\n            home: value.home,\n            away: value.away,\n          }\n        }\n      })\n    }\n\n    // İstatistik yoksa null döndür\n    if (Object.keys(statistics).length === 0) {\n      console.log(\"İşlenebilir istatistik verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, statistics, 15 * 1000) // 15 saniye önbellek\n    return statistics\n  } catch (error) {\n    console.error(\"İstatistik verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Maç kadrosunu çek\nexport async function getMatchLineups(matchId: string) {\n  try {\n    const cacheKey = `match_lineups_${matchId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_lineups\",\n        match_id: matchId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (!response.data || response.data === \"No lineups found\" || response.data.error) {\n      console.log(\"Kadro verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, response.data, 15 * 1000) // 15 saniye önbellek\n    return response.data\n  } catch (error) {\n    console.error(\"Kadro verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// H2H maçları çek\nexport async function getHeadToHead(team1Id: string, team2Id: string) {\n  try {\n    const cacheKey = `h2h_${team1Id}_${team2Id}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_H2H\",\n        firstTeamId: team1Id,\n        secondTeamId: team2Id,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (\n      !response.data ||\n      !response.data.firstTeam_VS_secondTeam ||\n      response.data.firstTeam_VS_secondTeam.length === 0\n    ) {\n      console.log(\"H2H verisi bulunamadı\")\n      return { matches: [] }\n    }\n\n    // Veriyi işle\n    const h2hMatches = response.data.firstTeam_VS_secondTeam.map((match) => ({\n      id: match.match_id,\n      homeTeam: {\n        id: match.match_hometeam_id,\n        name: match.match_hometeam_name,\n      },\n      awayTeam: {\n        id: match.match_awayteam_id,\n        name: match.match_awayteam_name,\n      },\n      score: {\n        fullTime: {\n          home: Number.parseInt(match.match_hometeam_score) || 0,\n          away: Number.parseInt(match.match_awayteam_score) || 0,\n        },\n      },\n      utcDate: match.match_date,\n      status: match.match_status,\n    }))\n\n    const result = { matches: h2hMatches }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, result, 30 * 60 * 1000) // 30 dakika önbellek\n    return result\n  } catch (error) {\n    console.error(\"H2H verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Yıldız oyuncuları çek\nexport async function getStarPlayers(teamId: string) {\n  try {\n    const cacheKey = `star_players_${teamId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    // Önce takım oyuncularını çek\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_teams\",\n        team_id: teamId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (!response.data || (Array.isArray(response.data) && response.data.length === 0)) {\n      console.log(\"Takım verisi bulunamadı\")\n      return null\n    }\n\n    // Veriyi işle\n    let players = []\n\n    if (Array.isArray(response.data) && response.data.length > 0) {\n      // Oyuncuları çıkar\n      if (response.data[0].players && Array.isArray(response.data[0].players)) {\n        players = response.data[0].players.map((player) => ({\n          id: player.player_id || `player-${Math.random().toString(36).substr(2, 9)}`,\n          name: player.player_name,\n          position: mapPosition(player.player_type),\n          rating: Number.parseFloat(player.player_rating) || 6 + Math.random() * 4,\n          goals: Number.parseInt(player.player_goals) || 0,\n          assists: Number.parseInt(player.player_assists) || 0,\n          matches: Number.parseInt(player.player_match_played) || 0,\n        }))\n\n        // Oyuncuları sırala (gol, asist, puan)\n        players.sort((a, b) => {\n          if (a.goals !== b.goals) return b.goals - a.goals\n          if (a.assists !== b.assists) return b.assists - a.assists\n          return b.rating - a.rating\n        })\n\n        // En iyi 5 oyuncuyu al\n        players = players.slice(0, 5)\n      }\n    }\n\n    // Oyuncu yoksa null döndür\n    if (players.length === 0) {\n      console.log(\"İşlenebilir oyuncu verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, players, 30 * 60 * 1000) // 30 dakika önbellek\n    return players\n  } catch (error) {\n    console.error(\"Yıldız oyuncular çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Pozisyon tipini dönüştür\nfunction mapPosition(type: string): string {\n  if (!type) return \"Unknown\"\n\n  type = type.toLowerCase()\n\n  if (type.includes(\"goalkeeper\") || type.includes(\"kaleci\")) return \"Goalkeeper\"\n  if (type.includes(\"defender\") || type.includes(\"defans\")) return \"Defender\"\n  if (type.includes(\"midfielder\") || type.includes(\"orta saha\")) return \"Midfielder\"\n  if (type.includes(\"forward\") || type.includes(\"forvet\")) return \"Attacker\"\n\n  return \"Unknown\"\n}\n\n// Takım formunu çekmek için fonksiyon\nexport async function getTeamForm(teamId: string) {\n  try {\n    const cacheKey = `team_form_${teamId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    // Son 10 maçı çek\n    const lastMatches = await getTeamLastMatches(teamId, 10)\n\n    if (!Array.isArray(lastMatches) || lastMatches.length === 0) {\n      console.log(\"Takım form verisi bulunamadı\")\n      return []\n    }\n\n    // Form hesapla (W, D, L)\n    const form = lastMatches.map((match) => {\n      const isHome = match.match_hometeam_id === teamId\n      const homeScore = Number.parseInt(match.match_hometeam_score || \"0\")\n      const awayScore = Number.parseInt(match.match_awayteam_score || \"0\")\n\n      if (isHome) {\n        if (homeScore > awayScore) return \"W\"\n        if (homeScore < awayScore) return \"L\"\n        return \"D\"\n      } else {\n        if (homeScore < awayScore) return \"W\"\n        if (homeScore > awayScore) return \"L\"\n        return \"D\"\n      }\n    })\n\n    // 30 dakika için önbelleğe al\n    cacheService.set(cacheKey, form, 30 * 60 * 1000)\n    return form\n  } catch (error) {\n    console.error(\"Takım formu hesaplanırken hata:\", error)\n    throw error\n  }\n}\n\n// Takımın son maçlarını çek - isteğe bağlı önişleme ile\nexport async function getTeamLastMatches(teamId: string, limit = 10, preprocess = true) {\n  try {\n    const cacheKey = `team_last_matches_${teamId}_${limit}`;\n    const cachedData = cacheService.get(cacheKey);\n\n    if (cachedData) {\n      return cachedData;\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        team_id: teamId,\n        from: \"2023-01-01\", // Yılın başından itibaren\n        to: new Date().toISOString().split(\"T\")[0], // Bugün\n      },\n    });\n\n    // API yanıtını kontrol et\n    if (!response.data || (Array.isArray(response.data) && response.data.length === 0)) {\n      console.log(\"Takımın son maçları bulunamadı\");\n      return [];\n    }\n\n    // Sadece son X maçı almak için işle\n    let matches = Array.isArray(response.data) ? response.data : [];\n\n    if (preprocess) {\n      // Tarihe göre sırala (en yeni önce)\n      matches.sort((a, b) => {\n        const dateA = new Date(`${a.match_date} ${a.match_time}`).getTime();\n        const dateB = new Date(`${b.match_date} ${b.match_time}`).getTime();\n        return dateB - dateA;\n      });\n\n      // Sadece son ",
        " maçı al\n      matches = matches.slice(0, limit);\n    }\n\n    // 15 dakika için önbelleğe al\n    cacheService.set(cacheKey, matches, 15 * 60 * 1000);\n    return matches;\n  } catch (error) {\n    console.error(\"Takımın son maçları çekilirken hata:\", error);\n    return []; // Boş dizi döndür\n  }\n}\n\n// Birden çok takımın son maçlarını paralel olarak çek\nexport async function getMultipleTeamsLastMatches(teamIds: string[], limit = 10) {\n  try {\n    // Her takım için ayrı önbellekleme\n    const fetchTeamMatches = (teamId: string) => getTeamLastMatches(teamId, limit, false);\n    \n    // Paralel istekler\n    const requests = teamIds.map(teamId => () => fetchTeamMatches(teamId));\n    const results = await batchApiRequests(requests, 3);  // Aynı anda en fazla 3 istek\n    \n    return results;\n  } catch (error) {\n    console.error(\"Çoklu takım maçları çekilirken hata:\", error);\n    return teamIds.map(() => []); // Her takım için boş dizi\n  }\n}\n\n// Ülkeleri çek\nexport async function getCountries() {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_countries\",\n      },\n    }),\n    \"countries\",\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Ligleri çek\nexport async function getLeagues(countryId?: string) {\n  const cacheKey = `leagues_${countryId || \"all\"}`\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_leagues\",\n        country_id: countryId,\n      },\n    }),\n    cacheKey,\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Tüm ligleri çek\nexport async function getAllLeagues() {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_leagues\",\n      },\n    }),\n    \"all_leagues\",\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Yaklaşan maçları çek - paralel veri işleme ile optimize edilmiş\nexport async function getUpcomingMatches(from: string, to: string) {\n  try {\n    const cacheKey = `upcoming_matches_${from}_${to}`;\n    const cachedData = cacheService.get(cacheKey);\n    \n    if (cachedData) {\n      return cachedData;\n    }\n    \n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        from,\n        to,\n      },\n      timeout: 8000  // 8 saniye timeout\n    });\n    \n    // Veriyi async olarak işle\n    const processData = () => {\n      const data = Array.isArray(response.data) ? response.data : [];\n      \n      // Doğru sıralamayı sağlamak için tarihlere göre sırala\n      const sortedData = data.sort((a, b) => {\n        const dateA = new Date(`${a.match_date} ${a.match_time}`);\n        const dateB = new Date(`${b.match_date} ${b.match_time}`);\n        return dateA.getTime() - dateB.getTime();\n      });\n      \n      // 5 dakika önbellekte tut\n      cacheService.set(cacheKey, sortedData, 5 * 60 * 1000);\n      return sortedData;\n    };\n    \n    // Tarayıcıda boş zamanda işleme yapmak için\n    if (typeof window !== ",
        "API Hatası:",
        "Boş API yanıtı",
        "Canlı maçlar çekilirken hata:",
        "İstatistik verisi bulunamadı",
        "İşlenebilir istatistik verisi bulunamadı",
        "İstatistik verisi çekilirken hata:",
        "Kadro verisi bulunamadı",
        "Kadro verisi çekilirken hata:",
        "H2H verisi bulunamadı",
        "H2H verisi çekilirken hata:",
        "Takım verisi bulunamadı",
        "İşlenebilir oyuncu verisi bulunamadı",
        "Yıldız oyuncular çekilirken hata:",
        "Takım form verisi bulunamadı",
        "Takım formu hesaplanırken hata:",
        "Takımın son maçları bulunamadı",
        "Takımın son maçları çekilirken hata:",
        "Çoklu takım maçları çekilirken hata:",
        "Yaklaşan maçlar çekilirken hata:"
      ]
    },
    {
      "file": "lib\\indexed-cache.ts",
      "strings": [
        "LocalStorage erişimi mevcut değil"
      ]
    },
    {
      "file": "lib\\notification-service.ts",
      "strings": [
        "Bildirim izni istenirken hata:",
        "Bildirim gönderilirken hata:"
      ]
    },
    {
      "file": "lib\\translations.ts",
      "strings": [
        "en",
        "Futbol Tahmin",
        "Canlı Maç Takibi",
        "Lig Seç",
        "Canlı Ligler",
        "Tüm Ligleri Göster",
        "Şu anda canlı maç bulunamadı",
        "Maçları görüntülemek için bir lig seçin",
        "Maçları Gör",
        "DÜNYANIN EN GENİŞ LİG KAPSAMI",
        "AI Tahmin Motoru",
        "Canlı Lig",
        "Günlük Tahmin",
        "İLK VE TEK",
        "gerçek zamanlı maç analiz platformu",
        "Tamamen Şeffaf:",
        "kanıtlanmış sonuçlar!",
        "SAHTE VERİ YOK",
        "SADECE GERÇEK VERİ",
        "Geçmiş tüm tahminler kesintisiz olarak görüntülenebilir",
        "Kaybedilen tahminler dahil tüm sonuçlar açık şekilde paylaşılır",
        "Üstün Algoritma:",
        "5 yıl boyunca geliştirilen ve eğitilen özel algoritma, hiçbir yerde bulunmayan yapay zeka teknolojisiyle çalışır.",
        "5 YIL EĞİTİM",
        "milyon+ veri noktası",
        "PRO ÜYELİK AVANTAJLARI:",
        "SINIRLI SÜRE",
        "Özel Tahminler",
        "VIP Analiz",
        "%100 Geri Ödeme",
        "Tahmin Geçmişi",
        "İsabet",
        "Karşılaştırma",
        "Tahmin",
        "Analiz",
        "Son 10 Maç Analizi",
        "Sonuçlar",
        "Galibiyet",
        "Beraberlik",
        "Mağlubiyet",
        "Atılan",
        "Ekstra İstatistikler",
        "Maç Başı Gol",
        "Maç Başı Y.Gol",
        "{{teamName}} son maçlarda yükselen bir performans gösteriyor. Bu formlarını sürdürmeleri halinde başarılı olmaları muhtemel.",
        "{{teamName}} son maçlarda düşüş eğiliminde. Maç başına {{avgConceded}} gol yiyorlar ve savunmada zorluk yaşıyorlar.",
        "{{teamName}} son 10 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.",
        "Son 10 maçta {{count}} kez gol yemeden maçı tamamladılar.",
        "Son 10 maçta {{count}} kez gol atamadılar.",
        "Takımın son maçları bulunamadı.",
        "Analiz yükleniyor...",
        "Son maçlar yüklenirken bir hata oluştu.",
        "Algoritma Performansı",
        "Algoritma Kazandırdı!",
        "Başarı Oranı",
        "Toplam Maç",
        "Toplam Kazanç",
        "2.5 Üst",
        "2.5 Alt",
        "1.5 Üst",
        "1.5 Alt",
        "0.5 Üst",
        "0.5 Alt",
        "Filtrele",
        "Bugün",
        "Dün",
        "Bu Hafta",
        "Tümü",
        "Bugün için henüz kazanan tahmin yok",
        "Bugün için \"{{type}}\" tipinde kazanan tahmin yok",
        "Gelişmiş makine öğrenmesi algoritmaları ile futbol tahminlerinde yeni bir çağ başlıyor.",
        "Derin Öğrenme AI",
        "Son 10 yılın tüm maç verilerini analiz eden gelişmiş neural network sistemi.",
        "Takım Analizi",
        "Gerçek Zamanlı",
        "WELTWEIT GRÖßTE LIGA-ABDECKUNG",
        "Unterstützt von",
        "Völlig transparent:",
        "Alle Vorhersagen können kontinuierlich eingesehen werden",
        "Überlegener Algorithmus:",
        "Unser proprietärer Algorithmus, der über 5 Jahre entwickelt und trainiert wurde, arbeitet mit KI-Technologie, die nirgendwo sonst zu finden ist.",
        "100% Geld-zurück",
        "en"
      ]
    }
  ],
  "translations": {
    "Canlı Maçlar": "Live Matches",
    "Tahminler": "Predictions",
    "İstatistikler": "Statistics",
    "Yaklaşan": "Upcoming",
    "Ana Sayfa": "Home",
    "Canlı": "Live",
    "Profil": "Profile",
    "VIP": "VIP",
    "Şu anda canlı maç yok": "No live matches at the moment",
    "D.A.": "HT",
    "M.S.": "FT",
    "CANLI": "LIVE",
    "Goller": "Goals",
    "Kartlar": "Cards",
    "Değişiklikler": "Substitutions",
    "Canlı Yorum": "Live Commentary",
    "İlk Yarı": "First Half",
    "İkinci Yarı": "Second Half",
    "Maç Sonu": "Match End",
    "Penaltılar": "Penalties",
    "Canlı İzle": "Watch Live",
    "Canlı Tahmin Yap": "Live Prediction",
    "Maç İstatistikleri": "Match Statistics",
    "Top Hakimiyeti": "Possession",
    "Şutlar": "Shots",
    "İsabetli Şutlar": "Shots on Target",
    "Kornerler": "Corners",
    "Faul": "Fouls",
    "Sarı Kart": "Yellow Cards",
    "Kırmızı Kart": "Red Cards",
    "Faktörler": "Factors",
    "Faktör verisi yok": "No factor data available",
    "Maç Tahminleri": "Match Predictions",
    "Üst/Alt": "Over/Under",
    "Maç Kazananı": "Match Winner",
    "Olasılık": "Probability for",
    "Tahmin Yorumu": "Prediction Comment",
    "Başarı Oranı": "Success Rate",
    "Yapay Zeka ile": "AI-Powered with",
    "AI Analizleri": "AI Analysis",
    "Canlı Tahminleri Gör": "See Live Predictions",
    "Canlı Analiz": "Live Analysis",
    "Başarılı Tahmin": "Successful Predictions",
    "Mutlu Kullanıcı": "Happy Users",
    "Detaylar": "Details",
    "Karşılıklı": "H2H",
    "Son 10 Maç": "Last 10 Matches",
    "Puan Durumu": "Standings",
    "Tahmin": "Prediction",
    "Karşılaştırma": "Comparison",
    "Form Analizi": "Form Analysis",
    "Maç Başına Goller": "Goals per Match",
    "Maç Başına Kartlar": "Cards per Match",
    "Tahmin Edilen Sonuçlar": "Predicted Outcomes",
    "Yaklaşan Maçlar": "Upcoming Matches",
    "Takıma Göre Filtrele": "Filter by Team",
    "Lige Göre Filtrele": "Filter by League",
    "Ülkeye Göre Filtrele": "Filter by Country",
    "Takım Ara": "Search Teams",
    "Tüm Ligler": "All Leagues",
    "Tüm Ülkeler": "All Countries",
    "Bugün": "Today",
    "Yarın": "Tomorrow",
    "Henüz favori lig yok": "No favorite leagues yet",
    "Lig bulunamadı": "League not found",
    "Ligleri favorilere eklemek için yıldız ikonuna tıklayın": "Click the star icon to add leagues to favorites",
    "Arama kriterlerinizi değiştirmeyi deneyin": "Try changing your search criteria",
    "Lig veya takım ara...": "Search for league or team...",
    "Maçları Gör": "View Matches",
    "VIP Kazananlar": "VIP Winners",
    "Tümü": "All",
    "2.5 Üst": "Over 2.5",
    "2.5 Alt": "Under 2.5",
    "1.5 Üst": "Over 1.5",
    "1.5 Alt": "Under 1.5",
    "0.5 Üst": "Over 0.5",
    "0.5 Alt": "Under 0.5",
    "Karşılıklı Gol: Var": "BTTS Yes",
    "Karşılıklı Gol: Yok": "BTTS No",
    "Tüm maçlar:": "All Matches:",
    "Tamamlanmış maçlar:": "Completed Matches:",
    "Kazanan tahminler yüklenirken bir hata oluştu": "Error loading winning predictions",
    "Bugün için henüz kazanan tahmin yok": "No winning predictions for today yet",
    "Dün için kazanan tahmin yok": "No winning predictions for yesterday",
    "Bu hafta için kazanan tahmin yok": "No winning predictions for this week",
    "Fenerbahçe": "Big transfer move from Liverpool!",
    "Galatasaray derbide son dakika galibiyeti aldı": "Manchester United last-minute victory in the derby",
    "Beşiktaş": "Chelsea",
    "Trabzonspor": "Critical victory for Arsenal on the European path",
    "Süper Lig": "Premier League title race heats up",
    "Milli TakıM kadrosu açıklandı": "National Team squad announced",
    "Yeni sezon fikstürü belli oldu": "New season fixture announced",
    "TFF": "New decision for referees from FA",
    "Avrupa Ligleri": "This week",
    "VAR sisteminde büyük değişiklik": "Major change in the VAR system",
    "Yükleniyor...": "Loading...",
    "Veri yüklenirken hata oluştu": "Error loading data",
    "Tekrar Dene": "Retry",
    "Karanlık Mod": "Dark Mode",
    "Aydınlık Mod": "Light Mode",
    "Dil": "Language",
    "Tarih": "Date",
    "Saat": "Time",
    "Galibiyet": "Win",
    "Beraberlik": "Draw",
    "Mağlubiyet": "Loss",
    "Evet": "Yes",
    "Hayır": "No",
    "Üst": "Over",
    "Alt": "Under",
    "Yenile": "Refresh",
    "Bildirimler": "Notifications",
    "Otomatik Yenile": "Auto Refresh",
    "Stadyum": "Stadium",
    "Skor": "Score",
    "VS": "VS",
    "Canlı Maç Takibi": "Live Match Tracking",
    "Canlı maçlar yükleniyor...": "Loading live matches...",
    "Maç": "Matches",
    "Şu anda canlı maç bulunamadı": "No live matches found",
    "Seçilen ligde canlı maç bulunamadı": "No live matches in selected league",
    "Canlı maçlar yüklenirken bir hata oluştu": "Error loading live matches",
    "Puan Durumu Karşılaştırması": "Standings Comparison",
    "Takım İstatistikleri": "Team Stats",
    "Puan durumu bilgisi bulunamadı": "No standings information found",
    "Puan durumu bilgisi alınırken bir hata oluştu": "Error loading standings information",
    "sıra": "position",
    "puan": "points",
    "Oynanan": "Matches",
    "G": "W",
    "B": "D",
    "M": "L",
    "A": "GF",
    "Y": "GA",
    "Tamamlandı": "Completed",
    "Bu maç için istatistik verisi bulunamadı": "No statistical data found for this match",
    "İstatistik verileri yüklenirken hata oluştu": "Error loading statistical data",
    "Bu maç için kadro verisi bulunamadı": "No squad data found for this match",
    "Maç tahmini son 10 maça dayanmaktadır": "Match prediction based on last 10 matches",
    "Daha fazla maç verisi gerekli": "More match data needed",
    "Üst/Alt Marketleri": "Over/Under Markets",
    "Karşılıklı Gol": "Both Teams To Score",
    "En az 1 gol": "At least 1 goal",
    "En az 2 gol": "At least 2 goals",
    "3 veya daha fazla gol": "3 or more goals",
    "4 veya daha fazla gol": "4 or more goals",
    "5 veya daha fazla gol": "5 or more goals",
    "Son 10 maç ve H2H analizine dayalı": "Based on last 10 matches and H2H analysis",
    "* Tahminler son 10 maç ve H2H analizine dayanmaktadır": "* Predictions are based on last 10 matches and H2H analysis",
    "Son 10 maç analizine göre, en az 1 gol olma olasılığı çok yüksek.": "Based on the last 10 matches analysis, the probability of at least 1 goal is very high.",
    "Son 10 maç analizine göre, gol olmama olasılığı yüksek.": "Based on the last 10 matches analysis, the probability of no goals is high.",
    "İki takımın son 10 maç trendleri bu maçta en az 2 gol olacağını gösteriyor.": "The trends from the last 10 matches of both teams suggest at least 2 goals in this match.",
    "İki takımın son 10 maç trendlerine göre bu maçta en fazla 1 gol olabilir.": "According to the last 10 matches trends of both teams, there might be at most 1 goal in this match.",
    "Maçta 3 veya daha fazla gol olma olasılığı çok yüksek. Son 10 maç ve H2H analizi bunu güçlü şekilde destekliyor.": "The probability of 3 or more goals is very high. This is strongly supported by the last 10 matches and H2H analysis.",
    "Maçta 3+ gol bekleniyor. Son 10 maç ve H2H analizinde yüksek gol trendi var.": "Expecting 3+ goals. There",
    "Maçta 0-2 gol arası bekleniyor. Son 10 maç ve H2H analizinde düşük gol trendi var.": "Expecting 0-2 goals. There",
    "Son 10 maç verilerine göre yüksek skorlu bir maç olabilir.": "Based on the last 10 matches data, this could be a high-scoring match.",
    "Son 10 maç verilerine göre, maçta en fazla 3 gol bekleniyor.": "Based on the last 10 matches data, at most 3 goals are expected in the match.",
    "Son 10 maç ve H2H analizine göre, bu çok gollü bir maç olabilir.": "According to the last 10 matches and H2H analysis, this could be a match with many goals.",
    "İki takım da gol atma eğiliminde, son 10 maç verisine göre KG Var bekleniyor.": "Both teams tend to score, expecting BTTS based on the last 10 matches data.",
    "Son 10 maç verisine göre, en az bir takımın gol atamama olasılığı yüksek.": "Based on the last 10 matches data, the probability of at least one team not scoring is high.",
    "Düşük skorlu ve KG Yok olan bir maç bekleniyor.": "Expecting a low-scoring match with no BTTS.",
    "en": "",
    "Veri yükleme hatası:": "",
    "Tüm futbol liglerini keşfedin, favori ligilerinizi seçin ve maçları takip edin.": "",
    "Kullanıcı Profili | Football App": "",
    "Hesap ayarlarınızı ve favori takımlarınızı yönetin.": "",
    "den gelen tamamlanmış maçlardan kazanan tahminleri oluştur\n        const realWinningPredictions: WinningPrediction[] = completedMatches\n          .map(match => {\n            // Gol sayılarını sayısal değere dönüştür\n            const homeGoals = parseInt(match.match_hometeam_score || \"0\")\n            const awayGoals = parseInt(match.match_awayteam_score || \"0\")\n            const totalGoals = homeGoals + awayGoals\n            \n            // Skora göre kazanan tahmin türünü belirle\n            let winningPredictions: { type: string; odd: number; profit: number }[] = []\n            \n            // 0.5 Alt/Üst kontrol\n            if (totalGoals > 0) {\n              winningPredictions.push({ \n                type: \"0.5 Üst\", \n                odd: 1.2 + Math.random() * 0.3, \n                profit: 30 + Math.floor(Math.random() * 20) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"0.5 Alt\", \n                odd: 2.5 + Math.random() * 1.0, \n                profit: 60 + Math.floor(Math.random() * 40) \n              })\n            }\n            \n            // 1.5 Alt/Üst kontrol\n            if (totalGoals > 1) {\n              winningPredictions.push({ \n                type: \"1.5 Üst\", \n                odd: 1.4 + Math.random() * 0.4, \n                profit: 40 + Math.floor(Math.random() * 30) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"1.5 Alt\", \n                odd: 2.2 + Math.random() * 0.8, \n                profit: 50 + Math.floor(Math.random() * 50) \n              })\n            }\n            \n            // 2.5 Alt/Üst kontrol\n            if (totalGoals > 2) {\n              winningPredictions.push({ \n                type: \"2.5 Üst\", \n                odd: 1.8 + Math.random() * 0.6, \n                profit: 45 + Math.floor(Math.random() * 40) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"2.5 Alt\", \n                odd: 1.7 + Math.random() * 0.6, \n                profit: 35 + Math.floor(Math.random() * 40) \n              })\n            }\n            \n            // KG Var/Yok kontrol\n            if (homeGoals > 0 && awayGoals > 0) {\n              winningPredictions.push({ \n                type: \"KG Var\", \n                odd: 1.6 + Math.random() * 0.5, \n                profit: 30 + Math.floor(Math.random() * 40) \n              })\n            } else {\n              winningPredictions.push({ \n                type: \"KG Yok\", \n                odd: 1.8 + Math.random() * 0.7, \n                profit: 40 + Math.floor(Math.random() * 45) \n              })\n            }\n            \n            // Rastgele bir kazanan tahmin seç (gerçek bir sistemde algoritmanın tahmini kullanılır)\n            const randomWinningPrediction = winningPredictions[Math.floor(Math.random() * winningPredictions.length)]\n            \n            return {\n              match_id: match.match_id,\n              match_date: match.match_date,\n              match_time: match.match_time,\n              match_hometeam_name: match.match_hometeam_name,\n              match_awayteam_name: match.match_awayteam_name,\n              match_hometeam_score: match.match_hometeam_score || \"0\",\n              match_awayteam_score: match.match_awayteam_score || \"0\",\n              team_home_badge: match.team_home_badge,\n              team_away_badge: match.team_away_badge,\n              league_name: match.league_name,\n              prediction_type: randomWinningPrediction.type,\n              odd: randomWinningPrediction.odd,\n              profit: randomWinningPrediction.profit,\n              success: true // Tüm tahminler başarılı (sadece kazanan tahminleri gösteriyoruz)\n            }\n          })\n        \n        // İstatistikleri hesapla\n        const calculatedStats = {\n          totalMatches: realWinningPredictions.length,\n          successRate: 92, // Algoritma başarı oranı %92 olarak sabit\n          totalProfit: realWinningPredictions.reduce((sum, p) => sum + p.profit, 0),\n          over25Success: realWinningPredictions.filter(p => p.prediction_type === \"2.5 Üst\").length,\n          under25Success: realWinningPredictions.filter(p => p.prediction_type === \"2.5 Alt\").length,\n          over15Success: realWinningPredictions.filter(p => p.prediction_type === \"1.5 Üst\").length,\n          under15Success: realWinningPredictions.filter(p => p.prediction_type === \"1.5 Alt\").length,\n          over05Success: realWinningPredictions.filter(p => p.prediction_type === \"0.5 Üst\").length,\n          under05Success: realWinningPredictions.filter(p => p.prediction_type === \"0.5 Alt\").length,\n          bttsSuccess: realWinningPredictions.filter(p => p.prediction_type === \"KG Var\").length,\n          noBttsSuccess: realWinningPredictions.filter(p => p.prediction_type === \"KG Yok\").length\n        }\n        \n        clearInterval(progressInterval)\n        setLoadingProgress(100)\n        \n        // Kısa bir gecikme ile yüklemeyi tamamla\n        setTimeout(() => {\n          setWinningPredictions(realWinningPredictions)\n          setStats(calculatedStats)\n          setLoading(false)\n        }, 500)\n      } catch (error) {\n        console.error(\"Error fetching winning predictions:\", error)\n        setError(\"Kazanan tahminler yüklenirken bir hata oluştu\")\n        setLoading(false)\n      }\n    }\n    \n    fetchWinningPredictions()\n  }, [])\n  \n  const formatDateForDisplay = (dateString: string) => {\n    try {\n      const date = new Date(dateString)\n      return format(date, \"d MMMM yyyy\", { locale: tr })\n    } catch (error) {\n      return dateString\n    }\n  }\n  \n  if (loading) {\n    return (\n      <div className=\"container mx-auto px-4 py-6 space-y-6\">\n        <h1 className=\"text-2xl font-bold text-green-400 glow-text-green\">{t(": "",
    " }}\n            ></div>\n            <div className=\"absolute inset-0 flex items-center justify-center\">\n              <span className=\"text-xl font-bold text-green-400\">{loadingProgress}%</span>\n            </div>\n          </div>\n          <div className=\"flex items-center space-x-2\">\n            <Loader2 className=\"w-5 h-5 text-green-400 animate-spin\" />\n            <p className=\"text-slate-300\">Kazanan tahminler yükleniyor...</p>\n          </div>\n          <div className=\"w-full max-w-md bg-slate-800/40 h-2 rounded-full overflow-hidden\">\n            <div \n              className=\"bg-gradient-to-r from-green-500 to-green-300 h-full transition-all duration-300\"\n              style={{ width: `${loadingProgress}%` }}\n            ></div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n  \n  return (\n    <div className=\"container mx-auto px-4 py-6 space-y-6\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-2xl font-bold text-green-400 glow-text-green\">{t(": "",
    ")}</h1>\n        <div className=\"flex flex-col items-end\">\n          <Badge className=\"bg-gradient-to-r from-yellow-600 to-yellow-400 text-white animate-pulse\">\n            <DollarSign className=\"w-4 h-4 mr-1\" />\n            ${stats.totalProfit.toFixed(2)} Kazanç\n          </Badge>\n          <div className=\"text-xs text-green-400 mt-1 font-semibold animate-bounce\">\n            Algoritma Kazandırdı!\n          </div>\n        </div>\n      </div>\n      \n      {error ? (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700/50 text-red-400\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      ) : (\n        <div className=\"space-y-6\">\n          {/* Algoritma İstatistikleri */}\n          <Card className=\"bg-slate-800/50 border-slate-700/50 overflow-hidden\">\n            <div className=\"absolute top-0 left-0 w-full h-1 bg-gradient-to-r from-green-400 to-green-300\"></div>\n            <CardHeader className=\"pb-2\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <Bot className=\"w-5 h-5 mr-2 text-green-400\" />\n                  <CardTitle className=\"text-lg text-green-400\">{t(": "",
    ")}</div>\n                  <div className=\"text-2xl font-bold text-yellow-400 flex items-center\">\n                    ${stats.totalProfit.toFixed(2)}\n                    <span className=\"text-xs ml-2 text-green-400 font-semibold animate-pulse\">\n                      Algoritma Kazandırdı!\n                    </span>\n                  </div>\n                </div>\n              </div>\n              \n              <div className=\"mt-4 grid grid-cols-3 md:grid-cols-6 gap-2\">\n                <StatBadge label={t(": "",
    ", {type: activePredictionType})}\n                        </p>\n                      </CardContent>\n                    </Card>\n                  ) : (\n                    filteredPredictions.map((prediction) => (\n                      <WinningPredictionCard key={prediction.match_id} prediction={prediction} />\n                    ))\n                  )}\n                </div>\n              </TabsContent>\n            </Tabs>\n          </div>\n        </div>\n      )}\n    </div>\n  )\n}\n\n// İstatistik rozeti bileşeni\nfunction StatBadge({ label, count, icon }: { label: string; count: number; icon?: React.ReactNode }) {\n  return (\n    <div className=\"bg-slate-700/20 rounded px-2 py-1 flex items-center justify-between hover:bg-slate-700/40 transition-colors cursor-pointer border border-slate-700/50\">\n      <div className=\"flex items-center\">\n        {icon && <span className=\"mr-1 text-green-400\">{icon}</span>}\n        <span className=\"text-xs text-slate-300\">{label}</span>\n      </div>\n      <span className=\"text-xs font-bold text-green-400\">{count}</span>\n    </div>\n  )\n}\n\nfunction WinningPredictionCard({ prediction }: { prediction: WinningPrediction }) {\n  return (\n    <Card className=\"bg-slate-800/50 border-slate-700/50 hover:border-green-600/50 transition-colors relative overflow-hidden group\">\n      <div className=\"absolute left-0 top-0 h-full w-1 bg-green-500\"></div>\n      <div className=\"absolute -right-12 -top-12 w-24 h-24 bg-green-500/10 rounded-full group-hover:scale-150 transition-transform duration-500\"></div>\n      \n      <CardContent className=\"p-4\">\n        <div className=\"flex items-center justify-between mb-3\">\n          <div className=\"flex items-center\">\n            <Badge variant=\"outline\" className=\"text-xs px-1 py-0 border-green-700/30 text-green-400 bg-green-900/20\">\n              {prediction.league_name}\n            </Badge>\n            <span className=\"text-xs text-slate-400 ml-2 flex items-center\">\n              <Clock className=\"w-3 h-3 mr-1\" />\n              {prediction.match_date} {prediction.match_time}\n            </span>\n          </div>\n          <Badge className=\"bg-gradient-to-r from-yellow-600 to-yellow-400 text-white\">\n            <DollarSign className=\"w-3 h-3 mr-1\" />\n            +${prediction.profit}\n          </Badge>\n        </div>\n        \n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n              {prediction.team_home_badge ? (\n                <img\n                  src={prediction.team_home_badge || \"/placeholder.svg\"}\n                  alt={prediction.match_hometeam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {prediction.match_hometeam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n            <span className=\"text-sm font-medium text-white truncate\">{prediction.match_hometeam_name}</span>\n          </div>\n\n          <div className=\"flex items-center justify-center mx-2\">\n            <div className=\"px-2 py-1 bg-slate-700/50 rounded-md\">\n              <span className=\"text-lg font-bold text-white\">{prediction.match_hometeam_score}</span>\n              <span className=\"text-xs mx-1 text-slate-400\">-</span>\n              <span className=\"text-lg font-bold text-white\">{prediction.match_awayteam_score}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 flex-1 justify-end min-w-0\">\n            <span className=\"text-sm font-medium text-white truncate text-right\">{prediction.match_awayteam_name}</span>\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n              {prediction.team_away_badge ? (\n                <img\n                  src={prediction.team_away_badge || \"/placeholder.svg\"}\n                  alt={prediction.match_awayteam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {prediction.match_awayteam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"mt-3 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <CheckCircle className=\"w-4 h-4 text-green-500 mr-2 animate-pulse\" />\n            <span className=\"text-sm font-medium text-green-400\">{prediction.prediction_type}</span>\n            <Badge variant=\"outline\" className=\"ml-2 text-xs px-1 py-0 border-yellow-600/30 text-yellow-400 bg-yellow-900/20\">\n              @{prediction.odd.toFixed(2)}\n            </Badge>\n          </div>\n          <div className=\"flex flex-col items-end\">\n            <Button variant=\"ghost\" size=\"sm\" className=\"text-xs text-green-400 hover:text-green-300 p-0 group-hover:translate-x-1 transition-transform\">\n              {t(": "",
    " last 10 matches and H2H\",\n    btts: \"BTTS\",\n    nobtts: \"No BTTS\",\n    average: \"Average\",\n    bttsProbability: \"BTTS Probability\",\n    bothTeamsScoring: \"Both teams are scoring\",\n    atLeastOneTeamNotScoring: \"At least one team is not scoring\",\n    home: \"Home\",\n    away: \"Away\",\n    noData: \"No data\",\n    league: \"League\",\n    favorite: \"Favorite\",\n    recommendedBet: \"Recommended Bet\",\n    over35: \"Over 3.5\",\n    under35: \"Under 3.5\",\n    over45: \"4.5 Üst\",\n    bttsAnalysis: \"BTTS Analysis\",\n    sonMacYok: \"No last matches\",\n    sonMaclarHata: \"Error loading last matches.\",\n    kullaniciProfili: \"User Profile\",\n    geri: \"Back\",\n    populer: \"Popular\",\n    favoriler: \"Favorites\",\n    tumu: \"Tümü\",\n    ligler: \"Leagues\",\n    takimAra: \"Search Team\",\n    ligVeyaTakimAra: \"Search league or team...\",\n    form: \"Form\",\n    sonuclar: \"Results\",\n    galibiyet: \"Win\",\n    beraberlik: \"Draw\",\n    maglubiyet: \"Loss\",\n    atilan: \"Scored\",\n    yenilen: \"Conceded\",\n    ekstraIstatistikler: \"Extra Stats\",\n    golYememe: \"Clean Sheets\",\n    golAtamama: \"Failed to Score\",\n    yorumlar: \"Comments\",\n    macIstatistikleriBulunamadi: \"No match statistics found.\",\n    macSayilariHata: \"Error updating match counts:\",\n    tamamlananMaclarHata: \"Error loading completed matches.\",\n    yaklasanMacBulunamadi: \"No upcoming match found.\",\n    apiHatasi: \"API Error.\",\n    yaklasanMaclarHata: \"Error loading upcoming matches.\",\n    cacheHatasi: \"Cache error.\",\n    yenilendi: \"Refreshed.\",\n    alternatifBahisler: \"Alternative Bets\",\n    marketOnerileri: \"Market Suggestions\",\n    enIyiBahisler: \"Best Bets\",\n    trendBahisciOnerileri: \"Trend Betting Tips\",\n    son10veH2H: \"Son 10 maç ve H2H analizine göre\",\n    yeterliVeriYok: \"Bahis için yeterli veri yok.\",\n    dahaFazlaMac: \"Daha fazla maç verisi gerekiyor.\",\n    enAz1Gol: \"En az 1 gol\",\n    enAz2Gol: \"En az 2 gol\",\n    ucVeDahaFazlaGol: \"3 veya daha fazla gol\",\n    dortVeDahaFazlaGol: \"4 veya daha fazla gol\",\n    besVeDahaFazlaGol: \"5 veya daha fazla gol\",\n    takimlarSon10veH2H: \"Takımların son 10 maçı ve H2H analizine göre\",\n    kgVar: \"KG Var\",\n    kgYok: \"KG Yok\",\n    ortalama: \"Ortalama\",\n    kgOlasiligi: \"KG Olasılığı\",\n    ikiTakimGolAtıyor: \"İki takım da gol atıyor\",\n    enAzBirTakimAtamiyor: \"En az bir takım gol atamıyor\",\n    evSahibi: \"Ev Sahibi\",\n    deplasman: \"Deplasman\",\n    veriYok: \"Veri yok\",\n    lig: \"Lig\",\n    favori: \"Favori\",\n    onerilenBahis: \"Önerilen Bahis\",\n    ucBuçukUst: \"3.5 Üst\",\n    ucBuçukAlt: \"3.5 Alt\",\n    dortBuçukUst: \"4.5 Üst\",\n    kgAnalizi: \"KG Analizi\",\n    noStatsFound: \"No statistics data found for this match.\",\n    statsLoadError: \"Error loading statistics data.\",\n    loadingStats: \"Loading statistics...\",\n    statistics: \"Statistics\",\n    noH2HData: \"No H2H data found.\",\n    h2hLoadError: \"Error loading H2H data.\",\n    loadingH2H: \"Loading H2H data...\",\n    goalAnalysis: \"Goal Analysis\",\n    totalMatches: \"Total Matches\",\n    recentMatches: \"Recent Matches\",\n    teamNotFoundInStandings: \"team not found in standings\",\n    bothTeamsNotFound: \"Both teams not found in standings\",\n    standingsDataNotFound: \"Standings data not found\",\n    standingsLoadError: \"Error loading standings data\",\n    loadingStandingsData: \"Loading standings...\",\n    teamsStandingsNotFound: \"Teams standings data not found\",\n    fullTable: \"Full Table\",\n    team: \"Team\",\n    position: \"Position\",\n    matchesPlayedShort: \"M/W/D/L\",\n    goalDifference: \"Goal Difference\",\n    teams: \"Teams\",\n    goalsFor: \"Goals For\",\n    goalsAgainst: \"Goals Against\",\n    points: \"Points\",\n    starPlayers: \"Star Players\",\n    noStarPlayersFound: \"No star players data found.\",\n    errorLoadingStarPlayers: \"Error loading star players data.\",\n    assists: \"Assists\",\n    turkish: \"Turkish\",\n    english: \"English\",\n    german: \"German\",\n    french: \"French\",\n    spanish: \"Spanish\",\n    \n    // User Profile\n    userProfile: \"User Profile\",\n    manageAccountSettings: \"Manage your account settings and favorite teams\",\n    profile: \"Profile\",\n    favorites: \"Favorites\",\n    settings: \"Settings\",\n    username: \"Username\",\n    enterUsername: \"Enter your username\",\n    email: \"Email\",\n    enterEmail: \"Enter your email\",\n    logout: \"Log Out\",\n    save: \"Save\",\n    saveSettings: \"Save Settings\",\n    settingsSaved: \"Settings saved successfully\",\n    notificationsDescription: \"Turn on to receive notifications for match events\",\n    darkModeDescription: \"Turn on to use the app in dark mode\",\n    searchTeam: \"Search for team\",\n    noResults: \"No results found\",\n    myFavoriteTeams: \"My Favorite Teams\",\n    noFavoriteTeamsYet: \"You haven": "",
    "den büyük transfer hamlesi!\",\n    transferNewsTitle2: \"Galatasaray derbide son dakika galibiyeti aldı\",\n    transferNewsTitle3: \"Beşiktaş": "",
    "dan Avrupa yolunda kritik galibiyet\",\n    transferNewsTitle5: \"Süper Lig": "",
    "den hakemler için yeni karar\",\n    transferNewsTitle9: \"Avrupa Ligleri": "",
    "i Temizle\",\n    finishedMatches: \"Tamamlanan Maçlar\",\n    today: \"Bugün\",\n    tomorrow: \"Yarın\",\n    thisWeek: \"Bu Hafta\",\n    yesterdayMatches: \"Dünün Maçları\",\n    todayMatches: \"Bugünün Maçları\",\n    noFinishedMatchesToday: \"Bugün tamamlanan maç yok\",\n    noFinishedMatchesYesterday: \"Dün tamamlanan maç yok\",\n    matchesWillAppear: \"Maçlar yakında burada görünecek.\",\n    loadingMatches: \"Maçlar yükleniyor...\",\n    matchesNotFinishedYet: \"Maçlar henüz tamamlanmadı.\",\n    noFinishedMatchToday: \"Bugün tamamlanan maç yok.\",\n    finishedMatchLoadError: \"Tamamlanan maçlar yüklenirken hata.\",\n    upcomingMatchNotFound: \"Yaklaşan maç bulunamadı.\",\n    apiError: \"API Hatası.\",\n    upcomingMatchLoadError: \"Yaklaşan maçlar yüklenirken hata.\",\n    cacheSuccess: \"IndexedDB": "",
    "lendi ({{count}} maç)\",\n    cacheError: \"Cache hatası.\",\n    refreshed: \"Yenilendi. \",\n    matchStatisticsNotFound: \"Maç istatistikleri bulunamadı.\",\n    alternativeBets: \"Alternatif Bahisler\",\n    marketSuggestions: \"Market Önerileri\",\n    bestBets: \"En İyi Bahisler\",\n    trendBettingTips: \"Trend Bahisçi Önerileri\",\n    risk: \"Risk\",\n    basedOnLast10MatchesAndH2H: \"Based on last 10 matches and H2H\",\n    notEnoughDataForBets: \"Not enough data for bets.\",\n    moreMatchesNeeded: \"More matches needed.\",\n    ": "",
    "mız doğru tahminler sağlamak için binlerce maçı analiz eder\",\n    realTime: \"Gerçek Zamanlı Analiz\",\n    algorithmWinning: \"Algoritma kazanma oranı: %78\",\n    scored: \"Atılan\",\n    conceded: \"Yenilen\",\n    yellow: \"Sarı\",\n    red: \"Kırmızı\",\n    loadingAnalysis: \"Analiz yükleniyor...\",\n    retryButton: \"Yeniden Dene\",\n    noAnalysisData: \"Analiz verisi bulunamadı.\",\n    lastFiveMatchAnalysis: \"Son 5 Maç Analizi\",\n    lastFiveMatchGoalsPerMatch: \"Gol Atma\",\n    lastFiveMatchConcededPerMatch: \"Gol Yeme\",\n    lastFiveMatchTotalGoals: \"Toplam Goller\",\n    specialStats: \"Özel İstatistikler\",\n    lastMatches: \"Son Maçlar\",\n    analysisComment: \"Analiz Yorumu\",\n    risingFormText: \"{{teamName}} son maçlarda yükselen bir form grafiği çiziyor. Maç başına {{avgScored}} gol ortalaması ile etkili bir hücum performansı gösteriyorlar.\",\n    decliningFormText: \"{{teamName}} son maçlarda düşüş eğiliminde. Maç başına {{avgConceded}} gol yiyorlar ve savunmada zorluk yaşıyorlar.\",\n    stableFormText: \"{{teamName}} son 5 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.\",\n    lastFiveCleanSheetsComment: \"Son 5 maçta {{count}} kez gol yemeden maçı tamamladılar.\",\n    lastFiveFailedToScoreComment: \"Son 5 maçta {{count}} kez gol atamadılar.\",\n\n    // Risk levels\n    low: \"Düşük\",\n    lowMedium: \"Düşük-Orta\",\n    medium: \"Orta\",\n    mediumHigh: \"Orta-Yüksek\",\n    high: \"Yüksek\",\n    veryHigh: \"Çok Yüksek\",\n    veryLow: \"Çok Düşük\",\n\n    // Additional translations\n    matchLabel: \"Maç\",\n    liveLeagues: \"Canlı Ligler\",\n    liveLeague: \"Canlı Lig\",\n    pointsDifference: \"Puan Farkı\",\n    pointsLabel: \"puan\",\n    matchesLabel: \"Maç\",\n    goalsForAgainstShort: \"A/Y\",\n\n    // UI Actions\n    add: \"Ekle\",\n    remove: \"Kaldır\",\n    addFavoriteLeague: \"Favori Lig Ekle\",\n    addToFavorites: \"Favorilere Ekle\",\n    removeFromFavorites: \"Favorilerden Kaldır\",\n\n    // League UI\n    noLeaguesInSelectedCountry: \"Seçilen ülkede lig bulunamadı\",\n    showAllCountries: \"Tüm Ülkeleri Göster\",\n    selected: \"Seçildi\",\n    \n    // Match Squad\n    loadingSquad: \"Kadro bilgisi yükleniyor...\",\n    matchSquad: \"Maç Kadrosu\",\n    startingLineup: \"İlk 11\",\n    substitutes: \"Yedekler\",\n    coach: \"Teknik Direktör\",\n    goalkeeper: \"Kaleci\",\n    defender: \"Defans\",\n    midfielder: \"Orta Saha\",\n    forward: \"Forvet\",\n    refresh: \"Yenile\",\n    \n    // Top Scorers\n    topScorers: \"Gol Krallığı\",\n    loadingTopScorers: \"Gol krallığı yükleniyor...\",\n    matchesShort: \"maç\",\n    \n    // Team Lineup\n    lineups: \"Kadrolar\",\n    loadingLineups: \"Kadrolar yükleniyor...\",\n    noLineupData: \"Kadro bilgisi bulunamadı.\",\n    unknown: \"Bilinmiyor\",\n    \n    // Live Matches\n    checkBackLater: \"Daha sonra tekrar kontrol edin.\",\n    predictionComingSoon: \"Tahmin özelliği yakında gelecek.\",\n    hide: \"Gizle\",\n    \n    // Comments\n    comments: \"Yorumlar\",\n    user: \"Kullanıcı\",\n    noCommentsYet: \"Henüz yorum yok\",\n    writeYourComment: \"Yorumunuzu yazın...\",\n    addComment: \"Yorum Yap\",\n\n    // Prediction Algorithm\n    doubleChanceX: \"Çifte Şans X\",\n    highDrawProbability: \"Beraberlik güçlü bir olasılık olarak görünüyor.\",\n  },\n}\n\ntype Language = \"en\" | \"tr\"\ntype TranslationKey = keyof typeof translations.en\n\ninterface LanguageContextType {\n  language: Language\n  setLanguage: (language: Language) => void\n  t: (key: TranslationKey, params?: Record<string, any>) => string\n}\n\nconst LanguageContext = createContext<LanguageContextType | undefined>(undefined)\n\nexport function LanguageProvider({ children }: { children: React.ReactNode }) {\n  const [language, setLanguage] = useState<Language>(\"en\")\n\n  // Load language preference from localStorage on client side\n  useEffect(() => {\n    const savedLanguage = localStorage.getItem(\"language\") as Language\n    if (savedLanguage && (savedLanguage === \"en\" || savedLanguage === \"tr\")) {\n      setLanguage(savedLanguage)\n    }\n  }, [])\n\n  // Save language preference to localStorage and sync with user settings\n  useEffect(() => {\n    localStorage.setItem(\"language\", language)\n    \n    // Dil değiştiğinde localStorage": "",
    "4.5 Üst": "",
    "Son 10 maç ve H2H analizine göre": "",
    "Bahis için yeterli veri yok.": "",
    "Daha fazla maç verisi gerekiyor.": "",
    "Takımların son 10 maçı ve H2H analizine göre": "",
    "KG Olasılığı": "",
    "İki takım da gol atıyor": "",
    "En az bir takım gol atamıyor": "",
    "Veri yok": "",
    "Lig": "",
    "Önerilen Bahis": "",
    "3.5 Üst": "",
    "3.5 Alt": "",
    "Fenerbahçe'den büyük transfer hamlesi!": "",
    "Beşiktaş'ın yıldızı 3 hafta sahalardan uzak kalacak": "",
    "Trabzonspor'dan Avrupa yolunda kritik galibiyet": "",
    "Süper Lig'de şampiyonluk yarışı kızışıyor": "",
    "TFF'den hakemler için yeni karar": "",
    "Avrupa Ligleri'nde haftanın maçları": "",
    "{{teamName}} son maçlarda yükselen bir trend içinde.": "",
    "{{teamName}} düşüş trendinde, maç başına ortalama {{avgConceded}} gol yiyor.": "",
    "{{teamName}} istikrarlı bir performans sergiliyor: {{wins}}G, {{draws}}B, {{losses}}L.": "",
    "Son 10 maçta {{count}} kez gol yemedi.": "",
    "Son 10 maçta {{count}} kez gol atamadı.": "",
    "Tüm Ligler Görüntüleniyor": "",
    "Ligler yükleniyor...": "",
    "Tüm ligler ve ülkeler": "",
    "Lig Önizleme": "",
    "Lig Seçin": "",
    "Sıra": "",
    "Atılan Gol": "",
    "Değişiklikleri Uygula": "",
    "Ayarları Kaydet": "",
    "Maç sayıları güncellenirken hata oluştu:": "",
    "Devre Arası": "",
    "Canlı maç verisi çekilirken hata oluştu": "",
    "Puan durumu yüklenirken bir hata oluştu": "",
    "Takım form verileri yüklenirken bir hata oluştu": "",
    "Takım form verileri güncellenirken bir hata oluştu": "",
    "Kadro verisi yüklenirken bir hata oluştu": "",
    "Yıldız oyuncular yüklenirken bir hata oluştu": "",
    "Veri bulunamadı": "",
    "Maç bulunamadı": "",
    "Karşılıklı Maç Analizi": "",
    "Takım Analizi": "",
    "Maç Analizi": "",
    "Sıra Farkı": "",
    "Puan Farkı": "",
    "Maç Tahmini": "",
    "Canlı Tahmin": "",
    "Gol olma olasılığı": "",
    "Gol olmama olasılığı": "",
    "Karşılıklı gol olma olasılığı": "",
    "En az bir takımın gol atamama olasılığı": "",
    "2+ gol olma olasılığı": "",
    "3+ gol olma olasılığı": "",
    "Son 10 maç verilerine göre tahmin": "",
    "H2H sonuçlarına göre tahmin": "",
    "Yeterli veri olmadığından tahmin oluşturulamadı": "",
    "Puan durumu yükleniyor...": "",
    "Tahminler yükleniyor...": "",
    "Tüm Maçlar": "",
    "Tamamlanmış Maçlar": "",
    "Tahmin Yap": "",
    "Maç istatistikleri bulunamadı": "",
    "Analiz Et": "",
    "Tahmin Et": "",
    "Daha Fazla Maç Yükle": "",
    "Tamamlanan Maçlar": "",
    "Bu Hafta": "",
    "Dünün Maçları": "",
    "Bugünün Maçları": "",
    "Bugün tamamlanan maç yok": "",
    "Dün tamamlanan maç yok": "",
    "Maçlar yakında burada görünecek.": "",
    "Maçlar yükleniyor...": "",
    "Maçlar henüz tamamlanmadı.": "",
    "Bugün tamamlanan maç yok.": "",
    "Tamamlanan maçlar yüklenirken hata.": "",
    "Yaklaşan maç bulunamadı.": "",
    "API Hatası.": "",
    "Yaklaşan maçlar yüklenirken hata.": "",
    "IndexedDB'ye cache'lendi ({{count}} maç)": "",
    "Cache hatası.": "",
    "Maç istatistikleri bulunamadı.": "",
    "Market Önerileri": "",
    "En İyi Bahisler": "",
    "Trend Bahisçi Önerileri": "",
    "Bu maç için istatistik verisi bulunamadı.": "",
    "İstatistik verisi yüklenirken bir hata oluştu.": "",
    "İstatistikler yükleniyor...": "",
    "H2H verisi bulunamadı.": "",
    "H2H verisi yüklenirken bir hata oluştu.": "",
    "H2H verisi yükleniyor...": "",
    "Toplam Maç": "",
    "Son Maçlar": "",
    "takımı puan durumunda bulunamadı": "",
    "Her iki takım da puan durumunda bulunamadı": "",
    "Takımların puan durumu bilgisi bulunamadı": "",
    "Takım": "",
    "Takımlar": "",
    "Atılan": "",
    "Yıldız Oyuncular": "",
    "Yıldız oyuncu verisi bulunamadı.": "",
    "Yıldız oyuncular yüklenirken bir hata oluştu.": "",
    "Türkçe": "",
    "İngilizce": "",
    "Fransızca": "",
    "İspanyolca": "",
    "Kullanıcı Profili": "",
    "Hesap ayarlarınızı ve favori takımlarınızı yönetin": "",
    "Kullanıcı Adı": "",
    "Kullanıcı adınızı girin": "",
    "Çıkış Yap": "",
    "Ayarlar başarıyla kaydedildi": "",
    "Maç olayları için bildirim almak istiyorsanız açın": "",
    "Uygulamayı karanlık modda kullanmak için açın": "",
    "Takım ara": "",
    "Sonuç bulunamadı": "",
    "Favori Takımlarım": "",
    "Henüz favori takım eklemediniz. Yukarıdan takım arayarak favorilerinize ekleyebilirsiniz.": "",
    "Takım zaten favorilerde": "",
    "{{teamName}} zaten favori takımlarınızda bulunuyor.": "",
    "Takım eklendi": "",
    "{{teamName}} favori takımlarınıza eklendi.": "",
    "Takım kaldırıldı": "",
    "Takım favori listesinden kaldırıldı.": "",
    "Bildirimler açıldı": "",
    "Artık maç olayları için bildirim alacaksınız.": "",
    "Bildirim almak için tarayıcı izinlerini kontrol edin.": "",
    "Tercih ettiğiniz dili seçin": "",
    "canlı maçları görüntüleniyor": "",
    "Favori ligler yüklenirken hata oluştu:": "",
    "%100 Geri Ödeme": "",
    "Tahmin Geçmişi": "",
    "İsabet": "",
    "Maçları görüntülemek için bir lig seçin": "",
    "Yukarıdaki lig kartlarına tıklayarak canlı maçları görüntüleyebilirsiniz": "",
    "lig": "",
    "sonuç bulundu": "",
    "için": "",
    "için sonuç bulunamadı": "",
    "Ülke Seç": "",
    "Özel Tahminler": "",
    "VIP Analiz": "",
    "Tüm Ligleri Göster": "",
    "lig daha": "",
    "Yapay zeka destekli futbol analizi ve tahminleri": "",
    "Derin Öğrenme AI": "",
    "AI'mız doğru tahminler sağlamak için binlerce maçı analiz eder": "",
    "Gerçek Zamanlı Analiz": "",
    "Algoritma kazanma oranı: %78": "",
    "Sarı": "",
    "Kırmızı": "",
    "Analiz yükleniyor...": "",
    "Analiz verisi bulunamadı.": "",
    "Son 5 Maç Analizi": "",
    "Özel İstatistikler": "",
    "Analiz Yorumu": "",
    "{{teamName}} son maçlarda yükselen bir form grafiği çiziyor. Maç başına {{avgScored}} gol ortalaması ile etkili bir hücum performansı gösteriyorlar.": "",
    "{{teamName}} son maçlarda düşüş eğiliminde. Maç başına {{avgConceded}} gol yiyorlar ve savunmada zorluk yaşıyorlar.": "",
    "{{teamName}} son 5 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.": "",
    "Son 5 maçta {{count}} kez gol yemeden maçı tamamladılar.": "",
    "Son 5 maçta {{count}} kez gol atamadılar.": "",
    "Düşük": "",
    "Düşük-Orta": "",
    "Orta-Yüksek": "",
    "Yüksek": "",
    "Çok Yüksek": "",
    "Çok Düşük": "",
    "Canlı Ligler": "",
    "Canlı Lig": "",
    "Kaldır": "",
    "Favori Lig Ekle": "",
    "Favorilerden Kaldır": "",
    "Seçilen ülkede lig bulunamadı": "",
    "Tüm Ülkeleri Göster": "",
    "Seçildi": "",
    "Kadro bilgisi yükleniyor...": "",
    "Maç Kadrosu": "",
    "İlk 11": "",
    "Teknik Direktör": "",
    "Gol Krallığı": "",
    "Gol krallığı yükleniyor...": "",
    "maç": "",
    "Kadrolar yükleniyor...": "",
    "Kadro bilgisi bulunamadı.": "",
    "Daha sonra tekrar kontrol edin.": "",
    "Tahmin özelliği yakında gelecek.": "",
    "Kullanıcı": "",
    "Henüz yorum yok": "",
    "Yorumunuzu yazın...": "",
    "Çifte Şans X": "",
    "Beraberlik güçlü bir olasılık olarak görünüyor.": "",
    "galibiyet": "",
    "beraberlik": "",
    "Maç detayları yüklenirken hata:": "",
    "onMatchSelect callback tanımlı değil!": "",
    "`}\n          </Badge>\n        </div>\n\n        <div className=\"flex items-center justify-between\">\n          <div className=\"flex items-center space-x-2 flex-1 min-w-0\">\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0\">\n              {match.team_home_badge ? (\n                <img\n                  src={match.team_home_badge || \"/placeholder.svg\"}\n                  alt={match.match_hometeam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {match.match_hometeam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n            <span className=\"text-sm font-medium text-white truncate\">{match.match_hometeam_name}</span>\n          </div>\n\n          <div className=\"flex items-center justify-center mx-2\">\n            <div className=\"px-2 py-1 bg-slate-700/50 rounded-md\">\n              <span className=\"text-lg font-bold text-white\">{homeScore}</span>\n              <span className=\"text-xs mx-1 text-slate-400\">-</span>\n              <span className=\"text-lg font-bold text-white\">{awayScore}</span>\n            </div>\n          </div>\n\n          <div className=\"flex items-center space-x-2 flex-1 justify-end min-w-0\">\n            <span className=\"text-sm font-medium text-white truncate text-right\">{match.match_awayteam_name}</span>\n            <div className=\"w-6 h-6 overflow-hidden rounded-full bg-slate-700 flex-shrink-0\">\n              {match.team_away_badge ? (\n                <img\n                  src={match.team_away_badge || \"/placeholder.svg\"}\n                  alt={match.match_awayteam_name}\n                  className=\"object-cover w-full h-full\"\n                  loading=\"lazy\"\n                  onError={(e) => {\n                    ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                  }}\n                />\n              ) : (\n                <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                  {match.match_awayteam_name.substring(0, 1)}\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n\n        {match.match_stadium && (\n          <div className=\"mt-2 flex items-center justify-center text-xs text-slate-400\">\n            <MapPin className=\"w-3 h-3 mr-1\" />\n            <span className=\"truncate\">{match.match_stadium}</span>\n          </div>\n        )}\n\n        <div className=\"mt-3 flex gap-2\">\n          <Button\n            size=\"sm\"\n            variant=\"outline\"\n            className=\"w-full text-xs bg-red-900/30 border-red-700/30 text-red-400 hover:bg-red-800/50\"\n            onClick={e => {\n              e.stopPropagation();\n              onDetailsClick(match);\n            }}\n          >\n            <span className=\"w-2 h-2 rounded-full bg-red-500 mr-2 animate-pulse\"></span>\n            {t(": "",
    ")}</span>\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Takımı puan durumu listesinde bulmak için yardımcı fonksiyon\nconst findTeamInStandings = async (standings: any[], teamId: string, teamName: string) => {\n  // Önce ID ile eşleşme ara\n  let teamStanding = standings.find((item: any) => {\n    return item.team_id === teamId || \n           item.team_id === parseInt(teamId) || \n           item.team_id === teamId.toString();\n  });\n  \n  // ID ile bulunamadıysa, takım adı ile ara (tam veya kısmi eşleşme)\n  if (!teamStanding) {\n    // Takım adını küçük harfe çevir ve normalize et\n    const normalizedTeamName = teamName.toLowerCase().trim();\n    \n    teamStanding = standings.find((item: any) => {\n      // Takım adı tam eşleşme\n      if (item.team_name && item.team_name.toLowerCase().trim() === normalizedTeamName) {\n        return true;\n      }\n      \n      // Kısmi eşleşme (takım adı diğerini içeriyor mu?)\n      if (item.team_name && \n          (item.team_name.toLowerCase().includes(normalizedTeamName) || \n           normalizedTeamName.includes(item.team_name.toLowerCase()))) {\n        return true;\n      }\n      \n      return false;\n    });\n  }\n  \n  if (teamStanding) {\n    return {\n      position: parseInt(teamStanding.overall_league_position) || 0,\n      points: parseInt(teamStanding.overall_league_PTS) || 0,\n      played: parseInt(teamStanding.overall_league_payed) || 0,\n      won: parseInt(teamStanding.overall_league_W) || 0,\n      drawn: parseInt(teamStanding.overall_league_D) || 0,\n      lost: parseInt(teamStanding.overall_league_L) || 0,\n      goalsFor: parseInt(teamStanding.overall_league_GF) || 0,\n      goalsAgainst: parseInt(teamStanding.overall_league_GA) || 0\n    };\n  }\n  \n  return null;\n};\n\n// API": "",
    "den takımın lig bilgilerini çek\n    if (!leagueId) {\n      // Takımın lig bilgisi yoksa, varsayılan bir lig ID": "",
    "si varsayılan olarak\n    }\n    \n    // Ligin puan durumunu çek\n    const standings = await getStandings(leagueId);\n    \n    if (!Array.isArray(standings) || standings.length === 0) {\n      // Alternatif ligler denenebilir\n      const alternativeLeagueIds = [\"148\", \"152\", \"302\", \"175\", \"207\"];\n      \n      // Eğer verilen lig ID": "",
    "li alternatif lig için hata:`, e);\n          }\n        }\n      }\n      \n      return {\n        position: 0,\n        points: 0,\n        played: 0,\n        won: 0,\n        drawn: 0,\n        lost: 0,\n        goalsFor: 0,\n        goalsAgainst: 0\n      };\n    }\n    \n    // Takımı puan durumu listesinde ara\n    return await findTeamInStandings(standings, teamId, teamName);\n  } catch (error) {\n    console.error(`Error fetching team standings for ${teamName}:`, error);\n    // Hata durumunda boş değerler döndür\n    return {\n      position: 0,\n      points: 0,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0\n    };\n  }\n};\n\nconst StandingsComparison = ({\n  homeTeamId,\n  awayTeamId,\n  homeTeam,\n  awayTeam,\n  leagueId,\n}: {\n  homeTeamId: string\n  awayTeamId: string\n  homeTeam: string\n  awayTeam: string\n  leagueId?: string\n}) => {\n  const { t } = useTranslation()\n  const [homeStanding, setHomeStanding] = useState<any>(null)\n  const [awayStanding, setAwayStanding] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchStandings = async () => {\n      try {\n        const [homeData, awayData] = await Promise.all([\n          getTeamStandings(homeTeamId, homeTeam, leagueId), \n          getTeamStandings(awayTeamId, awayTeam, leagueId)\n        ]);\n        \n        setHomeStanding(homeData)\n        setAwayStanding(awayData)\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error)\n        setError(\"Puan durumu bilgisi alınırken bir hata oluştu\");\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStandings()\n  }, [homeTeamId, awayTeamId, homeTeam, awayTeam, leagueId])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-green-500\" />\n      </div>\n    )\n  }\n  \n  if (error) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-red-400\">{error}</p>\n      </div>\n    )\n  }\n\n  if (!homeStanding || !awayStanding) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">Puan durumu bilgisi bulunamadı</p>\n      </div>\n    )\n  }\n\n  const positionDiff = homeStanding.position - awayStanding.position\n  const pointsDiff = homeStanding.points - awayStanding.points\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Position Comparison */}\n      <Card className=\"bg-slate-800/50 border-slate-700/50\">\n        <CardContent className=\"p-3\">\n          <div className=\"grid grid-cols-3 gap-2 text-center\">\n            <div>\n              <div className=\"text-xs text-slate-400 mb-1\">{homeTeam}</div>\n              <Badge\n                className={`text-xs ${homeStanding.position <= awayStanding.position ? \"bg-green-600\" : \"bg-red-600\"}`}\n              >\n                {homeStanding.position}. sıra\n              </Badge>\n            </div>\n            <div className=\"flex flex-col items-center justify-center\">\n              <div className=\"text-xs text-slate-400 mb-1\">Sıra Farkı</div>\n              <div className=\"text-xs text-slate-400\">{Math.abs(positionDiff)} sıra</div>\n            </div>\n            <div>\n              <div className=\"text-xs text-slate-400 mb-1\">{awayTeam}</div>\n              <Badge\n                className={`text-xs ${awayStanding.position <= homeStanding.position ? \"bg-green-600\" : \"bg-red-600\"}`}\n              >\n                {awayStanding.position}. sıra\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Points Comparison */}\n      <Card className=\"bg-slate-800/50 border-slate-700/50\">\n        <CardContent className=\"p-3\">\n          <div className=\"grid grid-cols-3 gap-2 text-center\">\n            <div>\n              <div className=\"text-lg font-bold text-green-400\">{homeStanding.points}</div>\n              <div className=\"text-xs text-slate-400\">{t(": "",
    ")}:</span>\n                  <span className=\"text-white\">\n                    {awayStanding.goalsFor}/{awayStanding.goalsAgainst}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n// Ülke tipi\ninterface Country {\n  country_id: string;\n  country_name: string;\n  country_logo?: string;\n}\n\n// Lig tipi\ninterface League {\n  league_id: string;\n  league_name: string;\n  league_logo?: string;\n  country_id: string;\n  country_name: string;\n  country_logo?: string; // country_logo ekledim\n  has_live_match?: boolean;\n}\n\n// CSS sınıfları\nconst styles = {\n  hideScrollbar: `\n    scrollbar-width: none;\n    -ms-overflow-style: none;\n    &::-webkit-scrollbar {\n      display: none;\n    }\n  `,\n};\n\n// Favori ligler için local storage key\nconst FAVORITE_LEAGUES_KEY = \"favorite_leagues_v1\";\n\nexport function LiveMatchTracker({ initialMatchId }: { initialMatchId?: string }) {\n  const { t } = useTranslation()\n  const [matches, setMatches] = useState<Match[]>([])\n  const [filteredMatches, setFilteredMatches] = useState<Match[]>([])\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n  const [selectedMatch, setSelectedMatch] = useState<Match | null>(null)\n  const [autoRefresh, setAutoRefresh] = useState(true)\n  const [lastRefresh, setLastRefresh] = useState<Date | null>(null)\n  const [activeTab, setActiveTab] = useState(\"detaylar\")\n  const [showPredictionModal, setShowPredictionModal] = useState(false)\n  const [predictionMatch, setPredictionMatch] = useState<Match | null>(null)\n  const [showDetailsModal, setShowDetailsModal] = useState(false)\n  const [detailsMatch, setDetailsMatch] = useState<Match | null>(null)\n  const [detailsActiveTab, setDetailsActiveTab] = useState(\"detaylar\")\n  const [selectedLeague, setSelectedLeague] = useState<string | null>(null) // Başlangıçta hiçbir lig seçili değil\n  const [showLeaguesModal, setShowLeaguesModal] = useState(false)\n  const [selectedCountry, setSelectedCountry] = useState<string>(\"all-countries\")\n  const [favoriteLeagues, setFavoriteLeagues] = useState<string[]>([])\n  const [activeCategory, setActiveCategory] = useState<": "",
    ")\n  const [showAllLeagues, setShowAllLeagues] = useState(false)\n  const [upcomingMatchesCount, setUpcomingMatchesCount] = useState(0)\n  const [showLeaguesList, setShowLeaguesList] = useState(true)\n  const [showLiveMatchView, setShowLiveMatchView] = useState(false)\n  const [selectedLeagueMatches, setSelectedLeagueMatches] = useState<Match[]>([])\n  const [selectedLeagueName, setSelectedLeagueName] = useState<string>(\"\")\n  const [allApiLeagues, setAllApiLeagues] = useState<any[]>([]) // Tüm API liglerini tutmak için state\n  const [loadingLeagues, setLoadingLeagues] = useState(false) // Ligler yüklenirken gösterilecek loading state\n  // 1. allMatches dizisini oluştur (canlı + yaklaşan maçlar)\n  const [allMatches, setAllMatches] = useState<Match[]>([]);\n  // Ligler modalı için gösterilecek lig sayısı state": "",
    "den tüm ligleri çek\n  const fetchAllLeagues = useCallback(async () => {\n    try {\n      setLoadingLeagues(true);\n      const allLeaguesData = await getAllLeagues();\n      if (Array.isArray(allLeaguesData)) {\n        setAllApiLeagues(allLeaguesData);\n      }\n    } catch (error) {\n      console.error(\"Error fetching all leagues:\", error);\n    } finally {\n      setLoadingLeagues(false);\n    }\n  }, []);\n  \n  // Component mount olduğunda tüm ligleri çek\n  useEffect(() => {\n    fetchAllLeagues();\n  }, [fetchAllLeagues]);\n  \n  // Canlı maç görüntüleme arayüzünü aç\n  const openLiveMatchView = (leagueId: string, leagueName: string) => {\n    setSelectedLeague(null); // Ana sayfada maçları gösterme\n    closeLeaguesModal();\n    showLeagueSelectedNotification(`${leagueName} ${t(": "",
    ")}`);\n    // Tüm maçlar içinden filtrele\n    const leagueMatches = allMatches.filter(match => match.league_id === leagueId);\n    setShowLiveMatchView(true);\n    setSelectedLeagueMatches(leagueMatches);\n    setSelectedLeagueName(leagueName);\n  };\n  \n  // Favori ligleri local storage": "",
    "Bilinmeyen Ülke": "",
    "den çekilen tüm ligleri ekle\n    allApiLeagues.forEach(league => {\n      if (!leagueMap.has(league.league_id)) {\n        leagueMap.set(league.league_id, {\n          league_id: league.league_id,\n          league_name: league.league_name,\n          league_logo: league.league_logo,\n          country_id: league.country_id,\n          country_name: league.country_name,\n          country_logo: league.country_logo,\n          has_live_match: false\n        });\n        \n        // Ülke bilgilerini de ekle\n        if (!countryMap.has(league.country_name)) {\n          countryMap.set(league.country_name, {\n            country_id: league.country_id,\n            country_name: league.country_name,\n            country_logo: league.country_logo\n          });\n        }\n      }\n    });\n    \n    return {\n      leagues: Array.from(leagueMap.values()),\n      countries: Array.from(countryMap.values()),\n      allLeagues: Array.from(allLeaguesSet)\n    };\n  }, [matches, allApiLeagues]);\n  \n  // Ligleri maç sayısına göre sırala\n  const sortedLeagues = useMemo(() => {\n    return leagues\n      .map(league => ({\n        ...league,\n        matchCount: matches.filter(match => match.league_id === league.league_id).length,\n        isFavorite: favoriteLeagues.includes(league.league_id)\n      }))\n      // Sadece maçı olan ligleri filtrele\n      .filter(league => league.matchCount > 0)\n      .sort((a, b) => {\n        // Önce canlı maçı olan ligler\n        if (a.has_live_match && !b.has_live_match) return -1;\n        if (!a.has_live_match && b.has_live_match) return 1;\n        // Sonra maç sayısına göre\n        return b.matchCount - a.matchCount;\n      });\n  }, [leagues, matches, favoriteLeagues]);\n  \n  // Tüm ligleri göster - API": "",
    "}</span>\n                        </div>\n                      ))}\n                      {matches.filter(m => m.league_id === league.league_id).length === 0 && (\n                        <span className=\"text-xs text-slate-500\">Bu ligde şu an maç yok</span>\n                      )}\n                    </div>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Canlı Maçlar Kategorileri */}\n      <div className=\"flex border-b border-slate-700/50 mb-2\">\n        <button \n          className={`flex-1 py-2 text-xs font-medium ${activeCategory === ": "",
    ")} ({favoriteSortedLeagues.reduce((total: number, league) => total + league.matchCount, 0)})\n        </button>\n      </div>\n      \n      {/* Canlı Ligler Özeti */}\n      <div className=\"mt-2\">\n        <div className=\"flex items-center justify-between mb-2\">\n          <div className=\"flex items-center\">\n            {activeCategory === ": "",
    " && sortedLeagues.length > 0 && (\n            <span className=\"text-xs text-slate-400\">\n              {sortedLeagues.length} lig gösteriliyor\n              {upcomingMatchesCount > 0 && ` • ${upcomingMatchesCount} maç yaklaşıyor`}\n            </span>\n          )}\n          {activeCategory === ": "",
    " && (\n            <span className=\"text-xs text-slate-400\">\n              {favoriteSortedLeagues.length > 0 \n                ? `${favoriteSortedLeagues.length} favori lig` \n                : \"Henüz favori liginiz yok\"}\n            </span>\n          )}\n        </div>\n        \n        {showLeaguesList && (\n          <div className=\"grid grid-cols-2 gap-2\">\n            {/* Ligler Listesi - İlk 5 lig */}\n            {(activeCategory === ": "",
    " ? sortedLeagues : favoriteSortedLeagues)\n              .slice(0, showAllLeagues ? undefined : 5)\n              .map(league => (\n              <Card \n                key={league.league_id}\n                className={`cursor-pointer ${\n                  selectedLeague === league.league_id \n                    ? \"bg-red-900/30 border-red-600\" \n                    : \"bg-slate-800/50 border-slate-700/50 hover:border-red-600\"\n                }`}\n                onClick={() => {\n                  // Lig kartına tıklandığında, openLiveMatchView fonksiyonunu çağır\n                  if (league.matchCount > 0) {\n                    openLiveMatchView(league.league_id, league.league_name);\n                  } else {\n                    handleLeagueSelect(league.league_id);\n                  }\n                }}\n              >\n                <CardContent className=\"p-2\">\n                  <div className=\"flex items-center justify-between\">\n                    <div className=\"flex items-center w-full\">\n                      <div className=\"w-7 h-7 bg-slate-700 rounded-full flex items-center justify-center mr-1 relative flex-shrink-0\">\n                        {league.league_logo ? (\n                          <img \n                            src={league.league_logo} \n                            alt={league.league_name} \n                            className=\"w-5 h-5 object-contain\"\n                            loading=\"lazy\"\n                          />\n                        ) : (\n                          <Trophy className=\"w-3 h-3 text-red-400\" />\n                        )}\n                        {league.isFavorite && (\n                          <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-amber-500 rounded-full flex items-center justify-center\">\n                            <Heart className=\"w-2 h-2 text-white fill-white\" />\n                          </div>\n                        )}\n                        {league.matchCount > 0 && (\n                          <div className=\"absolute -bottom-1 -right-1 w-2 h-2 bg-red-600 rounded-full flex items-center justify-center animate-pulse\">\n                            <div className=\"w-1 h-1 bg-red-400 rounded-full\"></div>\n                          </div>\n                        )}\n                      </div>\n                      <div className=\"flex-1 min-w-0 mr-1\">\n                        <div className=\"text-[11px] font-medium text-white truncate\">\n                          {league.league_name}\n                        </div>\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"text-[9px] text-slate-400 truncate max-w-[60px]\">\n                            {league.country_name}\n                          </div>\n                          <Button\n                            variant=\"ghost\"\n                            size=\"sm\" \n                            className=\"h-4 p-0 px-1 ml-1 text-[8px] text-amber-400 hover:text-amber-300\"\n                            onClick={(e) => {\n                              e.stopPropagation();\n                              toggleFavoriteLeague(league.league_id);\n                              const message = league.isFavorite\n                                ? `${league.league_name} favorilerden kaldırıldı`\n                                : `${league.league_name} favorilere eklendi`;\n                              showLeagueSelectedNotification(message);\n                            }}\n                          >\n                            {league.isFavorite ? (\n                              <>\n                                <Heart className=\"w-2 h-2 mr-0.5 fill-amber-400\" />\n                                {t(": "",
    ")}\n                              </>\n                            )}\n                          </Button>\n                        </div>\n                      </div>\n                      <Badge className=\"bg-red-600 text-white text-[9px] px-1 py-0 ml-auto flex-shrink-0\">\n                        {league.matchCount}\n                      </Badge>\n                    </div>\n                  </div>\n                  \n                  {/* Maçları Gör butonu */}\n                  {league.matchCount > 0 && (\n                    <Button \n                      size=\"sm\"\n                      className=\"w-full mt-2 bg-green-500 hover:bg-green-600 text-white text-[10px] py-0 h-6\"\n                      onClick={(e) => {\n                        e.stopPropagation();\n                        openLiveMatchView(league.league_id, league.league_name);\n                      }}\n                    >\n                      <Trophy className=\"w-2 h-2 mr-1\" />\n                      {t(": "",
    ")}\n                    </Button>\n                  )}\n                </CardContent>\n              </Card>\n            ))}\n            \n            {/* Tüm Ligleri Göster Butonu */}\n            {activeCategory === ": "",
    " && favoriteSortedLeagues.length === 0 && (\n              <Card className=\"col-span-2 bg-slate-800/50 border-slate-700/50\">\n                <CardContent className=\"p-4 text-center\">\n                  <Star className=\"w-8 h-8 text-amber-500/50 mx-auto mb-2\" />\n                  <p className=\"text-sm text-slate-400 mb-2\">Henüz favori liginiz yok</p>\n                  <Button \n                    variant=\"outline\" \n                    size=\"sm\"\n                    className=\"bg-amber-900/30 border-amber-700/50 text-amber-400 hover:bg-amber-800/50\"\n                    onClick={() => setShowLeaguesModal(true)}\n                  >\n                    {t(": "",
    ")}\n                  </Button>\n                </CardContent>\n              </Card>\n            )}\n          </div>\n        )}\n      </div>\n      \n      {/* Platform Bilgilendirme Kartı */}\n      <Card className=\"relative overflow-hidden bg-gradient-to-br from-slate-900 via-blue-950 to-indigo-950 border-none shadow-xl mb-4\">\n        <div className=\"absolute inset-0 bg-grid-white/[0.05] bg-[size:20px_20px]\"></div>\n        <div className=\"absolute top-0 right-0 w-40 h-40 bg-blue-500/10 rounded-full blur-3xl\"></div>\n        <div className=\"absolute bottom-0 left-0 w-40 h-40 bg-green-500/10 rounded-full blur-3xl\"></div>\n        \n        <CardContent className=\"p-4 relative z-10\">\n          <div className=\"flex flex-col\">\n            {/* Başlık ve Pro rozeti */}\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <div className=\"relative mr-3\">\n                  <div className=\"w-12 h-12 bg-gradient-to-br from-blue-600 to-green-500 rounded-xl flex items-center justify-center rotate-3 shadow-lg transform-gpu\">\n                    <Sparkles className=\"w-6 h-6 text-white\" />\n                  </div>\n                  <div className=\"absolute -bottom-1 -right-1 w-6 h-6 bg-amber-500 rounded-full flex items-center justify-center shadow-lg\">\n                    <Trophy className=\"w-3 h-3 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"font-extrabold text-base bg-clip-text text-transparent bg-gradient-to-r from-green-400 via-blue-400 to-indigo-400 tracking-tight\">\n                    DÜNYANIN EN GENİŞ LİG KAPSAMI\n                  </h3>\n                  <div className=\"flex items-center mt-1\">\n                    <span className=\"text-xs text-slate-400\">Powered by</span>\n                    <span className=\"ml-1 text-xs font-bold text-blue-400\">AI Tahmin Motoru</span>\n                  </div>\n                </div>\n              </div>\n              <div className=\"flex-shrink-0\">\n                <Badge className=\"bg-gradient-to-r from-blue-600 to-indigo-600 text-white border-none px-2 py-1 shadow-lg\">\n                  PRO\n                </Badge>\n              </div>\n            </div>\n\n            {/* İstatistikler */}\n            <div className=\"grid grid-cols-2 gap-2 mb-3\">\n              <div className=\"bg-white/10 rounded-lg p-2 backdrop-blur-sm\">\n                <div className=\"text-2xl font-bold text-green-400\">950+</div>\n                <div className=\"text-xs text-slate-300\">{t(": "",
    ")}</div>\n              </div>\n              <div className=\"bg-white/10 rounded-lg p-2 backdrop-blur-sm\">\n                <div className=\"text-2xl font-bold text-amber-400\">1500+</div>\n                <div className=\"text-xs text-slate-300\">Günlük Tahmin</div>\n              </div>\n            </div>\n\n            {/* Dünyada ilk ve tek vurgusu */}\n            <div className=\"bg-gradient-to-r from-blue-900/50 to-indigo-900/50 rounded-lg p-3 backdrop-blur-sm mb-3 border-l-4 border-blue-500\">\n              <div className=\"text-center\">\n                <span className=\"text-xs text-slate-400 uppercase tracking-wider\">Dünyada</span>\n                <div className=\"text-base font-extrabold text-white my-1 tracking-tight\">İLK VE TEK</div>\n                <span className=\"text-xs text-slate-300\">gerçek zamanlı maç analiz platformu</span>\n              </div>\n            </div>\n\n            {/* Şeffaflık ve algoritma gücü mesajı */}\n            <div className=\"bg-white/5 rounded-lg p-2 backdrop-blur-sm mb-3 border border-blue-900/30\">\n              <div className=\"flex items-start\">\n                <div className=\"bg-green-500/20 p-1 rounded-md mr-2\">\n                  <Check className=\"w-3 h-3 text-green-400\" />\n                </div>\n                <p className=\"text-xs text-slate-300 leading-tight\">\n                  <span className=\"font-semibold text-blue-300\">Tamamen Şeffaf:</span> Tüm tahmin geçmişimiz açık ve denetlenebilir. Vaatler değil, <span className=\"underline decoration-green-400 decoration-dotted underline-offset-2\">kanıtlanmış sonuçlar!</span>\n                </p>\n              </div>\n            </div>\n\n            {/* SAHTE VERİ YOK, GERÇEK VERİ vurgusu */}\n            <div className=\"bg-gradient-to-r from-green-900/30 to-emerald-900/30 rounded-lg p-2 backdrop-blur-sm mb-3 border-2 border-green-600/40\">\n              <div className=\"flex items-center justify-between\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-green-500/30 p-1.5 rounded-full mr-2\">\n                    <AlertCircle className=\"w-3 h-3 text-green-400\" />\n                  </div>\n                  <div>\n                    <span className=\"text-xs font-bold uppercase text-green-400 tracking-wider\">SAHTE VERİ YOK</span>\n                    <span className=\"text-xs text-white mx-1\">|</span>\n                    <span className=\"text-xs font-bold uppercase text-green-400 tracking-wider\">SADECE GERÇEK VERİ</span>\n                  </div>\n                </div>\n                <div className=\"animate-pulse\">\n                  <Check className=\"w-4 h-4 text-green-400 fill-green-400/30\" />\n                </div>\n              </div>\n              <div className=\"mt-1.5 text-[10px] text-slate-300 leading-tight pl-7\">\n                <div className=\"flex items-center mb-1\">\n                  <div className=\"w-1 h-1 bg-green-500 rounded-full mr-1.5\"></div>\n                  <span>Geçmiş tüm tahminler <span className=\"font-semibold text-white\">kesintisiz</span> olarak görüntülenebilir</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-1 h-1 bg-green-500 rounded-full mr-1.5\"></div>\n                  <span>Kaybedilen tahminler dahil <span className=\"font-semibold text-white\">tüm sonuçlar açık</span> şekilde paylaşılır</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Kullanıcı deneyimi mesajı */}\n            <div className=\"bg-gradient-to-r from-amber-900/30 to-yellow-900/30 rounded-lg p-2 backdrop-blur-sm mb-3 border-2 border-amber-600/40\">\n              <div className=\"flex items-center justify-between mb-1.5\">\n                <div className=\"flex items-center\">\n                  <div className=\"bg-amber-500/30 p-1.5 rounded-full mr-2\">\n                    <Sparkles className=\"w-3 h-3 text-amber-400\" />\n                  </div>\n                  <span className=\"text-xs font-bold uppercase text-amber-400 tracking-wider\">ÖZEL GELİŞTİRİLEN ALGORİTMA</span>\n                </div>\n                <Badge className=\"bg-amber-600/50 text-white border-amber-500/30 px-1.5 py-0.5 text-[9px]\">\n                  <span className=\"font-mono\">5</span> YIL EĞİTİM\n                </Badge>\n              </div>\n              <div className=\"mt-1.5 text-[10px] text-slate-300 leading-tight pl-7\">\n                <div className=\"flex items-center mb-1\">\n                  <div className=\"w-1 h-1 bg-amber-500 rounded-full mr-1.5\"></div>\n                  <span>Hiçbir yerde bulunmayan <span className=\"font-semibold text-white\">özel yapay zeka teknolojisi</span> ile geliştirildi</span>\n                </div>\n                <div className=\"flex items-center\">\n                  <div className=\"w-1 h-1 bg-amber-500 rounded-full mr-1.5\"></div>\n                  <span>Tamamen özel geliştirilen algoritma <span className=\"font-semibold text-white\">8.7 milyon veri noktası</span> ile eğitildi</span>\n                </div>\n              </div>\n            </div>\n\n            {/* Pro Avantajlar */}\n            <div className=\"bg-gradient-to-r from-indigo-900/40 to-purple-900/40 rounded-lg p-2 backdrop-blur-sm mb-3 border-r-4 border-purple-600\">\n              <div className=\"flex justify-between items-center\">\n                <div className=\"flex items-center\">\n                  <span className=\"text-xs font-bold text-purple-300 mr-1\">PRO ÜYELİK AVANTAJLARI:</span>\n                  <span className=\"text-[10px] bg-purple-600/30 text-purple-300 px-1 py-0.5 rounded\">SINIRLI SÜRE</span>\n                </div>\n                <Heart className=\"w-3 h-3 text-red-400 fill-red-400 animate-pulse\" />\n              </div>\n              <div className=\"mt-1 grid grid-cols-3 gap-1\">\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">Özel Tahminler</span>\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">VIP Analiz</span>\n                <span className=\"text-[10px] bg-white/10 rounded px-1 py-0.5 text-center text-white\">{t(": "",
    ")}</span>\n              </div>\n            </div>\n\n            {/* Aksiyon butonları */}\n            <div className=\"flex items-center justify-between\">\n              <Button className=\"bg-gradient-to-r from-green-600 to-green-500 hover:from-green-500 hover:to-green-400 text-white border-none text-xs px-3 shadow-lg\">\n                <span className=\"w-1.5 h-1.5 rounded-full bg-white mr-1 animate-pulse\"></span>\n                {t(": "",
    ")}\n                </Badge>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      \n      {error ? (\n        <Alert variant=\"destructive\" className=\"bg-red-900/20 border-red-700/50 text-red-400\">\n          <AlertCircle className=\"w-4 h-4\" />\n          <AlertDescription>{error}</AlertDescription>\n        </Alert>\n      ) : (\n        <>\n          {/* showLiveMatchView aktifse maçları ana sayfada gösterme */}\n          {!showLiveMatchView && selectedLeague && filteredMatches.length === 0 ? (\n            <Card className=\"bg-slate-800 border-slate-700 border-red-700/50\">\n              <CardContent className=\"p-4 text-center\">\n                <div className=\"flex items-center justify-center text-red-400\">\n                  <AlertCircle className=\"w-4 h-4 mr-2\" />\n                  <p className=\"text-sm\">\n                    {matches.length > 0 \n                      ? t(": "",
    ")}\n                  </p>\n                </div>\n              </CardContent>\n            </Card>\n          ) : !showLiveMatchView && !selectedLeague ? (\n            // Hiçbir lig seçili değilse bilgilendirme mesajı göster\n            <Card className=\"bg-slate-800/50 border-slate-700/50\">\n              <CardContent className=\"p-4 text-center\">\n                <Trophy className=\"w-8 h-8 text-green-400/50 mx-auto mb-2\" />\n                <p className=\"text-sm text-slate-300 mb-2\">{t(": "",
    ")}\n                </p>\n              </CardContent>\n            </Card>\n          ) : !showLiveMatchView ? (\n            <div className=\"space-y-2\">\n              {filteredMatches.map(match => (\n                <div key={match.match_id} className=\"space-y-2\">\n                  <LiveMatchCard \n                    match={match} \n                    isSelected={selectedMatch?.match_id === match.match_id}\n                    onSelect={handleMatchSelect}\n                    setActiveTab={setActiveTab}\n                    activeTab={activeTab}\n                    onPredictionClick={handlePredictionClick}\n                    onDetailsClick={handleDetailsClick}\n                  />\n                </div>\n              ))}\n            </div>\n          ) : null}\n        </>\n      )}\n      \n      {/* Ligler Modal - Upcoming kısmındakine benzer şekilde düzenliyorum */}\n      {showLeaguesModal && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-3\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-2\">\n                <div className=\"w-8 h-8 bg-slate-700 rounded-full flex items-center justify-center\">\n                  <Trophy className=\"w-5 h-5 text-amber-400\" />\n                </div>\n                <div>\n                  <h3 className=\"text-sm font-bold text-white\">{t(": "",
    ")}\n                  </p>\n                </div>\n              </div>\n              <Button \n                variant=\"ghost\" \n                size=\"sm\" \n                className=\"h-8 w-8 p-0 rounded-full hover:bg-slate-700/50\"\n                onClick={closeLeaguesModal}\n              >\n                <X className=\"w-5 h-5 text-slate-400\" />\n              </Button>\n            </div>\n          </div>\n\n          {/* Arama ve Filtreleme */}\n          <div className=\"bg-slate-800/70 p-3 border-b border-slate-700/50\">\n            <div className=\"flex items-center space-x-2 mb-3\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-2 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-400\" />\n                <Input \n                  placeholder={t(": "",
    ")}`}\n                </div>\n              )}\n            </div>\n            \n            {/* Ülke Seçimi - Yatay Kaydırılabilir Liste */}\n            <div className=\"mb-2\">\n              <div className=\"flex items-center mb-2\">\n                <Globe className=\"w-4 h-4 mr-1 text-blue-400\" />\n                <span className=\"text-xs font-medium text-blue-400\">{t(": "",
    ")}</span>\n              </div>\n              \n              <div className=\"flex overflow-x-auto pb-2 space-x-2 hide-scrollbar\">\n                {/* Tüm Ülkeler Seçeneği */}\n                <div \n                  className={`flex-shrink-0 cursor-pointer p-2 rounded-lg flex flex-col items-center justify-center ${selectedCountry === \"all-countries\" ? \"bg-blue-900/30 border-2 border-blue-600\" : \"bg-slate-800 border border-slate-700 hover:border-blue-600\"}`}\n                  onClick={() => setSelectedCountry(\"all-countries\")}\n                >\n                  <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center mb-1 relative\">\n                    <Globe className=\"w-5 h-5 text-blue-400\" />\n                    {selectedCountry === \"all-countries\" && (\n                      <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center\">\n                        <Check className=\"w-3 h-3 text-white\" />\n                      </div>\n                    )}\n                  </div>\n                  <span className=\"text-xs text-white whitespace-nowrap\">{t(": "",
    ")}</span>\n                </div>\n                \n                {/* Ülkeler Listesi */}\n                {countries.map(country => (\n                  <div \n                    key={country.country_id}\n                    className={`flex-shrink-0 cursor-pointer p-2 rounded-lg flex flex-col items-center justify-center ${selectedCountry === country.country_id ? \"bg-blue-900/30 border-2 border-blue-600\" : \"bg-slate-800 border border-slate-700 hover:border-blue-600\"}`}\n                    onClick={() => setSelectedCountry(country.country_id)}\n                  >\n                    <div className=\"w-10 h-10 bg-slate-700 rounded-full flex items-center justify-center mb-1 relative\">\n                      {country.country_logo ? (\n                        <img\n                          src={country.country_logo}\n                          alt={country.country_name}\n                          className=\"w-8 h-8 object-contain rounded-full\"\n                          loading=\"lazy\"\n                        />\n                      ) : (\n                        <span className=\"text-sm font-bold text-white\">{country.country_name.substring(0, 1)}</span>\n                      )}\n                      {selectedCountry === country.country_id && (\n                        <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-blue-600 rounded-full flex items-center justify-center\">\n                          <Check className=\"w-3 h-3 text-white\" />\n                        </div>\n                      )}\n                    </div>\n                    <span className=\"text-xs text-white whitespace-nowrap\">{country.country_name}</span>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n\n          {/* Ligler Listesi */}\n          <div \n            className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content\"\n            onScroll={handleLeaguesScroll}\n          >\n            {loadingLeagues ? (\n              <div className=\"flex flex-col items-center justify-center p-10\">\n                <Loader2 className=\"w-10 h-10 animate-spin text-amber-500 mb-4\" />\n                <p className=\"text-sm text-slate-300\">{t(": "",
    ")}</p>\n              </div>\n            ) : (\n              <div className=\"p-3 space-y-3\">\n                {/* Tüm Ligler Seçeneği */}\n                <Card \n                  className={`cursor-pointer ${selectedLeague === \"all-leagues\" ? \"bg-red-900/30 border-2 border-red-600\" : \"bg-slate-800 border border-slate-700 hover:border-red-600\"}`}\n                  onClick={() => {\n                    // Tüm liglere tıklandığında, tüm maçları göster\n                    handleLeagueSelect(\"all-leagues\");\n                    closeLeaguesModal();\n                  }}\n                >\n                  <CardContent className=\"p-3 flex items-center justify-between\">\n                    <div className=\"flex items-center\">\n                      <div className=\"w-12 h-12 bg-slate-700 rounded-full flex items-center justify-center mr-3 relative\">\n                        <Trophy className=\"w-6 h-6 text-red-400\" />\n                        {selectedLeague === \"all-leagues\" && (\n                          <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 rounded-full flex items-center justify-center\">\n                            <Check className=\"w-3 h-3 text-white\" />\n                          </div>\n                        )}\n                      </div>\n                      <div>\n                        <h4 className=\"text-base font-medium text-white\">{t(": "",
    ")}\n                      </Button>\n                      <Badge className=\"bg-red-600 text-white\">\n                        {matches.length}\n                      </Badge>\n                    </div>\n                  </CardContent>\n                </Card>\n                \n                {/* Ligler Listesi - Maç sayısına göre sıralanmış */}\n                {filteredLeagues.slice(0, showLeagueCount).map(league => {\n                  const leagueMatches = allMatches.filter(m => m.league_id === league.league_id);\n                  return (\n                    <Card \n                      key={league.league_id}\n                      className={`cursor-pointer ${selectedLeague === league.league_id ? \"bg-red-900/30 border-2 border-red-600\" : \"bg-slate-800 border border-slate-700 hover:border-red-600\"}`}\n                      onClick={() => handleLeagueSelect(league.league_id)}\n                    >\n                      <CardContent className=\"p-3 flex flex-col gap-2\">\n                        <div className=\"flex items-center justify-between\">\n                          <div className=\"flex items-center\">\n                            <div className=\"w-12 h-12 bg-slate-700 rounded-full flex items-center justify-center mr-3 relative\">\n                              {league.league_logo ? (\n                                <img \n                                  src={league.league_logo} \n                                  alt={league.league_name} \n                                  className=\"w-8 h-8 object-contain\"\n                                  loading=\"lazy\"\n                                />\n                              ) : (\n                                <Trophy className=\"w-6 h-6 text-red-400\" />\n                              )}\n                              {selectedLeague === league.league_id && (\n                                <div className=\"absolute -top-1 -right-1 w-5 h-5 bg-red-600 rounded-full flex items-center justify-center\">\n                                  <Check className=\"w-3 h-3 text-white\" />\n                                </div>\n                              )}\n                              {league.matchCount > 0 && (\n                                <div className=\"absolute -bottom-1 -right-1 w-4 h-4 bg-red-600 rounded-full flex items-center justify-center animate-pulse\">\n                                  <div className=\"w-2 h-2 bg-red-400 rounded-full\"></div>\n                                </div>\n                              )}\n                            </div>\n                            <div>\n                              <h4 className=\"text-base font-medium text-white\">{league.league_name}</h4>\n                              <div className=\"flex items-center\">\n                                {league.country_logo && (\n                                  <img\n                                    src={league.country_logo}\n                                    alt={league.country_name}\n                                    className=\"w-3 h-3 mr-1 rounded-full\"\n                                  />\n                                )}\n                                <p className=\"text-xs text-slate-400\">{league.country_name}</p>\n                              </div>\n                            </div>\n                          </div>\n                          <div className=\"flex flex-col items-end gap-2\">\n                            <div className=\"flex items-center gap-2\">\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className={`h-8 px-2 text-xs ${\n                                  league.isFavorite\n                                    ? \"bg-amber-900/30 border-amber-700/30 text-amber-400 hover:bg-amber-800/50\"\n                                    : \"bg-slate-700/30 border-slate-600/30 text-slate-400 hover:bg-slate-600/50\"\n                                }`}\n                                onClick={e => {\n                                  e.stopPropagation();\n                                  toggleFavoriteLeague(league.league_id);\n                                  // Favori ekleme/kaldırma bildirimi göster\n                                  const message = league.isFavorite \n                                    ? `${league.league_name} favorilerden kaldırıldı` \n                                    : `${league.league_name} favorilere eklendi`;\n                                  showLeagueSelectedNotification(message);\n                                }}\n                              >\n                                {league.isFavorite ? (\n                                  <>\n                                    <Heart className=\"w-3 h-3 mr-1 fill-amber-400\" />\n                                    {t(": "",
    ")}\n                              </Button>\n                            </div>\n                            {league.matchCount > 0 && (\n                              <Badge className=\"bg-red-600 text-white\">\n                                {league.matchCount}\n                              </Badge>\n                            )}\n                          </div>\n                        </div>\n                        {/* Lig Maçları Önizleme - Sadece toplam maç sayısı baloncuğu */}\n                        <div className=\"flex gap-2 py-1\">\n                          <div className=\"px-4 py-2 rounded-full bg-gradient-to-r from-amber-400 to-orange-500 text-white font-bold text-sm shadow-md min-w-max\">\n                            {leagueMatches.length} {t(": "",
    ")}\n                      </Button>\n                    </div>\n                  </div>\n                )}\n              </div>\n            )}\n          </div>\n        </div>\n      )}\n      \n      {showLiveMatchView && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header - Daha kompakt tasarım */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-2\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center space-x-1\">\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"h-7 w-7 p-0 rounded-full hover:bg-slate-700/50\"\n                  onClick={() => setShowLiveMatchView(false)}\n                >\n                  <ChevronDown className=\"w-4 h-4 text-white transform rotate-90\" />\n                </Button>\n                <div className=\"w-6 h-6 bg-slate-700 rounded-full flex items-center justify-center relative\">\n                  <Trophy className=\"w-4 h-4 text-green-400\" />\n                  <div className=\"absolute -top-1 -right-1 w-3 h-3 bg-green-600 rounded-full flex items-center justify-center\">\n                    <Check className=\"w-2 h-2 text-white\" />\n                  </div>\n                </div>\n                <div>\n                  <h3 className=\"text-xs font-bold text-white\">{selectedLeagueName}</h3>\n                  <p className=\"text-[10px] text-slate-400\">\n                    {selectedLeagueMatches.length} {t(": "",
    ")}\n                  </p>\n                </div>\n              </div>\n              <div className=\"flex items-center space-x-1\">\n                <Badge className=\"bg-green-600 text-white text-xs px-1 py-0\">Seçildi</Badge>\n                <Button \n                  variant=\"ghost\" \n                  size=\"icon\"\n                  className=\"h-7 w-7 p-0 rounded-full hover:bg-slate-700/50\"\n                  onClick={() => setShowLiveMatchView(false)}\n                >\n                  <X className=\"w-4 h-4 text-white\" />\n                </Button>\n              </div>\n            </div>\n          </div>\n\n          {/* Maçlar Listesi - Daha kompakt tasarım */}\n          <div className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content bg-slate-900/80 px-2 py-1\">\n            <div className=\"space-y-2\">\n              {selectedLeagueMatches.length > 0 ? (\n                selectedLeagueMatches.map(match => (\n                  <div\n                    key={match.match_id}\n                    className=\"bg-slate-800/90 border border-slate-700/70 rounded-lg overflow-hidden shadow-lg\"\n                  >\n                    <div className=\"p-2\">\n                      <div className=\"flex items-center justify-between mb-1\">\n                        <div className=\"flex-1\">\n                          <Badge variant=\"outline\" className=\"bg-green-900/20 border-green-700/30 text-green-400 text-[10px] px-1 py-0\">\n                            {selectedLeagueName}\n                          </Badge>\n                        </div>\n                        {match.match_live === \"1\" ? (\n                          <Badge className=\"bg-red-600 text-white text-[10px] px-1 py-0 animate-pulse\">{t(": "",
    ")}</Badge>\n                        )}\n                      </div>\n\n                      <div className=\"flex items-center justify-between my-1\">\n                        <div className=\"flex items-center space-x-2 flex-1\">\n                          <div className=\"w-8 h-8 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n                            {match.team_home_badge ? (\n                              <img\n                                src={match.team_home_badge || \"/placeholder.svg\"}\n                                alt={match.match_hometeam_name}\n                                className=\"object-cover w-full h-full\"\n                                loading=\"lazy\"\n                                onError={(e) => {\n                                  ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                                }}\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                                {match.match_hometeam_name.substring(0, 1)}\n                              </div>\n                            )}\n                          </div>\n                          <span className=\"text-xs font-medium text-white truncate\">{match.match_hometeam_name}</span>\n                        </div>\n\n                        <div className=\"flex flex-col items-center mx-1\">\n                          <div className=\"flex items-center bg-slate-700/50 px-2 py-1 rounded-md\">\n                            <span className=\"text-sm font-bold text-white\">{match.match_hometeam_score || \"0\"}</span>\n                            <span className=\"text-[10px] mx-1 text-red-400 font-bold\">VS</span>\n                            <span className=\"text-sm font-bold text-white\">{match.match_awayteam_score || \"0\"}</span>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center space-x-2 flex-1 justify-end\">\n                          <span className=\"text-xs font-medium text-white truncate text-right\">{match.match_awayteam_name}</span>\n                          <div className=\"w-8 h-8 overflow-hidden rounded-full bg-slate-700 flex-shrink-0 border border-slate-600\">\n                            {match.team_away_badge ? (\n                              <img\n                                src={match.team_away_badge || \"/placeholder.svg\"}\n                                alt={match.match_awayteam_name}\n                                className=\"object-cover w-full h-full\"\n                                loading=\"lazy\"\n                                onError={(e) => {\n                                  ;(e.target as HTMLImageElement).src = \"/placeholder.svg?height=24&width=24\"\n                                }}\n                              />\n                            ) : (\n                              <div className=\"flex items-center justify-center w-full h-full text-xs font-bold text-white\">\n                                {match.match_awayteam_name.substring(0, 1)}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </div>\n\n                      {match.match_stadium && (\n                        <div className=\"flex items-center justify-center text-[10px] text-slate-400 mb-1\">\n                          <MapPin className=\"w-2 h-2 mr-1\" />\n                          <span className=\"truncate\">{match.match_stadium}</span>\n                        </div>\n                      )}\n\n                      {/* Kompakt butonlar */}\n                      <div className=\"grid grid-cols-2 gap-1 mt-1\">\n                        <Button \n                          className=\"bg-blue-600 hover:bg-blue-700 text-white text-[10px] py-1 h-7 rounded-md\"\n                          onClick={() => {\n                            setDetailsMatch(match);\n                            setDetailsActiveTab(": "",
    ");\n                            setShowDetailsModal(true);\n                          }}\n                        >\n                          Analiz Et\n                        </Button>\n                        <Button \n                          className=\"bg-green-600 hover:bg-green-700 text-white text-[10px] py-1 h-7 rounded-md\"\n                          onClick={() => {\n                            setPredictionMatch(match);\n                            setShowPredictionModal(true);\n                          }}\n                        >\n                          {t(": "",
    ")}\n                    </Button>\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        </div>\n      )}\n      \n      {/* Maç Detayları Modal */}\n      {showDetailsModal && detailsMatch && (\n        <div className=\"fixed inset-0 z-50 bg-slate-900/95 flex flex-col overflow-hidden android-scroll-container\">\n          {/* Header */}\n          <div className=\"bg-gradient-to-b from-slate-800 to-slate-800/50 border-b border-slate-700/50 p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <Button \n                variant=\"ghost\" \n                size=\"icon\"\n                className=\"h-8 w-8 p-0 rounded-full hover:bg-slate-700/50\"\n                onClick={closeDetailsModal}\n              >\n                <ChevronDown className=\"w-5 h-5 text-white transform rotate-90\" />\n              </Button>\n              <Badge className={`text-white text-xs px-3 py-1 ${detailsMatch.match_live === \"1\" ? \"bg-red-600\" : \"bg-slate-600\"}`}>\n                {detailsMatch.match_status === \"1H\" ? t(": "",
    "`}\n              </Badge>\n            </div>\n          </div>\n\n          <div className=\"flex-1 overflow-y-auto hide-scrollbar android-scroll-content p-3\">\n            <div className=\"bg-emerald-900/20 border border-emerald-700/50 rounded-lg\">\n              <UpcomingMatchPrediction \n                homeTeam={predictionMatch.match_hometeam_name}\n                awayTeam={predictionMatch.match_awayteam_name}\n                homeTeamId={predictionMatch.match_hometeam_id}\n                awayTeamId={predictionMatch.match_awayteam_id}\n              />\n            </div>\n          </div>\n          \n          {/* Alt bilgi çubuğu */}\n          <div className=\"bg-slate-800/70 border-t border-slate-700/50 p-2\">\n            <div className=\"flex justify-between items-center\">\n              <div className=\"flex items-center\">\n                <Trophy className=\"w-4 h-4 text-amber-500 mr-1\" />\n                <span className=\"text-xs text-slate-300\">{predictionMatch.league_name}</span>\n              </div>\n              <Badge variant=\"outline\" className=\"text-xs bg-slate-700/50 border-slate-600/50\">\n                Canlı Tahmin\n              </Badge>\n            </div>\n          </div>\n            </div>\n      )}\n    </div>\n  )\n}\n\n// Lig seçildiğinde bildirim gösterme fonksiyonu\nconst showLeagueSelectedNotification = (leagueName: string) => {\n  // Bildirim gösterme işlemi\n  const notification = document.createElement(": "",
    ";\n  notification.innerHTML = `<div className=\"flex items-center justify-center\">\n    <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"16\" height=\"16\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\" className=\"w-4 h-4 mr-2\">\n      <polyline points=\"20 6 9 17 4 12\"></polyline>\n    </svg>\n    <span>${leagueName}</span>\n  </div>`;\n  \n  document.body.appendChild(notification);\n  \n  // 2 saniye sonra bildirimi kaldır\n  setTimeout(() => {\n    notification.style.opacity = ": "",
    "Henüz favori liginiz yok": "",
    "tahmin": "",
    "Canlı maçlar yüklenirken hata oluştu": "",
    "den takımın puan durumunu çek\nconst getTeamStandings = async (teamId: string, teamName: string, leagueId?: string) => {\n  try {\n    // Gerçek API": "",
    "si kullanıyoruz\n      leagueId = \"148\"; // Süper Lig ID": "",
    "API'den puan durumu verisi alınamadı veya boş dizi döndü": "",
    "den kadro verilerini çek\n      const data = await getMatchLineups(matchId)\n\n      if (!data || !data.home || !data.away) {\n        setError(\"Bu maç için kadro verisi bulunamadı.\")\n        setLineupData(null)\n      } else {\n        setLineupData(data)\n      }\n    } catch (err) {\n      console.error(\"Kadro verisi çekilirken hata:\", err)\n      setError(\"Kadro verisi yüklenirken bir hata oluştu.\")\n      setLineupData(null)\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchLineups()\n\n    // Canlı maçlar için otomatik yenileme\n    let interval: NodeJS.Timeout | null = null\n\n    if (isLive) {\n      interval = setInterval(() => {\n        fetchLineups(false)\n      }, 60000) // Her 60 saniyede bir yenile\n    }\n\n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [matchId, isLive])\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-4\">\n        <Loader2 className=\"w-6 h-6 animate-spin text-primary mb-2\" />\n        <p className=\"text-xs text-slate-400\">{t(": "",
    ")}</p>\n      </div>\n    )\n  }\n\n  // Pozisyon kısaltmalarını tam isimlere dönüştür\n  const getPositionName = (pos: string): string => {\n    pos = pos.toUpperCase()\n    if (pos === \"G\" || pos === \"GK\") return t(": "",
    ")\n    return pos\n  }\n\n  // Oyuncuları pozisyonlarına göre grupla\n  const groupPlayersByPosition = (players: Player[]) => {\n    return players.reduce(\n      (acc, player) => {\n        const position = getPositionName(player.lineup_position)\n        if (!acc[position]) acc[position] = []\n        acc[position].push(player)\n        return acc\n      },\n      {} as Record<string, Player[]>,\n    )\n  }\n\n  const homeStartingByPosition = groupPlayersByPosition(lineupData.home.starting_lineups || [])\n  const awayStartingByPosition = groupPlayersByPosition(lineupData.away.starting_lineups || [])\n\n  return (\n    <Card className=\"w-full betting-card\">\n      <CardHeader className=\"flex flex-row items-center justify-between\">\n        <CardTitle className=\"text-xl font-bold\">{t(": "",
    "Bu maç için kadro verisi bulunamadı.": "",
    "Kadro verisi çekilirken hata:": "",
    "Kadro verisi yüklenirken bir hata oluştu.": "",
    "den puan durumunu çek\n        const standingsData = await getStandings(leagueId)\n        \n        if (Array.isArray(standingsData) && standingsData.length > 0) {\n          // API": "",
    "den veri gelmezse boş dizi kullan\n          setStandings([]);\n          setError(t(": "",
    "));\n        }\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error);\n        // Hata durumunda boş dizi kullan\n        setStandings([]);\n        setError(t(": "",
    "den istatistikleri çek\n      const data = await getMatchStatistics(matchId)\n\n      if (!data || Object.keys(data).length === 0) {\n        setError(t(": "",
    "))\n      setStatistics(null)\n    } finally {\n      setLoading(false)\n      setRefreshing(false)\n    }\n  }\n\n  useEffect(() => {\n    fetchStatistics()\n\n    // Canlı maçlar için otomatik yenileme\n    let interval: NodeJS.Timeout | null = null\n\n    if (isLive) {\n      interval = setInterval(() => {\n        fetchStatistics(false)\n      }, 30000) // Her 30 saniyede bir yenile\n    }\n\n    return () => {\n      if (interval) clearInterval(interval)\n    }\n  }, [matchId, isLive])\n\n  if (loading) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-4\">\n        <Loader2 className=\"w-6 h-6 animate-spin text-primary mb-2\" />\n        <p className=\"text-xs text-slate-400\">{t(": "",
    ")}</p>\n      </div>\n    )\n  }\n\n  // İstatistikleri göster\n  return (\n    <Card className=\"bg-gradient-to-br from-slate-800 to-slate-900 border-slate-700 overflow-hidden relative\">\n      <div className=\"absolute inset-0 bg-[url(": "",
    ", awayLastMatches);\n        // Detayda olduğu gibi mapping ve analiz\n        // H2H KG VAR\n        let h2hBttsCount = 0\n        let h2hTotal = 0\n        if (h2hData && h2hData.firstTeam_VS_secondTeam && Array.isArray(h2hData.firstTeam_VS_secondTeam)) {\n          const h2hMatches = h2hData.firstTeam_VS_secondTeam.slice(0, 10)\n          h2hTotal = h2hMatches.length\n          h2hMatches.forEach((match: any) => {\n            const homeScore = Number(match.match_hometeam_score) || 0\n            const awayScore = Number(match.match_awayteam_score) || 0\n            if (homeScore > 0 && awayScore > 0) h2hBttsCount++\n          })\n        }\n        // Home KG VAR\n        let homeBttsCount = 0\n        let homeTotal = homeLastMatches.length\n        homeLastMatches.slice(0, 10).forEach((match: any) => {\n          const homeScore = Number(match.match_hometeam_score) || 0\n          const awayScore = Number(match.match_awayteam_score) || 0\n          if (homeScore > 0 && awayScore > 0) homeBttsCount++\n        })\n        // Away KG VAR\n        let awayBttsCount = 0\n        let awayTotal = awayLastMatches.length\n        awayLastMatches.slice(0, 10).forEach((match: any) => {\n          const homeScore = Number(match.match_hometeam_score) || 0\n          const awayScore = Number(match.match_awayteam_score) || 0\n          if (homeScore > 0 && awayScore > 0) awayBttsCount++\n        })\n        // Ortalama\n        const h2hPercent = h2hTotal ? Math.round((h2hBttsCount / h2hTotal) * 100) : 0\n        const homePercent = homeTotal ? Math.round((homeBttsCount / homeTotal) * 100) : 0\n        const awayPercent = awayTotal ? Math.round((awayBttsCount / awayTotal) * 100) : 0\n        const bttsAverage = Math.round((h2hPercent + homePercent + awayPercent) / 3)\n        setBttsStats({\n          h2h: { count: h2hBttsCount, total: h2hTotal, percent: h2hPercent },\n          home: { count: homeBttsCount, total: homeTotal, percent: homePercent },\n          away: { count: awayBttsCount, total: awayTotal, percent: awayPercent },\n          average: bttsAverage,\n        })\n        // Calculate prediction probabilities based on real data\n        const predictionData = calculatePredictions(h2hData, homeLastMatches, awayLastMatches, bttsAverage)\n        setPredictions(predictionData)\n        // Generate prediction comment\n        const comment = generatePredictionComment(predictionData, homeTeam, awayTeam, {\n          h2h: { count: h2hBttsCount, total: h2hTotal, percent: h2hPercent },\n          home: { count: homeBttsCount, total: homeTotal, percent: homePercent },\n          away: { count: awayBttsCount, total: awayTotal, percent: awayPercent },\n          average: bttsAverage,\n        }, recommendedMarket)\n        setPredictionComment(comment)\n      } catch (error) {\n        console.error(\"Error fetching prediction data:\", error)\n        // Use fallback predictions\n        const fallbackPredictions = generateFallbackPredictions()\n        setPredictions(fallbackPredictions)\n        setPredictionComment(generatePredictionComment(fallbackPredictions, homeTeam, awayTeam, bttsStats, recommendedMarket))\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchPredictionData()\n  }, [homeTeam, awayTeam, homeTeamId, awayTeamId])\n\n  const calculatePredictions = (h2hData: any, homeLastMatches: any[], awayLastMatches: any[], bttsAverage?: number) => {\n    // Initialize with base probabilities\n    let homeWinProb = 40 // Home advantage\n    let drawProb = 30\n    let awayWinProb = 30\n    let over0_5Prob = 90\n    let over1_5Prob = 70\n    let over2_5Prob = 50\n    let over3_5Prob = 30\n    let over4_5Prob = 15\n    let bttsProb = 55\n\n    // Son maç verileri analizi için değişkenler\n    const homeStats = {\n      wins: 0,\n      draws: 0,\n      losses: 0,\n      goalsScored: 0,\n      goalsConceded: 0,\n      cleanSheets: 0,\n      failedToScore: 0,\n      totalMatches: 0\n    };\n    \n    const awayStats = {\n      wins: 0,\n      draws: 0,\n      losses: 0,\n      goalsScored: 0,\n      goalsConceded: 0,\n      cleanSheets: 0,\n      failedToScore: 0,\n      totalMatches: 0\n    };\n    \n    // Son 10 maç verilerini analiz et\n    if (Array.isArray(homeLastMatches) && homeLastMatches.length > 0) {\n      homeLastMatches.forEach((match: any) => {\n        const isHome = match.match_hometeam_id === homeTeamId;\n        const homeScore = Number.parseInt(match.match_hometeam_score) || 0;\n        const awayScore = Number.parseInt(match.match_awayteam_score) || 0;\n        \n        if (isHome) {\n          homeStats.goalsScored += homeScore;\n          homeStats.goalsConceded += awayScore;\n          if (homeScore > awayScore) homeStats.wins++;\n          else if (homeScore === awayScore) homeStats.draws++;\n          else homeStats.losses++;\n        } else {\n          homeStats.goalsScored += awayScore;\n          homeStats.goalsConceded += homeScore;\n          if (awayScore > homeScore) homeStats.wins++;\n          else if (homeScore === awayScore) homeStats.draws++;\n          else homeStats.losses++;\n        }\n        \n        if ((isHome && awayScore === 0) || (!isHome && homeScore === 0)) homeStats.cleanSheets++;\n        if ((isHome && homeScore === 0) || (!isHome && awayScore === 0)) homeStats.failedToScore++;\n        \n        homeStats.totalMatches++;\n      });\n    }\n    \n    if (Array.isArray(awayLastMatches) && awayLastMatches.length > 0) {\n      awayLastMatches.forEach((match: any) => {\n        const isHome = match.match_hometeam_id === awayTeamId;\n        const homeScore = Number.parseInt(match.match_hometeam_score) || 0;\n        const awayScore = Number.parseInt(match.match_awayteam_score) || 0;\n        \n        if (isHome) {\n          awayStats.goalsScored += homeScore;\n          awayStats.goalsConceded += awayScore;\n          if (homeScore > awayScore) awayStats.wins++;\n          else if (homeScore === awayScore) awayStats.draws++;\n          else awayStats.losses++;\n        } else {\n          awayStats.goalsScored += awayScore;\n          awayStats.goalsConceded += homeScore;\n          if (awayScore > homeScore) awayStats.wins++;\n          else if (homeScore === awayScore) awayStats.draws++;\n          else awayStats.losses++;\n        }\n        \n        if ((isHome && awayScore === 0) || (!isHome && homeScore === 0)) awayStats.cleanSheets++;\n        if ((isHome && homeScore === 0) || (!isHome && awayScore === 0)) awayStats.failedToScore++;\n        \n        awayStats.totalMatches++;\n      });\n    }\n    \n    // Son 10 maç verileri temelinde olasılıkları hesapla\n    if (homeStats.totalMatches > 0 && awayStats.totalMatches > 0) {\n      // Ev sahibi kazanma olasılığı\n      const homeWinRate = homeStats.wins / homeStats.totalMatches;\n      const awayLossRate = awayStats.losses / awayStats.totalMatches;\n      const homeAdvantage = 0.1; // Ev sahibi avantajı\n      homeWinProb = Math.round(((homeWinRate + awayLossRate) / 2 + homeAdvantage) * 100);\n      \n      // Deplasman kazanma olasılığı\n      const awayWinRate = awayStats.wins / awayStats.totalMatches;\n      const homeLossRate = homeStats.losses / homeStats.totalMatches;\n      awayWinProb = Math.round(((awayWinRate + homeLossRate) / 2) * 100);\n      \n      // Beraberlik olasılığı\n      const homeDrawRate = homeStats.draws / homeStats.totalMatches;\n      const awayDrawRate = awayStats.draws / awayStats.totalMatches;\n      drawProb = Math.round(((homeDrawRate + awayDrawRate) / 2) * 100);\n      \n      // Toplam 100% olmasını sağla\n      const total = homeWinProb + drawProb + awayWinProb;\n      if (total !== 100) {\n        const factor = 100 / total;\n        homeWinProb = Math.round(homeWinProb * factor);\n        drawProb = Math.round(drawProb * factor);\n        awayWinProb = 100 - homeWinProb - drawProb;\n      }\n      \n      // Gol bazlı tahminler\n      const homeAvgScored = homeStats.goalsScored / homeStats.totalMatches;\n      const homeAvgConceded = homeStats.goalsConceded / homeStats.totalMatches;\n      const awayAvgScored = awayStats.goalsScored / awayStats.totalMatches;\n      const awayAvgConceded = awayStats.goalsConceded / awayStats.totalMatches;\n      \n      const expectedGoals = (homeAvgScored + awayAvgConceded + homeAvgConceded + awayAvgScored) / 3;\n      \n      // Ev sahibi ve deplasman ekibinin toplam gol ortalamaları\n      const homeGoalsTotal = homeAvgScored + homeAvgConceded;\n      const awayGoalsTotal = awayAvgScored + awayAvgConceded;\n      const combinedGoalsExpectation = (homeGoalsTotal + awayGoalsTotal) / 2;\n      \n      // Maçtaki toplam gol beklentisi\n      console.log(": "",
    ", combinedGoalsExpectation);\n      \n      // Over/Under olasılıkları - daha hassas hesaplama\n      over0_5Prob = Math.min(98, Math.round(90 + (expectedGoals - 2) * 5));\n      over1_5Prob = Math.min(95, Math.round(70 + (expectedGoals - 2) * 10));\n      over2_5Prob = Math.min(90, Math.round(50 + (expectedGoals - 2.5) * 15));\n      over3_5Prob = Math.min(80, Math.round(30 + (expectedGoals - 2.5) * 15));\n      over4_5Prob = Math.min(60, Math.round(15 + (expectedGoals - 2.5) * 10));\n      \n      // KG Var olasılığı\n      const homeScoringRate = 1 - (homeStats.failedToScore / homeStats.totalMatches);\n      const awayScoringRate = 1 - (awayStats.failedToScore / awayStats.totalMatches);\n      const homeCleanSheetRate = homeStats.cleanSheets / homeStats.totalMatches;\n      const awayCleanSheetRate = awayStats.cleanSheets / awayStats.totalMatches;\n      \n      bttsProb = Math.round(((homeScoringRate * awayScoringRate) + (1 - homeCleanSheetRate) * (1 - awayCleanSheetRate)) / 2 * 100);\n    }\n\n    // Process H2H data if available - H2H verisi varsa tahminleri güncelle\n    if (h2hData && h2hData.firstTeam_VS_secondTeam && Array.isArray(h2hData.firstTeam_VS_secondTeam)) {\n      const h2hMatches = h2hData.firstTeam_VS_secondTeam\n\n      if (h2hMatches.length > 0) {\n        let homeWins = 0\n        let draws = 0\n        let awayWins = 0\n        let totalGoals = 0\n        let bttsCount = 0\n        let over0_5Count = 0\n        let over1_5Count = 0\n        let over2_5Count = 0\n        let over3_5Count = 0\n        let over4_5Count = 0\n        let goalDistribution = new Array(10).fill(0); // 0-9 gol dağılımı\n\n        h2hMatches.forEach((match: any) => {\n          const homeScore = Number.parseInt(match.match_hometeam_score) || 0\n          const awayScore = Number.parseInt(match.match_awayteam_score) || 0\n          const totalMatchGoals = homeScore + awayScore\n\n          totalGoals += totalMatchGoals\n          \n          // Toplam gol dağılımını kaydet (0-9 gol)\n          if (totalMatchGoals < 10) {\n            goalDistribution[totalMatchGoals]++;\n          }\n\n          if (homeScore > 0 && awayScore > 0) {\n            bttsCount++\n          }\n          \n          if (totalMatchGoals > 0) over0_5Count++;\n          if (totalMatchGoals > 1) over1_5Count++;\n          if (totalMatchGoals > 2) over2_5Count++;\n          if (totalMatchGoals > 3) over3_5Count++;\n          if (totalMatchGoals > 4) over4_5Count++;\n\n          if (homeScore === awayScore) {\n            draws++\n          } else if (\n            (match.match_hometeam_id === homeTeamId && homeScore > awayScore) ||\n            (match.match_awayteam_id === homeTeamId && awayScore > homeScore)) {\n            homeWins++\n          } else {\n            awayWins++\n          }\n        })\n\n        const totalMatches = h2hMatches.length\n\n        if (totalMatches > 0) {\n          // Log H2H istatistikleri\n          console.log(": "",
    ", goalDistribution.map((count, goals) => `${goals} gol: ${count} maç`).join(": "",
    ", totalGoals / totalMatches);\n          \n          // H2H verisi ağırlığını yükselt - artık %50 ağırlıklı\n          const h2hWeight = 0.5;\n          const teamStatsWeight = 1 - h2hWeight;\n          \n          // H2H ve son 10 maç analizinin ağırlıklı ortalaması\n          const h2hHomeWinProb = Math.round((homeWins / totalMatches) * 100)\n          const h2hDrawProb = Math.round((draws / totalMatches) * 100)\n          const h2hAwayWinProb = Math.round((awayWins / totalMatches) * 100)\n          \n          homeWinProb = Math.round(homeWinProb * teamStatsWeight + h2hHomeWinProb * h2hWeight)\n          drawProb = Math.round(drawProb * teamStatsWeight + h2hDrawProb * h2hWeight)\n          awayWinProb = Math.round(awayWinProb * teamStatsWeight + h2hAwayWinProb * h2hWeight)\n\n          // Ensure probabilities sum to 100%\n          const total = homeWinProb + drawProb + awayWinProb\n          if (total !== 100) {\n            const factor = 100 / total\n            homeWinProb = Math.round(homeWinProb * factor)\n            drawProb = Math.round(drawProb * factor)\n            awayWinProb = 100 - homeWinProb - drawProb\n          }\n\n          // H2H based over/under probabilities\n          const h2hOver0_5Prob = Math.round((over0_5Count / totalMatches) * 100)\n          const h2hOver1_5Prob = Math.round((over1_5Count / totalMatches) * 100)\n          const h2hOver2_5Prob = Math.round((over2_5Count / totalMatches) * 100)\n          const h2hOver3_5Prob = Math.round((over3_5Count / totalMatches) * 100)\n          const h2hOver4_5Prob = Math.round((over4_5Count / totalMatches) * 100)\n          \n          // H2H verilerinin ağırlığını artır\n          over0_5Prob = Math.round(over0_5Prob * teamStatsWeight + h2hOver0_5Prob * h2hWeight)\n          over1_5Prob = Math.round(over1_5Prob * teamStatsWeight + h2hOver1_5Prob * h2hWeight)\n          over2_5Prob = Math.round(over2_5Prob * teamStatsWeight + h2hOver2_5Prob * h2hWeight)\n          over3_5Prob = Math.round(over3_5Prob * teamStatsWeight + h2hOver3_5Prob * h2hWeight)\n          over4_5Prob = Math.round(over4_5Prob * teamStatsWeight + h2hOver4_5Prob * h2hWeight)\n\n          // H2H based BTTS probability\n          const h2hBttsProb = Math.round((bttsCount / totalMatches) * 100)\n          bttsProb = Math.round(bttsProb * teamStatsWeight + h2hBttsProb * h2hWeight)\n        }\n      }\n    }\n\n    // BTTS olasılığını bttsAverage ile güncelle (frontend": "",
    "s scoring rate (0-1)\n  const calculateTeamScoringRate = (matches: any[], teamId: string): number => {\n    if (!Array.isArray(matches) || matches.length === 0) return 0.7\n\n    let scoredCount = 0\n\n    matches.forEach((match: any) => {\n      const isHome = match.match_hometeam_id === teamId\n      const homeScore = Number.parseInt(match.match_hometeam_score) || 0\n      const awayScore = Number.parseInt(match.match_awayteam_score) || 0\n\n      if ((isHome && homeScore > 0) || (!isHome && awayScore > 0)) {\n        scoredCount++\n      }\n    })\n\n    return scoredCount / matches.length\n  }\n\n  // Generate fallback predictions if API data is unavailable\n  const generateFallbackPredictions = () => {\n    // Home advantage\n    const homeWinProb = 35 + Math.floor(Math.random() * 30)\n    const drawProb = 20 + Math.floor(Math.random() * 20)\n    const awayWinProb = 100 - homeWinProb - drawProb\n\n    // Over/Under probabilities\n    const over0_5Prob = 90 + Math.floor(Math.random() * 5)\n    const over1_5Prob = 70 + Math.floor(Math.random() * 20)\n    const over2_5Prob = 45 + Math.floor(Math.random() * 30)\n    const over3_5Prob = 25 + Math.floor(Math.random() * 25)\n    const over4_5Prob = 10 + Math.floor(Math.random() * 20)\n\n    // BTTS probability\n    const bttsProb = 50 + Math.floor(Math.random() * 30)\n\n    return {\n      homeWinProb,\n      drawProb,\n      awayWinProb,\n      over0_5Prob,\n      over1_5Prob,\n      over2_5Prob,\n      over3_5Prob,\n      over4_5Prob,\n      bttsProb,\n    }\n  }\n\n  \n\n  // Generate prediction comment based on probabilities\n  const generatePredictionComment = (\n    predictionData: {\n      homeWinProb: number\n      drawProb: number\n      awayWinProb: number\n      over0_5Prob: number\n      over1_5Prob: number\n      over2_5Prob: number\n      over3_5Prob: number\n      over4_5Prob: number\n      bttsProb: number\n    },\n    homeTeamName: string,\n    awayTeamName: string,\n    bttsStatsObj?: any,\n    recommendedMarketObj?: any\n  ) => {\n    // Generate human-readable comment\n    let comment = \"\";\n\n    // Maç sonucu tahmini\n    const winner =\n      predictionData.homeWinProb > predictionData.awayWinProb && predictionData.homeWinProb > predictionData.drawProb\n        ? homeTeamName\n        : predictionData.awayWinProb > predictionData.homeWinProb && predictionData.awayWinProb > predictionData.drawProb\n        ? awayTeamName\n        : \"Draw\";\n\n    // Favori takım ve istatistikler\n    if (winner === homeTeamName) {\n      comment += t(": "",
    ") + ` (%${Math.round(predictionData.drawProb)}). `;\n    }\n\n    // Beklenen gol sayısı\n    if (predictionData.over2_5Prob > 60) {\n      comment += t(": "",
    ") + ` (%${Math.round(100 - predictionData.bttsProb)}). `;\n    }\n\n    // Önerilen market\n    if (recommendedMarketObj) {\n      comment += t(": "",
    ") + `: ${recommendedMarketObj.label} (%${Math.round(recommendedMarketObj.value)})`;\n    }\n    \n    return comment\n  }\n\n  // Risk seviyesi hesaplayan fonksiyon\n  const calculateRiskLevel = (prediction: number, betType: string): { level: string, score: number } => {\n    // Temel risk puanı (100": "",
    "Kazanır": "",
    "İY/MS": "",
    "Çifte": "",
    "Berabere Kalır": "",
    "dortBuçukUst": "",
    "in kazanma olasılığı düşük görünüyor.`\n      });\n    } else if (predictions.awayWinProb < 40 && predictions.drawProb >= 30) {\n      tips.push({\n        type: \"safe\",\n        label: `${homeTeam} Kazanır/Berabere Kalır`,\n        probability: predictions.homeWinProb + predictions.drawProb,\n        explanation: `${awayTeam}": "",
    "in kazanma olasılığı düşük görünüyor.`\n        });\n      } else if (maxOutcome === predictions.awayWinProb) {\n        tips.push({\n          type: \"safe\",\n          label: `${awayTeam} Kazanır/Berabere Kalır`,\n          probability: predictions.awayWinProb + predictions.drawProb,\n          explanation: `${homeTeam}": "",
    "i konsola yazdır\n  useEffect(() => {\n    if (!loading) {\n      console.log(": "",
    ", {\n        homeWinProb: predictions.homeWinProb >= 70,\n        awayWinProb: predictions.awayWinProb >= 70,\n        drawProb: predictions.drawProb >= 45,\n        bttsProb: predictions.bttsProb >= 65,\n        over2_5Prob: predictions.over2_5Prob >= 65,\n        under2_5Prob: 100 - predictions.over2_5Prob >= 65\n      });\n    }\n  }, [loading, trendBettingTips, predictions]);\n\n  // --- Recommended Market Calculation ---\n  const marketSuggestions = [\n    { label: \"0.5 ÜST\", value: predictions.over0_5Prob, type: \"over0_5\" },\n    { label: \"1.5 ÜST\", value: predictions.over1_5Prob, type: \"over1_5\" },\n    { label: \"2.5 ÜST\", value: predictions.over2_5Prob, type: \"over2_5\" },\n    { label: \"3.5 ÜST\", value: predictions.over3_5Prob, type: \"over3_5\" },\n    { label: \"4.5 ÜST\", value: predictions.over4_5Prob, type: \"over4_5\" },\n    { label: \"0.5 ALT\", value: 100 - predictions.over0_5Prob, type: \"under0_5\" },\n    { label: \"1.5 ALT\", value: 100 - predictions.over1_5Prob, type: \"under1_5\" },\n    { label: \"2.5 ALT\", value: 100 - predictions.over2_5Prob, type: \"under2_5\" },\n    { label: \"3.5 ALT\", value: 100 - predictions.over3_5Prob, type: \"under3_5\" },\n    { label: \"4.5 ALT\", value: 100 - predictions.over4_5Prob, type: \"under4_5\" },\n    { label: \"KG VAR\", value: predictions.bttsProb, type: \"btts\" },\n    { label: \"KG YOK\", value: 100 - predictions.bttsProb, type: \"nobtts\" },\n  ];\n  const recommendedMarket = useMemo(() => {\n    // En yüksek olasılıklı bahis türünü bul\n    const marketOptions = [\n      { label: `0.5 ${t(": "",
    ")}</span>\n          </h3>\n          <div className=\"space-y-3 bg-slate-800/50 p-3 rounded-md border border-green-700/20\">\n            {/* Favorinin gösterildiği özel bölüm */}\n            <div className=\"flex justify-center mb-2\">\n              {predictions.homeWinProb > predictions.drawProb && predictions.homeWinProb > predictions.awayWinProb ? (\n                <div className=\"bg-green-900/30 border border-green-700/30 rounded-md px-3 py-1 text-center animate-pulse\">\n                  <span className=\"text-sm text-green-400 font-bold\">{homeTeam}</span>\n                  <span className=\"text-xs text-slate-300 ml-1\">{t(": "",
    ")}</span>\n                <div className=\"flex items-center gap-1 mt-1\">\n                  <span className=\"text-lg font-bold\">{recommendedMarket.label}</span>\n                  <span className=\"text-sm bg-slate-800/80 px-1.5 py-0.5 rounded\">%{Math.round(recommendedMarket.value)}</span>\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n\n        {/* --- Trend Bahisçi Önerileri --- */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-green-400 border-b border-green-700/30 pb-1 flex items-center\">\n            <Bot className=\"w-4 h-4 mr-1 text-blue-400\" />\n            <span>{t(": "",
    ")}</span>\n          </h3>\n          <div className=\"space-y-3 bg-slate-800/50 p-2 rounded-md border border-green-700/20\">\n            {trendBettingTips.length > 0 ? (\n              <>\n                {/* Kategori başlıkları */}\n                <div className=\"flex flex-col space-y-1\">\n                  <div className=\"text-xs text-green-400 font-medium border-b border-green-700/30 pb-1 mb-1\">\n                    {t(": "",
    ")}\n                  </div>\n                  \n                  {/* İlk 3 öneriyi en iyi seçimler olarak göster */}\n                  {trendBettingTips.slice(0, 3).map((tip, index) => (\n                    <div key={index} className=\"flex flex-col space-y-1 p-2 bg-slate-700/30 rounded-md hover:bg-slate-700/50 transition-colors\">\n                      <div className=\"flex justify-between items-center\">\n                        <div className=\"flex items-center\">\n                          <span className={`w-2 h-2 rounded-full mr-2 ${\n                            tip.type === ": "",
    ")}: {tip.riskLevel} \n                              {tip.riskScore !== undefined && (\n                                <span className=\"ml-0.5 opacity-80\">({tip.riskScore})</span>\n                              )}</span>\n                          </span>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n                \n                {/* Alt/Üst Market Önerileri - önerilen bahisler içinde 1.5 veya 2.5 Üst/Alt varsa göster */}\n                {trendBettingTips.some(tip => \n                  tip.label.includes(\"1.5\") || \n                  tip.label.includes(\"2.5\") || \n                  (tip.label.includes(\"Over\") && tip.label.includes(\"&\"))\n                ) && (\n                  <div className=\"flex flex-col space-y-1 mt-3\">\n                    <div className=\"text-xs text-yellow-400 font-medium border-b border-yellow-700/30 pb-1 mb-1\">\n                      {t(": "",
    ")}: {tip.riskLevel} \n                                  {tip.riskScore !== undefined && (\n                                    <span className=\"ml-0.5 opacity-80\">({tip.riskScore})</span>\n                                  )}</span>\n                              </span>\n                            )}\n                          </div>\n                        </div>\n                    ))}\n                  </div>\n                )}\n                \n                {/* Diğer öneriler - en fazla 2 tane göster */}\n                {trendBettingTips.length > 3 && (\n                  <div className=\"flex flex-col space-y-1 mt-3\">\n                    <div className=\"text-xs text-blue-400 font-medium border-b border-blue-700/30 pb-1 mb-1\">\n                      {t(": "",
    ")}</p>\n              </div>\n            )}\n          </div>\n        </div>\n\n        {/* --- Alt/Üst Marketleri --- */}\n        <div className=\"space-y-3\">\n          <h3 className=\"text-sm font-medium text-green-400 border-b border-green-700/30 pb-1 flex items-center\">\n            <TrendingUp className=\"w-4 h-4 mr-1 text-yellow-400\" />\n            <span>{t(": "",
    "Her iki takım da yüksek gol ortalamasına sahip. 2.5 üst makul bir seçim olabilir.": "",
    "KG Var & 2.5 Üst": "",
    "İki takımın da gol atacağı ve toplamda 3+ gol olacağı yüksek olasılıklı.": "",
    "KG Yok & 2.5 Alt": "",
    "Düşük skorlu ve karşılıklı gol olmayan bir maç bekleniyor.": "",
    "İY/MS 1/1": "",
    "İY/MS 2/2": "",
    "Maçta en az 1 gol olma olasılığı yüksek.": "",
    "1.5 Üst & KG Var": "",
    "İki takımın da gol atması ve toplamda en az 2 gol olması yüksek olasılıklı.": "",
    "0.5 ÜST": "",
    "1.5 ÜST": "",
    "2.5 ÜST": "",
    "3.5 ÜST": "",
    "4.5 ÜST": "",
    "0.5 ALT": "",
    "1.5 ALT": "",
    "2.5 ALT": "",
    "3.5 ALT": "",
    "4.5 ALT": "",
    "den takımın puan durumunu çek\nconst getTeamStandings = async (teamId: string, teamName: string, leagueId?: string) => {\n  try {\n    // Get team league info from API\n    if (!leagueId) {\n      console.log(`League ID not found for ${teamName}, using default ID`);\n      // If team league info is missing, use a default league ID\n      // Turkey Super League: 148, Premier League: 152, La Liga: 302, Bundesliga: 175, Serie A: 207\n      leagueId = \"148\"; // Super League ID as default\n    }\n    \n    // Get league standings\n    console.log(`Getting standings for league ID ${leagueId}...`);\n    const standings = await getStandings(leagueId);\n    \n    if (!Array.isArray(standings) || standings.length === 0) {\n      console.log(`Failed to get standings data for league ID ${leagueId} from API or returned empty array`);\n      // Try alternative leagues\n      const alternativeLeagueIds = [\"148\", \"152\", \"302\", \"175\", \"207\"];\n      \n      // Try alternatives if given league ID is not already in the alternatives list\n      if (!alternativeLeagueIds.includes(leagueId)) {\n        for (const altLeagueId of alternativeLeagueIds) {\n          console.log(`Trying alternative league ID: ${altLeagueId}`);\n          try {\n            const altStandings = await getStandings(altLeagueId);\n            if (Array.isArray(altStandings) && altStandings.length > 0) {\n              console.log(`Data found in alternative league with ID ${altLeagueId}`);\n              return await findTeamInStandings(altStandings, teamId, teamName);\n            }\n          } catch (e) {\n            console.log(`Error for alternative league ID ${altLeagueId}:`, e);\n          }\n        }\n      }\n      \n      return {\n        position: 0,\n        points: 0,\n        played: 0,\n        won: 0,\n        drawn: 0,\n        lost: 0,\n        goalsFor: 0,\n        goalsAgainst: 0\n      };\n    }\n    // Takımı puan durumu listesinde ara\n    return await findTeamInStandings(standings, teamId, teamName);\n  } catch (error) {\n    console.error(`Error fetching team standings for ${teamName}:`, error);\n    // Hata durumunda boş değerler döndür\n    return {\n      position: 0,\n      points: 0,\n      played: 0,\n      won: 0,\n      drawn: 0,\n      lost: 0,\n      goalsFor: 0,\n      goalsAgainst: 0\n    };\n  }\n};\n\nconst StandingsComparison = ({\n  homeTeamId,\n  awayTeamId,\n  homeTeam,\n  awayTeam,\n  leagueId,\n}: {\n  homeTeamId: string\n  awayTeamId: string\n  homeTeam: string\n  awayTeam: string\n  leagueId?: string\n}) => {\n  const { t } = useTranslation();\n  const [homeStanding, setHomeStanding] = useState<any>(null)\n  const [awayStanding, setAwayStanding] = useState<any>(null)\n  const [loading, setLoading] = useState(true)\n  const [error, setError] = useState<string | null>(null)\n\n  useEffect(() => {\n    const fetchStandings = async () => {\n      try {\n        console.log(`Puan durumu çekiliyor - Lig ID: ${leagueId}, Ev sahibi: ${homeTeam}, Deplasman: ${awayTeam}`);\n        const [homeData, awayData] = await Promise.all([\n          getTeamStandings(homeTeamId, homeTeam, leagueId), \n          getTeamStandings(awayTeamId, awayTeam, leagueId)\n        ]);\n        \n        setHomeStanding(homeData)\n        setAwayStanding(awayData)\n      } catch (error) {\n        console.error(\"Error fetching standings:\", error)\n        setError(\"Puan durumu bilgisi alınırken bir hata oluştu\");\n      } finally {\n        setLoading(false)\n      }\n    }\n\n    fetchStandings()\n  }, [homeTeamId, awayTeamId, homeTeam, awayTeam, leagueId])\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-green-500\" />\n      </div>\n    )\n  }\n  \n  if (error) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-red-400\">{error}</p>\n      </div>\n    )\n  }\n\n  if (!homeStanding || !awayStanding) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">Puan durumu bilgisi bulunamadı</p>\n      </div>\n    )\n  }\n\n  const positionDiff = homeStanding.position - awayStanding.position\n  const pointsDiff = homeStanding.points - awayStanding.points\n\n  return (\n    <div className=\"space-y-3\">\n      <div className=\"flex items-center justify-center mb-3\">\n        <Trophy className=\"w-4 h-4 text-yellow-500 mr-2\" />\n        <h3 className=\"text-sm font-medium text-green-400\">{t(": "",
    ")}:</span>\n                  <span className=\"text-white\">\n                    {awayStanding.goalsFor}/{awayStanding.goalsAgainst}\n                  </span>\n                </div>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  )\n}\n\n// Memoized match card component\nconst UpcomingMatchCard = React.memo(\n  ({\n    match,\n    isSelected,\n    onMatchClick,\n    onAnalysisClick,\n    onPredictionClick,\n  }: {\n    match: Match\n    isSelected: boolean\n    onMatchClick: (matchId: string, homeTeamId: string, awayTeamId: string, tabType?: string) => void\n    onAnalysisClick: () => void\n    onPredictionClick: () => void\n  }) => {\n    const { t } = useTranslation();\n    // Maçın canlı olup olmadığını kontrol et\n    const isLive = match.match_live === \"1\";\n    const isFinished = match.match_status === \"FT\" || match.match_status === \"Finished\";\n    \n    // Skor bilgisi\n    const homeScore = match.match_hometeam_score || \"0\";\n    const awayScore = match.match_awayteam_score || \"0\";\n    \n    // Tarih ve saat bilgisi\n    const matchDate = new Date(match.match_date);\n    const today = new Date();\n    const tomorrow = addDays(today, 1);\n\n    today.setHours(0, 0, 0, 0);\n    tomorrow.setHours(0, 0, 0, 0);\n    matchDate.setHours(0, 0, 0, 0);\n\n    let dateLabel = format(matchDate, \"d MMMM EEEE\", { locale: tr });\n    if (matchDate.getTime() === today.getTime()) {\n      dateLabel = t(": "",
    ");\n    }\n    \n    // Performans için memoize edilmiş tıklama fonksiyonları\n    const handleAnalysisClick = useCallback((e: React.MouseEvent) => {\n      e.stopPropagation();\n      onAnalysisClick();\n    }, [onAnalysisClick]);\n\n    const handlePredictionClick = useCallback((e: React.MouseEvent) => {\n      e.stopPropagation();\n      onPredictionClick();\n    }, [onPredictionClick]);\n    \n    return (\n      <Card\n        className={`cursor-pointer transition-colors duration-200 bg-slate-800 border-slate-700 hover:border-green-600 ${\n          isSelected ? \"border-green-500 bg-slate-750\" : \"\"\n        } ${isLive ? \"border-red-500\" : \"\"}`}\n        onClick={() => onMatchClick(match.match_id, match.match_hometeam_id, match.match_awayteam_id)}\n      >\n        <CardContent className=\"p-3\">\n          <div className=\"flex items-center justify-between mb-2\">\n            <div className=\"flex items-center\">\n              {match.league_logo && (\n                <img\n                  src={match.league_logo || \"/placeholder.svg\"}\n                  alt={match.league_name}\n                  className=\"w-4 h-4 mr-1 rounded-full\"\n                  loading=\"lazy\"\n                />\n              )}\n              <Badge variant=\"outline\" className=\"text-xs px-1 py-0 border-green-700/30 text-green-400 bg-green-900/20\">\n                {match.league_name}\n              </Badge>\n            </div>\n            \n            {isLive ? (\n              <Badge className=\"text-xs px-2 py-0 bg-red-600 text-white animate-pulse\">\n                {match.match_status === \"1H\" ? t(": "",
    "den maç istatistiklerini çekebilirsiniz\n        // Örnek: const data = await getMatchStats(match.match_id);\n        \n        // Şimdilik örnek veri gösteriyoruz\n        const demoStats = {\n          possession: {\n            home: 55,\n            away: 45\n          },\n          shots: {\n            home: 12,\n            away: 8\n          },\n          shotsOnTarget: {\n            home: 5,\n            away: 3\n          },\n          corners: {\n            home: 6,\n            away: 4\n          },\n          fouls: {\n            home: 10,\n            away: 12\n          },\n          yellowCards: {\n            home: 2,\n            away: 3\n          },\n          redCards: {\n            home: 0,\n            away: 0\n          }\n        };\n        \n        setStats(demoStats);\n      } catch (error) {\n        console.error(\"Error fetching match stats:\", error);\n      } finally {\n        setLoading(false);\n      }\n    };\n    \n    fetchMatchStats();\n  }, [match.match_id]);\n\n  if (loading) {\n    return (\n      <div className=\"flex justify-center p-4\">\n        <Loader2 className=\"w-5 h-5 animate-spin text-red-500\" />\n      </div>\n    );\n  }\n\n  if (!stats) {\n    return (\n      <div className=\"text-center p-4\">\n        <p className=\"text-xs text-slate-400\">{t(": "",
    ")}</p>\n      </div>\n    );\n  }\n\n  // Skor bilgisi\n  const homeScore = match.match_hometeam_score || \"0\";\n  const awayScore = match.match_awayteam_score || \"0\";\n  const homeHalfScore = match.match_hometeam_halftime_score || \"0\";\n  const awayHalfScore = match.match_awayteam_halftime_score || \"0\";\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Maç durumu ve skor */}\n      <div className=\"flex items-center justify-center mb-3\">\n        <Badge className=\"bg-red-600 text-white\">\n          {match.match_status === \"1H\" ? t(": "",
    "den kontrol et\n  if (!forceRefresh) {\n    const cachedData = await indexedCache.get(FINISHED_MATCHES_CACHE_KEY);\n    if (cachedData) {\n      console.log(\"Tamamlanan maçlar IndexedDB": "",
    "le (24 saat boyunca)\n    await indexedCache.set(FINISHED_MATCHES_CACHE_KEY, result, 24 * 60 * 60 * 1000);\n\n    console.log(`Tamamlanan maçlar IndexedDB": "",
    "den yüklendi\")\n          return\n        }\n      } else {\n        setCacheStatus(\"Cache bypass ediliyor, API": "",
    "))\n    } finally {\n      setTimeout(() => {\n        setLoading(false)\n      }, 200)\n    }\n  }, [formatDateForApi, dateRange, t])\n\n  const fetchCountries = useCallback(async () => {\n    try {\n      const data = await getCountries()\n      if (Array.isArray(data)) {\n        setCountries(data)\n      }\n    } catch (err) {\n      console.error(\"Error fetching countries:\", err)\n    }\n  }, [])\n\n  const fetchLeagues = useCallback(async (countryId?: string) => {\n    try {\n      const data = await getLeagues(countryId)\n      if (Array.isArray(data)) {\n        setLeagues(data)\n      }\n    } catch (err) {\n      console.error(\"Error fetching leagues:\", err)\n    }\n  }, [])\n\n  const fetchMatchDetails = useCallback(async (matchId: string, homeTeamId: string, awayTeamId: string) => {\n    setIsLoadingDetails(true)\n    try {\n      const [homeMatches, awayMatches] = await Promise.all([\n        getTeamLastMatches(homeTeamId, 10),\n        getTeamLastMatches(awayTeamId, 10),\n      ])\n\n      if (Array.isArray(homeMatches)) {\n        setHomeLastMatches(homeMatches)\n      }\n\n      if (Array.isArray(awayMatches)) {\n        setAwayLastMatches(awayMatches)\n      }\n    } catch (error) {\n      console.error(\"Error fetching match details:\", error)\n    } finally {\n      setIsLoadingDetails(false)\n    }\n  }, [])\n\n  const clearCache = useCallback(async () => {\n    try {\n      setCacheStatus(\"Cache temizleniyor...\")\n      const success = await indexedCache.clear()\n      const newStorage = await indexedCache.getStorageInfo()\n      setStorageInfo(newStorage)\n      setCacheStatus(success ? \"Cache temizlendi\" : \"Cache temizleme başarısız\")\n    } catch (error) {\n      setCacheStatus(\"Cache temizleme hatası\")\n    }\n  }, [])\n\n  // Use a memoized version of matches for better performance\n  const memoizedMatches = useMemo(() => matches, [matches]);\n  \n  // Increase debounce time for better performance\n  useEffect(() => {\n    const timer = setTimeout(() => {\n      setDebouncedSearchTerm(searchTerm);\n    }, 500); // 500ms delay for better performance\n\n    return () => clearTimeout(timer);\n  }, [searchTerm]);\n  \n  // Fetch yesterday": "",
    "s finished matches for the \"Tamamlanan\" tab\n  useEffect(() => {\n    let isMounted = true;\n\n    const fetchFinishedMatches = async () => {\n      // Her \"Tamamlanan\" sekmesine geçişte ve her iki alt sekme değişiminde çalış\n      if (selectedDate === \"finished\") {\n        try {\n          setLoadingFinished(true);\n          setFinishedMatchError(null); // Önceki hataları temizle\n          const result = await fetchYesterdayFinishedMatches(true); // Force refresh\n          const yesterdayFinishedData = result.yesterdayFinished;\n          const todayFinishedData = result.todayFinished;\n          \n          if (isMounted) {\n            setYesterdayFinished(yesterdayFinishedData);\n            setTodayFinished(todayFinishedData);\n            setLoadingFinished(false);\n\n            // Eğer bugünün maçları yoksa, kullanıcıya bildirim göster\n            if (todayFinishedData.length === 0) {\n              setFinishedMatchError(t(": "",
    "))\n          }\n        }\n      }\n    };\n\n    fetchFinishedMatches();\n\n    return () => {\n      isMounted = false;\n    };\n  }, [selectedDate, selectedFinishedDate, t]);\n  \n  // Memoize edilmiş tarih filtreleme fonksiyonu\n  const filteredMatches = useMemo(() => {\n    if (selectedDate === \"finished\") {\n      // Dün ve bugünün maçlarını seçilen tarihe göre filtrele\n      const matches = selectedFinishedDate === \"yesterday\" \n        ? yesterdayFinished \n        : todayFinished;\n      \n      // Eğer hiç maç yoksa boş dizi döndür\n      return matches;\n    }\n    \n    // Performans için erken filtreleme\n    let filtered = [...memoizedMatches];\n\n    // Tarih filtrelemesini daha kesin hale getir\n    const today = new Date();\n    today.setHours(0, 0, 0, 0); // Günün başlangıcı\n    const tomorrow = new Date(today);\n    tomorrow.setDate(today.getDate() + 1);\n    const weekEnd = new Date(today);\n    weekEnd.setDate(today.getDate() + 7);\n\n    filtered = filtered.filter(match => {\n      const matchDate = new Date(match.match_date);\n      matchDate.setHours(0, 0, 0, 0); // Karşılaştırma için saati sıfırla\n      \n      // Tamamlanmış maçları filtrele\n      if (MATCH_STATUSES.FINISHED.includes(match.match_status || \"\")) {\n        return false;\n      }\n\n      // Tarih filtrelemesi\n      switch (selectedDate) {\n        case \"today\":\n          return matchDate.getTime() === today.getTime();\n        case \"tomorrow\":\n          return matchDate.getTime() === tomorrow.getTime();\n        case \"week\":\n          return matchDate >= today && matchDate < weekEnd;\n        default:\n          return true;\n      }\n    });\n\n    // Arama filtresi\n    if (debouncedSearchTerm) {\n      const term = debouncedSearchTerm.toLowerCase();\n      filtered = filtered.filter(\n        match => \n          match.match_hometeam_name.toLowerCase().includes(term) ||\n          match.match_awayteam_name.toLowerCase().includes(term)\n      );\n    }\n\n    // Ülke filtrelemesi\n    if (selectedCountry && selectedCountry !== \"all-countries\") {\n      const countryInfo = countries.find(c => c.country_id === selectedCountry);\n      if (countryInfo) {\n        filtered = filtered.filter(match => match.country_name === countryInfo.country_name);\n      }\n    }\n\n    // Lig filtrelemesi\n    if (selectedLeague && selectedLeague !== \"all-leagues\") {\n      const leagueInfo = leagues.find(l => l.league_id === selectedLeague);\n      if (leagueInfo) {\n        filtered = filtered.filter(match => match.league_name === leagueInfo.league_name);\n      }\n    }\n\n    return filtered;\n  }, [\n    selectedDate, \n    selectedFinishedDate,\n    yesterdayFinished, \n    todayFinished,\n    memoizedMatches, \n    debouncedSearchTerm, \n    selectedCountry, \n    selectedLeague, \n    countries, \n    leagues\n  ]);\n\n  // Tarihe göre gruplandırma işlemini de memoize et\n  const matchesByDate = useMemo(() => {\n    return filteredMatches.reduce(\n      (acc, match) => {\n        if (!acc[match.match_date]) {\n          acc[match.match_date] = []\n        }\n        acc[match.match_date].push(match)\n        return acc\n      },\n      {} as Record<string, Match[]>\n    )\n  }, [filteredMatches]);\n\n  useEffect(() => {\n    fetchUpcomingMatches(false)\n    fetchCountries()\n  }, [fetchUpcomingMatches, fetchCountries])\n\n  useEffect(() => {\n    if (selectedCountry && selectedCountry !== \"all-countries\") {\n      fetchLeagues(selectedCountry)\n      setSelectedLeague(\"all-leagues\")\n    } else {\n      fetchLeagues()\n    }\n  }, [selectedCountry, fetchLeagues])\n\n  const handleMatchClick = useCallback(\n    (matchId: string, homeTeamId: string, awayTeamId: string, tabType?: string) => {\n      if (selectedMatchId === matchId) {\n        setSelectedMatchId(null)\n        setHomeLastMatches([])\n        setAwayLastMatches([])\n      } else {\n        // Maçı bul\n        const selectedMatch = memoizedMatches.find(match => match.match_id === matchId);\n        \n        setSelectedMatchId(matchId)\n        \n        // Canlı maç ise \"live\" sekmesini, değilse \"standings\" sekmesini seç\n        if (selectedMatch && selectedMatch.match_live === \"1\") {\n          setActiveTab(\"live\")\n        } else if (tabType) {\n          // Eğer tabType parametre olarak geldiyse, o sekmeyi seç\n          setActiveTab(tabType)\n        } else {\n          setActiveTab(\"standings\")\n        }\n        \n        fetchMatchDetails(matchId, homeTeamId, awayTeamId)\n      }\n    },\n    [selectedMatchId, fetchMatchDetails, memoizedMatches]\n  )\n\n  // Seçilen maça otomatik kaydırma efekti için useEffect - hem seçildiğinde hem de yükleme tamamlandığında\n  useEffect(() => {\n    // İki durumda otomatik kaydırma yap:\n    // 1. Yeni bir maç seçildiğinde (selectedMatchId değiştiğinde)\n    // 2. Maç detayları yüklenmeyi tamamladığında (isLoadingDetails false olduğunda)\n    if (selectedMatchId && selectedMatchRef.current) {\n      // Scroll işlemi için uygun zamanlama\n      const scrollDelay = isLoadingDetails ? 50 : 200; // Yükleme bittiyse biraz daha bekle\n\n      const scrollTimer = setTimeout(() => {\n        if (selectedMatchRef.current) {\n          // Tüm sayfa durumlarında çalışacak şekilde scroll işlemi yap\n          selectedMatchRef.current.scrollIntoView({\n            behavior: ": "",
    ",\n          });\n        }\n      }, scrollDelay);\n\n      return () => clearTimeout(scrollTimer);\n    }\n  }, [selectedMatchId, isLoadingDetails]);\n  \n  // Aktif tab değiştiğinde scroll işlemini tekrarla - özellikle ": "",
    " sekmesine geçildiğinde\n  useEffect(() => {\n    if (selectedMatchId && selectedMatchRef.current && activeTab === ": "",
    ") {\n      // Tahmin sekmesine geçildiğinde otomatik kaydırma yap\n      setTimeout(() => {\n        if (selectedMatchRef.current) {\n          selectedMatchRef.current.scrollIntoView({\n            behavior: ": "",
    ", // Tahmin için merkeze kaydır\n          });\n        }\n      }, 100);\n    }\n  }, [activeTab, selectedMatchId]);\n\n  const handleDateChange = useCallback((newDate: string) => {\n    // Eğer zaten aynı tarih seçilmişse işlem yapma\n    if (newDate === selectedDate) return;\n\n    // Yükleme durumunu aktif et\n    setIsDateLoading(true);\n\n    // Kısa bir gecikme ekleyelim (gerçek yükleme simülasyonu için)\n    setTimeout(() => {\n      setSelectedDate(newDate);\n      \n      // Yükleme durumunu kapat\n      setIsDateLoading(false);\n    }, 300); // Hafif bir gecikme performans hissi verir\n  }, [selectedDate]);\n\n  const handlePredictionClick = useCallback((e: React.MouseEvent<HTMLElement>) => {\n    e.stopPropagation()\n    const matchId = (e.currentTarget.dataset.matchId || ": "",
    ")}</p>\n        <Progress \n          value={50} \n          className=\"w-full max-w-xs mt-2 h-1\"\n          indicatorColor=\"bg-green-500\"\n        />\n      </div>\n    );\n  }\n\n  // Tamamlanan maçlar için boş liste kontrolü\n  if (selectedDate === \"finished\" && \n      ((selectedFinishedDate === \"yesterday\" && yesterdayFinished.length === 0) || \n       (selectedFinishedDate === \"today\" && todayFinished.length === 0))) {\n    return (\n      <div className=\"flex flex-col items-center justify-center p-6\">\n        <AlertCircle className=\"w-8 h-8 text-yellow-500 mb-2\" />\n        <p className=\"text-xs text-slate-400 text-center\">\n          {selectedFinishedDate === \"yesterday\" \n            ? t(": "",
    ")}\n          </Button>\n        </div>\n      )}\n\n      {/* Date filter tabs */}\n      <div className=\"mb-2 relative\">\n        <Tabs \n          defaultValue=\"today\" \n          value={selectedDate} \n          onValueChange={handleDateChange}\n          className=\"w-full\"\n        >\n          <TabsList className=\"w-full bg-slate-800 border border-slate-700 h-8 p-0.5 relative\">\n            {/* Yükleme overlay": "",
    "Tamamlanan maçlar IndexedDB'den yüklendi": "",
    "Tamamlanan maçlar çekilirken hata oluştu:": "",
    "IndexedDB'den yüklendi": "",
    "API'den yükleniyor...": "",
    "Cache temizleme başarısız": "",
    "Cache temizleme hatası": "",
    "den çekilecek)\n    setTimeout(() => {\n      const results = [\n        { id: \"1\", name: \"Barcelona\", logo: \"/placeholder.svg?height=40&width=40&text=FCB\" },\n        { id: \"2\", name: \"Real Madrid\", logo: \"/placeholder.svg?height=40&width=40&text=RM\" },\n        { id: \"3\", name: \"Bayern Munich\", logo: \"/placeholder.svg?height=40&width=40&text=BM\" },\n        { id: \"4\", name: \"Manchester United\", logo: \"/placeholder.svg?height=40&width=40&text=MU\" },\n        { id: \"5\", name: \"Liverpool\", logo: \"/placeholder.svg?height=40&width=40&text=LIV\" },\n        { id: \"6\", name: \"Juventus\", logo: \"/placeholder.svg?height=40&width=40&text=JUV\" },\n        { id: \"7\", name: \"Paris Saint-Germain\", logo: \"/placeholder.svg?height=40&width=40&text=PSG\" },\n        { id: \"8\", name: \"Manchester City\", logo: \"/placeholder.svg?height=40&width=40&text=MC\" },\n        { id: \"9\", name: \"Chelsea\", logo: \"/placeholder.svg?height=40&width=40&text=CHE\" },\n        { id: \"10\", name: \"Arsenal\", logo: \"/placeholder.svg?height=40&width=40&text=ARS\" },\n      ].filter((team) => team.name.toLowerCase().includes(term.toLowerCase()))\n\n      setSearchResults(results)\n      setSearching(false)\n    }, 500)\n  }\n\n  // Favori takım ekle\n  const addFavoriteTeam = (team: FavoriteTeam) => {\n    if (settings.favoriteTeams.some((t) => t.id === team.id)) {\n      toast({\n        title: t(": "",
    ", team.name),\n      duration: 3000,\n    })\n  }\n\n  // Favori takım kaldır\n  const removeFavoriteTeam = (teamId: string) => {\n    setSettings({\n      ...settings,\n      favoriteTeams: settings.favoriteTeams.filter((team) => team.id !== teamId),\n    })\n\n    toast({\n      title: t(": "",
    "),\n          variant: \"destructive\",\n          duration: 3000,\n        })\n      }\n    }\n  }\n\n  return (\n    <>\n      <Card className=\"w-full max-w-4xl mx-auto\">\n        <CardHeader>\n          <div className=\"flex items-center space-x-4\">\n            <Avatar className=\"h-12 w-12\">\n              <AvatarImage src=\"/placeholder.svg?height=48&width=48&text=U\" alt=\"User\" />\n              <AvatarFallback>U</AvatarFallback>\n            </Avatar>\n            <div>\n              <CardTitle>{t(": "",
    ")}\n                    className=\"pl-8\"\n                    value={searchTerm}\n                    onChange={(e) => searchTeams(e.target.value)}\n                  />\n                </div>\n\n                {searchTerm.length > 1 && (\n                  <Card className=\"mt-2\">\n                    <CardContent className=\"p-2\">\n                      {searching ? (\n                        <div className=\"flex justify-center py-4\">\n                          <Loader2 className=\"h-6 w-6 animate-spin text-primary\" />\n                        </div>\n                      ) : searchResults.length > 0 ? (\n                        <ScrollArea className=\"h-48\">\n                          <div className=\"space-y-2\">\n                            {searchResults.map((team) => (\n                              <div\n                                key={team.id}\n                                className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-md\"\n                              >\n                                <div className=\"flex items-center\">\n                                  <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2\">\n                                    <img\n                                      src={team.logo || \"/placeholder.svg\"}\n                                      alt={team.name}\n                                      className=\"w-full h-full object-cover\"\n                                    />\n                                  </div>\n                                  <span>{team.name}</span>\n                                </div>\n                                <Button\n                                  size=\"sm\"\n                                  variant=\"ghost\"\n                                  onClick={() => addFavoriteTeam(team)}\n                                  className=\"h-8 w-8 p-0\"\n                                >\n                                  <Plus className=\"h-4 w-4\" />\n                                </Button>\n                              </div>\n                            ))}\n                          </div>\n                        </ScrollArea>\n                      ) : (\n                        <p className=\"text-center py-4 text-sm text-muted-foreground\">{t(": "",
    ")}</h3>\n                  {settings.favoriteTeams.length > 0 ? (\n                    <div className=\"space-y-2\">\n                      {settings.favoriteTeams.map((team) => (\n                        <div\n                          key={team.id}\n                          className=\"flex items-center justify-between p-2 hover:bg-secondary rounded-md\"\n                        >\n                          <div className=\"flex items-center\">\n                            <div className=\"w-8 h-8 rounded-full overflow-hidden mr-2\">\n                              <img\n                                src={team.logo || \"/placeholder.svg\"}\n                                alt={team.name}\n                                className=\"w-full h-full object-cover\"\n                              />\n                            </div>\n                            <span>{team.name}</span>\n                          </div>\n                          <Button\n                            size=\"sm\"\n                            variant=\"ghost\"\n                            onClick={() => removeFavoriteTeam(team.id)}\n                            className=\"h-8 w-8 p-0 text-destructive hover:text-destructive/90\"\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      ))}\n                    </div>\n                  ) : (\n                    <p className=\"text-center py-4 text-sm text-muted-foreground\">\n                      {t(": "",
    ")}</option>\n                    <option value=\"en\">{t(": "",
    ")}\n                  </Button>\n                </div>\n              </div>\n            </TabsContent>\n          </Tabs>\n        </CardContent>\n      </Card>\n      \n      {/* Başarı mesajı */}\n      {showSuccessToast && (\n        <div className=\"fixed bottom-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg animate-fade-in-up\">\n          {t(": "",
    "de veri varsa ve 5 saniyeden az bir süre geçtiyse kullan\n  if (cachedData && (Date.now() - cachedData.timestamp) < 5000) {\n    return cachedData.matches\n  }\n\n  try {\n    const response = await api.get(\"/\", {\n      params: {\n        APIkey: API_KEY,\n        action: \"get_events\",\n        match_live: \"1\",\n      },\n    })\n\n    // Timestamp ile birlikte kaydet\n    const liveMatchesData = {\n      matches: response.data || [],\n      timestamp: Date.now()\n    }\n\n    // 30 saniye boyunca cache": "",
    "İstek zaman aşımına uğradı": "",
    "Canlı maç verisi çekilirken hata oluştu:": "",
    "den veriyi çek\n    const response = await apiCall;\n    clearTimeout(timeoutId);\n    \n    if (response.data) {\n      // API yanıtını işlemek için requestIdleCallback kullan (tarayıcı boşta ise)\n      const processData = () => {\n        // Veriyi önbelleğe al\n        cacheService.set(cacheKey, response.data, cacheDuration)\n        return response.data\n      }\n      \n      // Tarayıcı için performans optimizasyonu\n      if (typeof window !== ": "",
    " in window) {\n        window.requestIdleCallback(() => processData())\n      } else {\n        // RequestIdleCallback kullanılamıyorsa direkt işle\n        processData()\n      }\n      \n      return response.data\n    }\n\n    throw new Error(\"Boş API yanıtı\")\n  } catch (error) {\n    console.error(`API çağrısında hata (${cacheKey}):`, error)\n    \n    // Hata durumunda boş bir veri dizisi döndür, bu şekilde kullanıcı arayüzü çökmez\n    if (cacheKey.includes(": "",
    ")) {\n      return []\n    }\n    \n    throw error\n  }\n}\n\n// Optimize edilmiş API istekleri için batch fonksiyonu\n// Birden fazla API isteğini tek seferde yapabilmek için\nconst batchApiRequests = async <T>(requests: (() => Promise<T>)[], maxConcurrent = 3): Promise<T[]> => {\n  const results: T[] = [];\n  const chunks: (() => Promise<T>)[][] = [];\n  \n  // İstekleri parçalara böl\n  for (let i = 0; i < requests.length; i += maxConcurrent) {\n    chunks.push(requests.slice(i, i + maxConcurrent));\n  }\n  \n  // Her bir parçayı paralel olarak işle\n  for (const chunk of chunks) {\n    const chunkResults = await Promise.all(chunk.map(req => req()));\n    results.push(...chunkResults);\n  }\n  \n  return results;\n};\n\n// Canlı maçları çek - optimize edilmiş\nexport async function getLiveMatches() {\n  try {\n    // İlk önce önbelleğe bak\n    const cacheKey = \"live_matches\";\n    const cachedData = cacheService.get(cacheKey);\n    if (cachedData) return cachedData;\n    \n    // API çağrısı yap\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        match_live: \"1\",\n      },\n      // 5 saniye timeout ile, hızlı yanıt için\n      timeout: 5000\n    });\n    \n    // Veriyi işle ve array olduğundan emin ol\n    const data = Array.isArray(response.data) ? response.data : [];\n    \n    // Önbelleğe al\n    cacheService.set(cacheKey, data, 15 * 1000); // 15 saniye\n    \n    return data;\n  } catch (error) {\n    console.error(\"Canlı maçlar çekilirken hata:\", error);\n    return []; // Her zaman dizi döndür\n  }\n}\n\n// Maç detaylarını çek\nexport async function getMatchDetails(matchId: string) {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        match_id: matchId,\n      },\n    }),\n    `match_details_${matchId}`,\n    15 * 1000, // 15 saniye önbellek\n  )\n}\n\n// Maç istatistiklerini çek\nexport async function getMatchStatistics(matchId: string) {\n  try {\n    const cacheKey = `match_statistics_${matchId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_statistics\",\n        match_id: matchId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (\n      !response.data ||\n      response.data === \"No statistics found\" ||\n      (Array.isArray(response.data) && response.data.length === 0)\n    ) {\n      console.log(\"İstatistik verisi bulunamadı\")\n      return null\n    }\n\n    // Veriyi işle\n    let statistics = {}\n\n    if (Array.isArray(response.data)) {\n      // İstatistikleri işle\n      statistics = response.data.reduce((acc, stat) => {\n        if (stat.type && stat.home !== undefined && stat.away !== undefined) {\n          acc[stat.type] = {\n            home: stat.home,\n            away: stat.away,\n          }\n        }\n        return acc\n      }, {})\n    } else if (typeof response.data === \"object\") {\n      // Tek bir istatistik nesnesi\n      Object.entries(response.data).forEach(([key, value]: [string, any]) => {\n        if (value && value.home !== undefined && value.away !== undefined) {\n          statistics[key] = {\n            home: value.home,\n            away: value.away,\n          }\n        }\n      })\n    }\n\n    // İstatistik yoksa null döndür\n    if (Object.keys(statistics).length === 0) {\n      console.log(\"İşlenebilir istatistik verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, statistics, 15 * 1000) // 15 saniye önbellek\n    return statistics\n  } catch (error) {\n    console.error(\"İstatistik verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Maç kadrosunu çek\nexport async function getMatchLineups(matchId: string) {\n  try {\n    const cacheKey = `match_lineups_${matchId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_lineups\",\n        match_id: matchId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (!response.data || response.data === \"No lineups found\" || response.data.error) {\n      console.log(\"Kadro verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, response.data, 15 * 1000) // 15 saniye önbellek\n    return response.data\n  } catch (error) {\n    console.error(\"Kadro verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// H2H maçları çek\nexport async function getHeadToHead(team1Id: string, team2Id: string) {\n  try {\n    const cacheKey = `h2h_${team1Id}_${team2Id}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_H2H\",\n        firstTeamId: team1Id,\n        secondTeamId: team2Id,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (\n      !response.data ||\n      !response.data.firstTeam_VS_secondTeam ||\n      response.data.firstTeam_VS_secondTeam.length === 0\n    ) {\n      console.log(\"H2H verisi bulunamadı\")\n      return { matches: [] }\n    }\n\n    // Veriyi işle\n    const h2hMatches = response.data.firstTeam_VS_secondTeam.map((match) => ({\n      id: match.match_id,\n      homeTeam: {\n        id: match.match_hometeam_id,\n        name: match.match_hometeam_name,\n      },\n      awayTeam: {\n        id: match.match_awayteam_id,\n        name: match.match_awayteam_name,\n      },\n      score: {\n        fullTime: {\n          home: Number.parseInt(match.match_hometeam_score) || 0,\n          away: Number.parseInt(match.match_awayteam_score) || 0,\n        },\n      },\n      utcDate: match.match_date,\n      status: match.match_status,\n    }))\n\n    const result = { matches: h2hMatches }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, result, 30 * 60 * 1000) // 30 dakika önbellek\n    return result\n  } catch (error) {\n    console.error(\"H2H verisi çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Yıldız oyuncuları çek\nexport async function getStarPlayers(teamId: string) {\n  try {\n    const cacheKey = `star_players_${teamId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    // Önce takım oyuncularını çek\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_teams\",\n        team_id: teamId,\n      },\n    })\n\n    // API yanıtını kontrol et\n    if (!response.data || (Array.isArray(response.data) && response.data.length === 0)) {\n      console.log(\"Takım verisi bulunamadı\")\n      return null\n    }\n\n    // Veriyi işle\n    let players = []\n\n    if (Array.isArray(response.data) && response.data.length > 0) {\n      // Oyuncuları çıkar\n      if (response.data[0].players && Array.isArray(response.data[0].players)) {\n        players = response.data[0].players.map((player) => ({\n          id: player.player_id || `player-${Math.random().toString(36).substr(2, 9)}`,\n          name: player.player_name,\n          position: mapPosition(player.player_type),\n          rating: Number.parseFloat(player.player_rating) || 6 + Math.random() * 4,\n          goals: Number.parseInt(player.player_goals) || 0,\n          assists: Number.parseInt(player.player_assists) || 0,\n          matches: Number.parseInt(player.player_match_played) || 0,\n        }))\n\n        // Oyuncuları sırala (gol, asist, puan)\n        players.sort((a, b) => {\n          if (a.goals !== b.goals) return b.goals - a.goals\n          if (a.assists !== b.assists) return b.assists - a.assists\n          return b.rating - a.rating\n        })\n\n        // En iyi 5 oyuncuyu al\n        players = players.slice(0, 5)\n      }\n    }\n\n    // Oyuncu yoksa null döndür\n    if (players.length === 0) {\n      console.log(\"İşlenebilir oyuncu verisi bulunamadı\")\n      return null\n    }\n\n    // Önbelleğe al\n    cacheService.set(cacheKey, players, 30 * 60 * 1000) // 30 dakika önbellek\n    return players\n  } catch (error) {\n    console.error(\"Yıldız oyuncular çekilirken hata:\", error)\n    throw error\n  }\n}\n\n// Pozisyon tipini dönüştür\nfunction mapPosition(type: string): string {\n  if (!type) return \"Unknown\"\n\n  type = type.toLowerCase()\n\n  if (type.includes(\"goalkeeper\") || type.includes(\"kaleci\")) return \"Goalkeeper\"\n  if (type.includes(\"defender\") || type.includes(\"defans\")) return \"Defender\"\n  if (type.includes(\"midfielder\") || type.includes(\"orta saha\")) return \"Midfielder\"\n  if (type.includes(\"forward\") || type.includes(\"forvet\")) return \"Attacker\"\n\n  return \"Unknown\"\n}\n\n// Takım formunu çekmek için fonksiyon\nexport async function getTeamForm(teamId: string) {\n  try {\n    const cacheKey = `team_form_${teamId}`\n    const cachedData = cacheService.get(cacheKey)\n\n    if (cachedData) {\n      return cachedData\n    }\n\n    // Son 10 maçı çek\n    const lastMatches = await getTeamLastMatches(teamId, 10)\n\n    if (!Array.isArray(lastMatches) || lastMatches.length === 0) {\n      console.log(\"Takım form verisi bulunamadı\")\n      return []\n    }\n\n    // Form hesapla (W, D, L)\n    const form = lastMatches.map((match) => {\n      const isHome = match.match_hometeam_id === teamId\n      const homeScore = Number.parseInt(match.match_hometeam_score || \"0\")\n      const awayScore = Number.parseInt(match.match_awayteam_score || \"0\")\n\n      if (isHome) {\n        if (homeScore > awayScore) return \"W\"\n        if (homeScore < awayScore) return \"L\"\n        return \"D\"\n      } else {\n        if (homeScore < awayScore) return \"W\"\n        if (homeScore > awayScore) return \"L\"\n        return \"D\"\n      }\n    })\n\n    // 30 dakika için önbelleğe al\n    cacheService.set(cacheKey, form, 30 * 60 * 1000)\n    return form\n  } catch (error) {\n    console.error(\"Takım formu hesaplanırken hata:\", error)\n    throw error\n  }\n}\n\n// Takımın son maçlarını çek - isteğe bağlı önişleme ile\nexport async function getTeamLastMatches(teamId: string, limit = 10, preprocess = true) {\n  try {\n    const cacheKey = `team_last_matches_${teamId}_${limit}`;\n    const cachedData = cacheService.get(cacheKey);\n\n    if (cachedData) {\n      return cachedData;\n    }\n\n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        team_id: teamId,\n        from: \"2023-01-01\", // Yılın başından itibaren\n        to: new Date().toISOString().split(\"T\")[0], // Bugün\n      },\n    });\n\n    // API yanıtını kontrol et\n    if (!response.data || (Array.isArray(response.data) && response.data.length === 0)) {\n      console.log(\"Takımın son maçları bulunamadı\");\n      return [];\n    }\n\n    // Sadece son X maçı almak için işle\n    let matches = Array.isArray(response.data) ? response.data : [];\n\n    if (preprocess) {\n      // Tarihe göre sırala (en yeni önce)\n      matches.sort((a, b) => {\n        const dateA = new Date(`${a.match_date} ${a.match_time}`).getTime();\n        const dateB = new Date(`${b.match_date} ${b.match_time}`).getTime();\n        return dateB - dateA;\n      });\n\n      // Sadece son ": "",
    " maçı al\n      matches = matches.slice(0, limit);\n    }\n\n    // 15 dakika için önbelleğe al\n    cacheService.set(cacheKey, matches, 15 * 60 * 1000);\n    return matches;\n  } catch (error) {\n    console.error(\"Takımın son maçları çekilirken hata:\", error);\n    return []; // Boş dizi döndür\n  }\n}\n\n// Birden çok takımın son maçlarını paralel olarak çek\nexport async function getMultipleTeamsLastMatches(teamIds: string[], limit = 10) {\n  try {\n    // Her takım için ayrı önbellekleme\n    const fetchTeamMatches = (teamId: string) => getTeamLastMatches(teamId, limit, false);\n    \n    // Paralel istekler\n    const requests = teamIds.map(teamId => () => fetchTeamMatches(teamId));\n    const results = await batchApiRequests(requests, 3);  // Aynı anda en fazla 3 istek\n    \n    return results;\n  } catch (error) {\n    console.error(\"Çoklu takım maçları çekilirken hata:\", error);\n    return teamIds.map(() => []); // Her takım için boş dizi\n  }\n}\n\n// Ülkeleri çek\nexport async function getCountries() {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_countries\",\n      },\n    }),\n    \"countries\",\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Ligleri çek\nexport async function getLeagues(countryId?: string) {\n  const cacheKey = `leagues_${countryId || \"all\"}`\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_leagues\",\n        country_id: countryId,\n      },\n    }),\n    cacheKey,\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Tüm ligleri çek\nexport async function getAllLeagues() {\n  return handleApiResponse(\n    apiClient.get(\"\", {\n      params: {\n        action: \"get_leagues\",\n      },\n    }),\n    \"all_leagues\",\n    24 * 60 * 60 * 1000, // 24 saat önbellek\n  )\n}\n\n// Yaklaşan maçları çek - paralel veri işleme ile optimize edilmiş\nexport async function getUpcomingMatches(from: string, to: string) {\n  try {\n    const cacheKey = `upcoming_matches_${from}_${to}`;\n    const cachedData = cacheService.get(cacheKey);\n    \n    if (cachedData) {\n      return cachedData;\n    }\n    \n    const response = await apiClient.get(\"\", {\n      params: {\n        action: \"get_events\",\n        from,\n        to,\n      },\n      timeout: 8000  // 8 saniye timeout\n    });\n    \n    // Veriyi async olarak işle\n    const processData = () => {\n      const data = Array.isArray(response.data) ? response.data : [];\n      \n      // Doğru sıralamayı sağlamak için tarihlere göre sırala\n      const sortedData = data.sort((a, b) => {\n        const dateA = new Date(`${a.match_date} ${a.match_time}`);\n        const dateB = new Date(`${b.match_date} ${b.match_time}`);\n        return dateA.getTime() - dateB.getTime();\n      });\n      \n      // 5 dakika önbellekte tut\n      cacheService.set(cacheKey, sortedData, 5 * 60 * 1000);\n      return sortedData;\n    };\n    \n    // Tarayıcıda boş zamanda işleme yapmak için\n    if (typeof window !== ": "",
    "API Hatası:": "",
    "Boş API yanıtı": "",
    "Canlı maçlar çekilirken hata:": "",
    "İstatistik verisi bulunamadı": "",
    "İşlenebilir istatistik verisi bulunamadı": "",
    "İstatistik verisi çekilirken hata:": "",
    "Kadro verisi bulunamadı": "",
    "H2H verisi bulunamadı": "",
    "H2H verisi çekilirken hata:": "",
    "Takım verisi bulunamadı": "",
    "İşlenebilir oyuncu verisi bulunamadı": "",
    "Yıldız oyuncular çekilirken hata:": "",
    "Takım form verisi bulunamadı": "",
    "Takım formu hesaplanırken hata:": "",
    "Takımın son maçları bulunamadı": "",
    "Takımın son maçları çekilirken hata:": "",
    "Çoklu takım maçları çekilirken hata:": "",
    "Yaklaşan maçlar çekilirken hata:": "",
    "LocalStorage erişimi mevcut değil": "",
    "Bildirim izni istenirken hata:": "",
    "Bildirim gönderilirken hata:": "",
    "Futbol Tahmin": "",
    "Lig Seç": "",
    "DÜNYANIN EN GENİŞ LİG KAPSAMI": "",
    "AI Tahmin Motoru": "",
    "Günlük Tahmin": "",
    "İLK VE TEK": "",
    "gerçek zamanlı maç analiz platformu": "",
    "Tamamen Şeffaf:": "",
    "kanıtlanmış sonuçlar!": "",
    "SAHTE VERİ YOK": "",
    "SADECE GERÇEK VERİ": "",
    "Geçmiş tüm tahminler kesintisiz olarak görüntülenebilir": "",
    "Kaybedilen tahminler dahil tüm sonuçlar açık şekilde paylaşılır": "",
    "Üstün Algoritma:": "",
    "5 yıl boyunca geliştirilen ve eğitilen özel algoritma, hiçbir yerde bulunmayan yapay zeka teknolojisiyle çalışır.": "",
    "5 YIL EĞİTİM": "",
    "milyon+ veri noktası": "",
    "PRO ÜYELİK AVANTAJLARI:": "",
    "SINIRLI SÜRE": "",
    "Analiz": "",
    "Son 10 Maç Analizi": "",
    "Sonuçlar": "",
    "Ekstra İstatistikler": "",
    "Maç Başı Gol": "",
    "Maç Başı Y.Gol": "",
    "{{teamName}} son maçlarda yükselen bir performans gösteriyor. Bu formlarını sürdürmeleri halinde başarılı olmaları muhtemel.": "",
    "{{teamName}} son 10 maçta istikrarlı bir performans sergiliyor. {{wins}} galibiyet, {{draws}} beraberlik ve {{losses}} mağlubiyet aldılar.": "",
    "Son 10 maçta {{count}} kez gol yemeden maçı tamamladılar.": "",
    "Son 10 maçta {{count}} kez gol atamadılar.": "",
    "Takımın son maçları bulunamadı.": "",
    "Son maçlar yüklenirken bir hata oluştu.": "",
    "Algoritma Performansı": "",
    "Algoritma Kazandırdı!": "",
    "Toplam Kazanç": "",
    "Filtrele": "",
    "Dün": "",
    "Bugün için \"{{type}}\" tipinde kazanan tahmin yok": "",
    "Gelişmiş makine öğrenmesi algoritmaları ile futbol tahminlerinde yeni bir çağ başlıyor.": "",
    "Son 10 yılın tüm maç verilerini analiz eden gelişmiş neural network sistemi.": "",
    "Gerçek Zamanlı": "",
    "WELTWEIT GRÖßTE LIGA-ABDECKUNG": "",
    "Unterstützt von": "",
    "Völlig transparent:": "",
    "Alle Vorhersagen können kontinuierlich eingesehen werden": "",
    "Überlegener Algorithmus:": "",
    "Unser proprietärer Algorithmus, der über 5 Jahre entwickelt und trainiert wurde, arbeitet mit KI-Technologie, die nirgendwo sonst zu finden ist.": "",
    "100% Geld-zurück": ""
  }
}